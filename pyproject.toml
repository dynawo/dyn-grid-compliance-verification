# A pyproject.toml based on the latest standards for packaging (PEPs 517, 518,
# 621), which decouple package building from package internal structure and
# installation.  In our case we will continue to use setuptools as the
# underlying build back-end, but the new standard allows us to:
#
#   - get rid of setup.py and setup.cfg
#   - get rid of MANIFEST.in (include data files here via the package-data entry)
#   - install less things in our venv: only "pip" and "build" are needed, and
#     then "build" will install anything else it needs (setuptools and wheel) in
#     a temporary venv at build time.
#
# Official specs (as of 2024):
#    https://packaging.python.org/en/latest/specifications/pyproject-toml/
#
#
# Reminder of the main steps for building the package:
#    python3 -m venv dse_venv
#    source dse_venv/bin/activate
#    pip install --upgrade pip build
#    python -m build --wheel
#


[build-system]
requires = ["setuptools>=65"]
build-backend = "setuptools.build_meta"


[project]
# Metadata:
name = "dycov"
version = "0.8.0"
description = "A tool for automating the verification of dynamic grid compliance requirements for solar, wind, and storage farms, including RMS model validation."
authors = [
    {name="Guiu Oms", email="omsg@aia.es"},
    {name="Marcos de Miguel", email="demiguelm@aia.es"},
    {name="Jose Luis Marin", email="marinjl@aia.es"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
keywords = ["Power Systems", "Dynamic modeling", "verification", "validation"]

# Use the official classifiers published by PyPI (PEP 301): https://pypi.org/classifiers/
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Operating System :: OS Independent"
]
urls = {"Code repo"="https://github.com/dynawo/dyn-grid-compliance-verification", "Bug tracker"="https://github.com/dynawo/dyn-grid-compliance-verification"}

# Required packages: here we declare only the direct dependencies. To see all the cascading
# dependencies, pip-install pipdeptree and run "pipdeptree -p dycov".
dependencies = [
    "comtrade>=0.0.10",		# MIT License
    "fpdf>=1.7.2",		# GNU Lesser General Public License v3 (LGPLv3)
    "Jinja2>=3.1.2",		# BSD License
    "lxml>=4.6.3",		# BSD License
    "matplotlib>=3.4.0",	# Python Software Foundation License
    "numpy>=1.21.0",		# BSD License
    "pandas>=1.3.0",		# BSD License
    "plotly>=5.20.0",		# MIT License
    "SciPy>=1.9.3",		# BSD License
    "colorama>=0.4.6",		# BSD License
]


# Data files: we now manage them here, instead of the MANIFEST.in file.
# See: https://setuptools.pypa.io/en/latest/userguide/datafiles.html
# The former content of the MANIFEST.in file was:
#   recursive-include src/dycov/report/templates *
#   recursive-include src/dycov/templates *
#   recursive-include src/dycov/model_lib *
#   recursive-include src/dycov *.ini
#   include src/dycov/dynawo/Vsx64.cmd
#
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
dcgv = ["report/templates", "templates", "model_lib", "*.ini", "dynawo/Vsx64.cmd"]


# Entry points and automatic script creation:
[project.scripts]
dycov = "dycov.launchers:dycov"


# Importer tool
[tool.isort]
multi_line_output = 3
line_length = 99
include_trailing_comma = true


# Code-formatting tool:
[tool.black]
line-length = 99


# Code-linting tool:
# [tool.flake8]
# (flake8 doesn't support pyproject.toml yet, so we use a .flake8 file at the project root)
# TODO: migrate to Astral's Ruff: https://docs.astral.sh/ruff/

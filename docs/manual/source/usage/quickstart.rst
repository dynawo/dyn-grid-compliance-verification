===============
Getting Started
===============

The tool currently has different entry points, depending on what you want to use it for:
 
* For :ref:`RMS Model Validation for PPM <model_validation>`: `dgcv validate`
* For :ref:`Electric Performance Verification <perf_verification>`: `dgcv performance`
 
Run the command `dgcv` with option ``--help`` (or ``-h``) to get a quick overview of the
inputs you need to provide:
 
.. include:: helps/dgcv.rst


.. _model_validation:

RMS Model Validation
--------------------

In this mode the tool runs a set of *Model Validation tests*. Some of these tests resemble those
of the *PCS* in the provisional operation notification (ION) stage in the RTE's DTR, while some 
are different. Of course, here one is validating the model, not the electric performance; 
therefore, it is mandatory to provide *reference curves* as well as a model or producer curves. 
You would use the command `dgcv validate`

Run the command with option ``--help`` (or ``-h``) to get a quick overview of the
inputs you need to provide:

.. include:: helps/validate.rst

.. warning::
    Remember that the Python virtual environment should be activated executing the corresponding
    source command, such as: `source ~/dgcv/bin/activate` (assuming that you cloned the
    repository locally under `$HOME/dgcv`). You can easily tell whether the environment is
    active or not because the prompt changes to show the name of said virtual environment.


.. _perf_verification:

Electric Performance Verification
---------------------------------

This command can be used with PPM, Stockage or with synchronous machines.
In this mode the tool runs an execution pipeline consisting in a set of pre-defined tests, those
of the *PCS* in the provisional operation notification (ION) stage in the RTE's DTR. You would
use the command `dgcv performance`

Run the command with option ``--help`` (or ``-h``) to get a quick overview of the
inputs you need to provide:

.. include:: helps/performance.rst

.. warning::
    Remember that the Python virtual environment should be activated executing the corresponding
    source command, such as: `source ~/dgcv/bin/activate` (assuming that you cloned the
    repository locally under `$HOME/dgcv`). You can easily tell whether the environment is
    active or not because the prompt changes to show the name of said virtual environment.

Note that, in this mode, the tool can perform the electrical performance validation using either
a user-provided Dynawo **model** (running Dynawo simulations), or a set of user-provided **curves**,
or both (in which case the curves are used only for showning them on the graphs, along the simulated
curves). Therefore you must provide either a `PRODUCER_MODEL` or a `PRODUCER_CURVE` directory, or both.

The options and the required format of INI and curves files are documented in this manual. For the format of DYD and PAR files (that is, the Dynawo model of the
producer's facilities), see the Dynawo documentation.


Generate Producer Input Files
-----------------------------

In this mode the tool creates all the input files necessary to run the different verification
modes of the tool through a guided process. You would use the command `dgcv generate`

Run the command with option ``--help`` (or ``-h``) to get a quick overview of the
inputs you need to provide:

.. include:: helps/generate.rst


Compile Dynamic Models
----------------------

In this mode the tool runs the compilation of dynamic models external to Dynawo, both those
implemented in the tool and those generated by the user. You would use the command `dgcv compile`

Run the command with option ``--help`` (or ``-h``) to get a quick overview of the
inputs you need to provide:

.. include:: helps/compile.rst


Curve Anonymizer
----------------

In this mode the tool generates a set of curves with generic names from the input curves to which
a noise signal is added. You would use the command `dgcv anonymize`.

Run the command with option ``--help`` (or ``-h``) to get a quick overview of the
inputs you need to provide:

.. include:: helps/anonymize.rst

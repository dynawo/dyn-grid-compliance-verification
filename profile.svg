<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="906" onload="init(evt)" viewBox="0 0 1200 906" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="906" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile.svg -- pytest</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="895.00"> </text><svg id="frames" x="10" width="1180" total_samples="108902"><g><title>obj (_pytest/python.py:284) (192 samples, 0.18%)</title><rect x="0.0799%" y="516" width="0.1763%" height="15" fill="rgb(227,0,7)" fg:x="87" fg:w="192"/><text x="0.3299%" y="526.50"></text></g><g><title>_getobj (_pytest/python.py:546) (192 samples, 0.18%)</title><rect x="0.0799%" y="532" width="0.1763%" height="15" fill="rgb(217,0,24)" fg:x="87" fg:w="192"/><text x="0.3299%" y="542.50"></text></g><g><title>importtestmodule (_pytest/python.py:493) (192 samples, 0.18%)</title><rect x="0.0799%" y="548" width="0.1763%" height="15" fill="rgb(221,193,54)" fg:x="87" fg:w="192"/><text x="0.3299%" y="558.50"></text></g><g><title>import_path (_pytest/pathlib.py:561) (191 samples, 0.18%)</title><rect x="0.0808%" y="564" width="0.1754%" height="15" fill="rgb(248,212,6)" fg:x="88" fg:w="191"/><text x="0.3308%" y="574.50"></text></g><g><title>_import_module_using_spec (_pytest/pathlib.py:715) (190 samples, 0.17%)</title><rect x="0.0817%" y="580" width="0.1745%" height="15" fill="rgb(208,68,35)" fg:x="89" fg:w="190"/><text x="0.3317%" y="590.50"></text></g><g><title>exec_module (_pytest/assertion/rewrite.py:184) (186 samples, 0.17%)</title><rect x="0.0854%" y="596" width="0.1708%" height="15" fill="rgb(232,128,0)" fg:x="93" fg:w="186"/><text x="0.3354%" y="606.50"></text></g><g><title>collect (_pytest/python.py:549) (193 samples, 0.18%)</title><rect x="0.0799%" y="484" width="0.1772%" height="15" fill="rgb(207,160,47)" fg:x="87" fg:w="193"/><text x="0.3299%" y="494.50"></text></g><g><title>_register_setup_module_fixture (_pytest/python.py:562) (193 samples, 0.18%)</title><rect x="0.0799%" y="500" width="0.1772%" height="15" fill="rgb(228,23,34)" fg:x="87" fg:w="193"/><text x="0.3299%" y="510.50"></text></g><g><title>genitems (_pytest/main.py:970) (201 samples, 0.18%)</title><rect x="0.0799%" y="340" width="0.1846%" height="15" fill="rgb(218,30,26)" fg:x="87" fg:w="201"/><text x="0.3299%" y="350.50"></text></g><g><title>_collect_one_node (_pytest/main.py:835) (201 samples, 0.18%)</title><rect x="0.0799%" y="356" width="0.1846%" height="15" fill="rgb(220,122,19)" fg:x="87" fg:w="201"/><text x="0.3299%" y="366.50"></text></g><g><title>collect_one_node (_pytest/runner.py:567) (201 samples, 0.18%)</title><rect x="0.0799%" y="372" width="0.1846%" height="15" fill="rgb(250,228,42)" fg:x="87" fg:w="201"/><text x="0.3299%" y="382.50"></text></g><g><title>__call__ (pluggy/_hooks.py:513) (201 samples, 0.18%)</title><rect x="0.0799%" y="388" width="0.1846%" height="15" fill="rgb(240,193,28)" fg:x="87" fg:w="201"/><text x="0.3299%" y="398.50"></text></g><g><title>_hookexec (pluggy/_manager.py:120) (201 samples, 0.18%)</title><rect x="0.0799%" y="404" width="0.1846%" height="15" fill="rgb(216,20,37)" fg:x="87" fg:w="201"/><text x="0.3299%" y="414.50"></text></g><g><title>_multicall (pluggy/_callers.py:103) (201 samples, 0.18%)</title><rect x="0.0799%" y="420" width="0.1846%" height="15" fill="rgb(206,188,39)" fg:x="87" fg:w="201"/><text x="0.3299%" y="430.50"></text></g><g><title>pytest_make_collect_report (_pytest/runner.py:391) (201 samples, 0.18%)</title><rect x="0.0799%" y="436" width="0.1846%" height="15" fill="rgb(217,207,13)" fg:x="87" fg:w="201"/><text x="0.3299%" y="446.50"></text></g><g><title>from_call (_pytest/runner.py:341) (201 samples, 0.18%)</title><rect x="0.0799%" y="452" width="0.1846%" height="15" fill="rgb(231,73,38)" fg:x="87" fg:w="201"/><text x="0.3299%" y="462.50"></text></g><g><title>collect (_pytest/runner.py:389) (201 samples, 0.18%)</title><rect x="0.0799%" y="468" width="0.1846%" height="15" fill="rgb(225,20,46)" fg:x="87" fg:w="201"/><text x="0.3299%" y="478.50"></text></g><g><title>_main (_pytest/main.py:336) (212 samples, 0.19%)</title><rect x="0.0735%" y="196" width="0.1947%" height="15" fill="rgb(210,31,41)" fg:x="80" fg:w="212"/><text x="0.3235%" y="206.50"></text></g><g><title>__call__ (pluggy/_hooks.py:513) (212 samples, 0.19%)</title><rect x="0.0735%" y="212" width="0.1947%" height="15" fill="rgb(221,200,47)" fg:x="80" fg:w="212"/><text x="0.3235%" y="222.50"></text></g><g><title>_hookexec (pluggy/_manager.py:120) (212 samples, 0.19%)</title><rect x="0.0735%" y="228" width="0.1947%" height="15" fill="rgb(226,26,5)" fg:x="80" fg:w="212"/><text x="0.3235%" y="238.50"></text></g><g><title>_multicall (pluggy/_callers.py:103) (212 samples, 0.19%)</title><rect x="0.0735%" y="244" width="0.1947%" height="15" fill="rgb(249,33,26)" fg:x="80" fg:w="212"/><text x="0.3235%" y="254.50"></text></g><g><title>pytest_collection (_pytest/main.py:347) (212 samples, 0.19%)</title><rect x="0.0735%" y="260" width="0.1947%" height="15" fill="rgb(235,183,28)" fg:x="80" fg:w="212"/><text x="0.3235%" y="270.50"></text></g><g><title>perform_collect (_pytest/main.py:809) (212 samples, 0.19%)</title><rect x="0.0735%" y="276" width="0.1947%" height="15" fill="rgb(221,5,38)" fg:x="80" fg:w="212"/><text x="0.3235%" y="286.50"></text></g><g><title>genitems (_pytest/main.py:975) (212 samples, 0.19%)</title><rect x="0.0735%" y="292" width="0.1947%" height="15" fill="rgb(247,18,42)" fg:x="80" fg:w="212"/><text x="0.3235%" y="302.50"></text></g><g><title>genitems (_pytest/main.py:975) (211 samples, 0.19%)</title><rect x="0.0744%" y="308" width="0.1938%" height="15" fill="rgb(241,131,45)" fg:x="81" fg:w="211"/><text x="0.3244%" y="318.50"></text></g><g><title>genitems (_pytest/main.py:975) (205 samples, 0.19%)</title><rect x="0.0799%" y="324" width="0.1882%" height="15" fill="rgb(249,31,29)" fg:x="87" fg:w="205"/><text x="0.3299%" y="334.50"></text></g><g><title>get_curves_dataframe (src/dgcv/curves/importer.py:117) (170 samples, 0.16%)</title><rect x="0.3003%" y="564" width="0.1561%" height="15" fill="rgb(225,111,53)" fg:x="327" fg:w="170"/><text x="0.5503%" y="574.50"></text></g><g><title>load (src/dgcv/curves/reader.py:165) (170 samples, 0.16%)</title><rect x="0.3003%" y="580" width="0.1561%" height="15" fill="rgb(238,160,17)" fg:x="327" fg:w="170"/><text x="0.5503%" y="590.50"></text></g><g><title>load (comtrade.py:855) (170 samples, 0.16%)</title><rect x="0.3003%" y="596" width="0.1561%" height="15" fill="rgb(214,148,48)" fg:x="327" fg:w="170"/><text x="0.5503%" y="606.50"></text></g><g><title>_load_dat (comtrade.py:877) (170 samples, 0.16%)</title><rect x="0.3003%" y="612" width="0.1561%" height="15" fill="rgb(232,36,49)" fg:x="327" fg:w="170"/><text x="0.5503%" y="622.50"></text></g><g><title>load (comtrade.py:1094) (169 samples, 0.16%)</title><rect x="0.3012%" y="628" width="0.1552%" height="15" fill="rgb(209,103,24)" fg:x="328" fg:w="169"/><text x="0.5512%" y="638.50"></text></g><g><title>test_comtrade (test_comtrade.py:17) (221 samples, 0.20%)</title><rect x="0.3003%" y="548" width="0.2029%" height="15" fill="rgb(229,88,8)" fg:x="327" fg:w="221"/><text x="0.5503%" y="558.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (195 samples, 0.18%)</title><rect x="0.6749%" y="868" width="0.1791%" height="15" fill="rgb(213,181,19)" fg:x="735" fg:w="195"/><text x="0.9249%" y="878.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (205 samples, 0.19%)</title><rect x="0.6740%" y="852" width="0.1882%" height="15" fill="rgb(254,191,54)" fg:x="734" fg:w="205"/><text x="0.9240%" y="862.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (207 samples, 0.19%)</title><rect x="0.6731%" y="788" width="0.1901%" height="15" fill="rgb(241,83,37)" fg:x="733" fg:w="207"/><text x="0.9231%" y="798.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (207 samples, 0.19%)</title><rect x="0.6731%" y="804" width="0.1901%" height="15" fill="rgb(233,36,39)" fg:x="733" fg:w="207"/><text x="0.9231%" y="814.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (207 samples, 0.19%)</title><rect x="0.6731%" y="820" width="0.1901%" height="15" fill="rgb(226,3,54)" fg:x="733" fg:w="207"/><text x="0.9231%" y="830.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (207 samples, 0.19%)</title><rect x="0.6731%" y="836" width="0.1901%" height="15" fill="rgb(245,192,40)" fg:x="733" fg:w="207"/><text x="0.9231%" y="846.50"></text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:84) (394 samples, 0.36%)</title><rect x="0.5271%" y="644" width="0.3618%" height="15" fill="rgb(238,167,29)" fg:x="574" fg:w="394"/><text x="0.7771%" y="654.50"></text></g><g><title>obtain_reference_curve (src/dgcv/curves/manager.py:174) (393 samples, 0.36%)</title><rect x="0.5280%" y="660" width="0.3609%" height="15" fill="rgb(232,182,51)" fg:x="575" fg:w="393"/><text x="0.7780%" y="670.50"></text></g><g><title>__obtain_files_curve (src/dgcv/curves/manager.py:78) (241 samples, 0.22%)</title><rect x="0.6676%" y="676" width="0.2213%" height="15" fill="rgb(231,60,39)" fg:x="727" fg:w="241"/><text x="0.9176%" y="686.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (240 samples, 0.22%)</title><rect x="0.6685%" y="692" width="0.2204%" height="15" fill="rgb(208,69,12)" fg:x="728" fg:w="240"/><text x="0.9185%" y="702.50"></text></g><g><title>to_csv (pandas/core/generic.py:3967) (240 samples, 0.22%)</title><rect x="0.6685%" y="708" width="0.2204%" height="15" fill="rgb(235,93,37)" fg:x="728" fg:w="240"/><text x="0.9185%" y="718.50"></text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (240 samples, 0.22%)</title><rect x="0.6685%" y="724" width="0.2204%" height="15" fill="rgb(213,116,39)" fg:x="728" fg:w="240"/><text x="0.9185%" y="734.50"></text></g><g><title>save (pandas/io/formats/csvs.py:270) (236 samples, 0.22%)</title><rect x="0.6722%" y="740" width="0.2167%" height="15" fill="rgb(222,207,29)" fg:x="732" fg:w="236"/><text x="0.9222%" y="750.50"></text></g><g><title>_save (pandas/io/formats/csvs.py:275) (236 samples, 0.22%)</title><rect x="0.6722%" y="756" width="0.2167%" height="15" fill="rgb(206,96,30)" fg:x="732" fg:w="236"/><text x="0.9222%" y="766.50"></text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (236 samples, 0.22%)</title><rect x="0.6722%" y="772" width="0.2167%" height="15" fill="rgb(218,138,4)" fg:x="732" fg:w="236"/><text x="0.9222%" y="782.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (143 samples, 0.13%)</title><rect x="1.0266%" y="868" width="0.1313%" height="15" fill="rgb(250,191,14)" fg:x="1118" fg:w="143"/><text x="1.2766%" y="878.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (152 samples, 0.14%)</title><rect x="1.0257%" y="852" width="0.1396%" height="15" fill="rgb(239,60,40)" fg:x="1117" fg:w="152"/><text x="1.2757%" y="862.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (154 samples, 0.14%)</title><rect x="1.0248%" y="788" width="0.1414%" height="15" fill="rgb(206,27,48)" fg:x="1116" fg:w="154"/><text x="1.2748%" y="798.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (154 samples, 0.14%)</title><rect x="1.0248%" y="804" width="0.1414%" height="15" fill="rgb(225,35,8)" fg:x="1116" fg:w="154"/><text x="1.2748%" y="814.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (154 samples, 0.14%)</title><rect x="1.0248%" y="820" width="0.1414%" height="15" fill="rgb(250,213,24)" fg:x="1116" fg:w="154"/><text x="1.2748%" y="830.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (154 samples, 0.14%)</title><rect x="1.0248%" y="836" width="0.1414%" height="15" fill="rgb(247,123,22)" fg:x="1116" fg:w="154"/><text x="1.2748%" y="846.50"></text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (184 samples, 0.17%)</title><rect x="1.0220%" y="724" width="0.1690%" height="15" fill="rgb(231,138,38)" fg:x="1113" fg:w="184"/><text x="1.2720%" y="734.50"></text></g><g><title>save (pandas/io/formats/csvs.py:270) (182 samples, 0.17%)</title><rect x="1.0239%" y="740" width="0.1671%" height="15" fill="rgb(231,145,46)" fg:x="1115" fg:w="182"/><text x="1.2739%" y="750.50"></text></g><g><title>_save (pandas/io/formats/csvs.py:275) (182 samples, 0.17%)</title><rect x="1.0239%" y="756" width="0.1671%" height="15" fill="rgb(251,118,11)" fg:x="1115" fg:w="182"/><text x="1.2739%" y="766.50"></text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (182 samples, 0.17%)</title><rect x="1.0239%" y="772" width="0.1671%" height="15" fill="rgb(217,147,25)" fg:x="1115" fg:w="182"/><text x="1.2739%" y="782.50"></text></g><g><title>__obtain_files_curve (src/dgcv/curves/manager.py:80) (187 samples, 0.17%)</title><rect x="1.0211%" y="676" width="0.1717%" height="15" fill="rgb(247,81,37)" fg:x="1112" fg:w="187"/><text x="1.2711%" y="686.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (187 samples, 0.17%)</title><rect x="1.0211%" y="692" width="0.1717%" height="15" fill="rgb(209,12,38)" fg:x="1112" fg:w="187"/><text x="1.2711%" y="702.50"></text></g><g><title>to_csv (pandas/core/generic.py:3967) (187 samples, 0.17%)</title><rect x="1.0211%" y="708" width="0.1717%" height="15" fill="rgb(227,1,9)" fg:x="1112" fg:w="187"/><text x="1.2711%" y="718.50"></text></g><g><title>obtain_simulated_curve (src/dgcv/curves/manager.py:222) (332 samples, 0.30%)</title><rect x="0.8889%" y="660" width="0.3049%" height="15" fill="rgb(248,47,43)" fg:x="968" fg:w="332"/><text x="1.1389%" y="670.50"></text></g><g><title>has_required_curves (src/dgcv/model/operating_condition.py:248) (727 samples, 0.67%)</title><rect x="0.5271%" y="628" width="0.6676%" height="15" fill="rgb(221,10,30)" fg:x="574" fg:w="727"/><text x="0.7771%" y="638.50"></text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:94) (333 samples, 0.31%)</title><rect x="0.8889%" y="644" width="0.3058%" height="15" fill="rgb(210,229,1)" fg:x="968" fg:w="333"/><text x="1.1389%" y="654.50"></text></g><g><title>validate (src/dgcv/model/benchmark.py:537) (756 samples, 0.69%)</title><rect x="0.5252%" y="612" width="0.6942%" height="15" fill="rgb(222,148,37)" fg:x="572" fg:w="756"/><text x="0.7752%" y="622.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:105) (328 samples, 0.30%)</title><rect x="1.3149%" y="692" width="0.3012%" height="15" fill="rgb(234,67,33)" fg:x="1432" fg:w="328"/><text x="1.5649%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1174) (405 samples, 0.37%)</title><rect x="1.3021%" y="676" width="0.3719%" height="15" fill="rgb(247,98,35)" fg:x="1418" fg:w="405"/><text x="1.5521%" y="686.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:105) (365 samples, 0.34%)</title><rect x="1.7070%" y="692" width="0.3352%" height="15" fill="rgb(247,138,52)" fg:x="1859" fg:w="365"/><text x="1.9570%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1178) (440 samples, 0.40%)</title><rect x="1.7043%" y="676" width="0.4040%" height="15" fill="rgb(213,79,30)" fg:x="1856" fg:w="440"/><text x="1.9543%" y="686.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:782) (114 samples, 0.10%)</title><rect x="2.1763%" y="708" width="0.1047%" height="15" fill="rgb(246,177,23)" fg:x="2370" fg:w="114"/><text x="2.4263%" y="718.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:853) (114 samples, 0.10%)</title><rect x="2.1763%" y="724" width="0.1047%" height="15" fill="rgb(230,62,27)" fg:x="2370" fg:w="114"/><text x="2.4263%" y="734.50"></text></g><g><title>interpolate_same_time_grid (src/dgcv/sigpro/sigpro.py:143) (213 samples, 0.20%)</title><rect x="2.1763%" y="692" width="0.1956%" height="15" fill="rgb(216,154,8)" fg:x="2370" fg:w="213"/><text x="2.4263%" y="702.50"></text></g><g><title>interpolate_same_time_grid (src/dgcv/sigpro/sigpro.py:144) (189 samples, 0.17%)</title><rect x="2.3719%" y="692" width="0.1736%" height="15" fill="rgb(244,35,45)" fg:x="2583" fg:w="189"/><text x="2.6219%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1181) (490 samples, 0.45%)</title><rect x="2.1083%" y="676" width="0.4499%" height="15" fill="rgb(251,115,12)" fg:x="2296" fg:w="490"/><text x="2.3583%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:95) (360 samples, 0.33%)</title><rect x="2.6042%" y="692" width="0.3306%" height="15" fill="rgb(240,54,50)" fg:x="2836" fg:w="360"/><text x="2.8542%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:96) (301 samples, 0.28%)</title><rect x="2.9347%" y="692" width="0.2764%" height="15" fill="rgb(233,84,52)" fg:x="3196" fg:w="301"/><text x="3.1847%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:97) (334 samples, 0.31%)</title><rect x="3.2111%" y="692" width="0.3067%" height="15" fill="rgb(207,117,47)" fg:x="3497" fg:w="334"/><text x="3.4611%" y="702.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (249 samples, 0.23%)</title><rect x="3.5417%" y="772" width="0.2286%" height="15" fill="rgb(249,43,39)" fg:x="3857" fg:w="249"/><text x="3.7917%" y="782.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (141 samples, 0.13%)</title><rect x="3.6409%" y="788" width="0.1295%" height="15" fill="rgb(209,38,44)" fg:x="3965" fg:w="141"/><text x="3.8909%" y="798.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (275 samples, 0.25%)</title><rect x="3.5188%" y="740" width="0.2525%" height="15" fill="rgb(236,212,23)" fg:x="3832" fg:w="275"/><text x="3.7688%" y="750.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (275 samples, 0.25%)</title><rect x="3.5188%" y="756" width="0.2525%" height="15" fill="rgb(242,79,21)" fg:x="3832" fg:w="275"/><text x="3.7688%" y="766.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1196) (1,322 samples, 1.21%)</title><rect x="2.5592%" y="676" width="1.2139%" height="15" fill="rgb(211,96,35)" fg:x="2787" fg:w="1322"/><text x="2.8092%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:99) (278 samples, 0.26%)</title><rect x="3.5178%" y="692" width="0.2553%" height="15" fill="rgb(253,215,40)" fg:x="3831" fg:w="278"/><text x="3.7678%" y="702.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (278 samples, 0.26%)</title><rect x="3.5178%" y="708" width="0.2553%" height="15" fill="rgb(211,81,21)" fg:x="3831" fg:w="278"/><text x="3.7678%" y="718.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (277 samples, 0.25%)</title><rect x="3.5188%" y="724" width="0.2544%" height="15" fill="rgb(208,190,38)" fg:x="3832" fg:w="277"/><text x="3.7688%" y="734.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:95) (325 samples, 0.30%)</title><rect x="3.9173%" y="692" width="0.2984%" height="15" fill="rgb(235,213,38)" fg:x="4266" fg:w="325"/><text x="4.1673%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:96) (298 samples, 0.27%)</title><rect x="4.2157%" y="692" width="0.2736%" height="15" fill="rgb(237,122,38)" fg:x="4591" fg:w="298"/><text x="4.4657%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:97) (349 samples, 0.32%)</title><rect x="4.4894%" y="692" width="0.3205%" height="15" fill="rgb(244,218,35)" fg:x="4889" fg:w="349"/><text x="4.7394%" y="702.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (237 samples, 0.22%)</title><rect x="4.8098%" y="740" width="0.2176%" height="15" fill="rgb(240,68,47)" fg:x="5238" fg:w="237"/><text x="5.0598%" y="750.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (237 samples, 0.22%)</title><rect x="4.8098%" y="756" width="0.2176%" height="15" fill="rgb(210,16,53)" fg:x="5238" fg:w="237"/><text x="5.0598%" y="766.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (216 samples, 0.20%)</title><rect x="4.8291%" y="772" width="0.1983%" height="15" fill="rgb(235,124,12)" fg:x="5259" fg:w="216"/><text x="5.0791%" y="782.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (139 samples, 0.13%)</title><rect x="4.8998%" y="788" width="0.1276%" height="15" fill="rgb(224,169,11)" fg:x="5336" fg:w="139"/><text x="5.1498%" y="798.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1212) (1,252 samples, 1.15%)</title><rect x="3.8943%" y="676" width="1.1497%" height="15" fill="rgb(250,166,2)" fg:x="4241" fg:w="1252"/><text x="4.1443%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:99) (255 samples, 0.23%)</title><rect x="4.8098%" y="692" width="0.2342%" height="15" fill="rgb(242,216,29)" fg:x="5238" fg:w="255"/><text x="5.0598%" y="702.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (255 samples, 0.23%)</title><rect x="4.8098%" y="708" width="0.2342%" height="15" fill="rgb(230,116,27)" fg:x="5238" fg:w="255"/><text x="5.0598%" y="718.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (255 samples, 0.23%)</title><rect x="4.8098%" y="724" width="0.2342%" height="15" fill="rgb(228,99,48)" fg:x="5238" fg:w="255"/><text x="5.0598%" y="734.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (8,052 samples, 7.39%)</title><rect x="5.2010%" y="868" width="7.3938%" height="15" fill="rgb(253,11,6)" fg:x="5664" fg:w="8052"/><text x="5.4510%" y="878.50">get_values..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (8,352 samples, 7.67%)</title><rect x="5.1918%" y="852" width="7.6693%" height="15" fill="rgb(247,143,39)" fg:x="5654" fg:w="8352"/><text x="5.4418%" y="862.50">get_values..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7839) (289 samples, 0.27%)</title><rect x="12.5957%" y="868" width="0.2654%" height="15" fill="rgb(236,97,10)" fg:x="13717" fg:w="289"/><text x="12.8457%" y="878.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (8,354 samples, 7.67%)</title><rect x="5.1918%" y="804" width="7.6711%" height="15" fill="rgb(233,208,19)" fg:x="5654" fg:w="8354"/><text x="5.4418%" y="814.50">_get_values..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (8,354 samples, 7.67%)</title><rect x="5.1918%" y="820" width="7.6711%" height="15" fill="rgb(216,164,2)" fg:x="5654" fg:w="8354"/><text x="5.4418%" y="830.50">get_values_..</text></g><g><title>apply (pandas/core/internals/managers.py:363) (8,354 samples, 7.67%)</title><rect x="5.1918%" y="836" width="7.6711%" height="15" fill="rgb(220,129,5)" fg:x="5654" fg:w="8354"/><text x="5.4418%" y="846.50">apply (pand..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (8,356 samples, 7.67%)</title><rect x="5.1918%" y="788" width="7.6730%" height="15" fill="rgb(242,17,10)" fg:x="5654" fg:w="8356"/><text x="5.4418%" y="798.50">_save_chunk..</text></g><g><title>validate (src/dgcv/validation/model.py:1226) (10,377 samples, 9.53%)</title><rect x="5.1275%" y="676" width="9.5288%" height="15" fill="rgb(242,107,0)" fg:x="5584" fg:w="10377"/><text x="5.3775%" y="686.50">validate (src/..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (10,377 samples, 9.53%)</title><rect x="5.1275%" y="692" width="9.5288%" height="15" fill="rgb(251,28,31)" fg:x="5584" fg:w="10377"/><text x="5.3775%" y="702.50">wrapper (panda..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (10,377 samples, 9.53%)</title><rect x="5.1275%" y="708" width="9.5288%" height="15" fill="rgb(233,223,10)" fg:x="5584" fg:w="10377"/><text x="5.3775%" y="718.50">to_csv (pandas..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (10,377 samples, 9.53%)</title><rect x="5.1275%" y="724" width="9.5288%" height="15" fill="rgb(215,21,27)" fg:x="5584" fg:w="10377"/><text x="5.3775%" y="734.50">to_csv (pandas..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (10,376 samples, 9.53%)</title><rect x="5.1285%" y="740" width="9.5278%" height="15" fill="rgb(232,23,21)" fg:x="5585" fg:w="10376"/><text x="5.3785%" y="750.50">save (pandas/i..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (10,376 samples, 9.53%)</title><rect x="5.1285%" y="756" width="9.5278%" height="15" fill="rgb(244,5,23)" fg:x="5585" fg:w="10376"/><text x="5.3785%" y="766.50">_save (pandas/..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (10,375 samples, 9.53%)</title><rect x="5.1294%" y="772" width="9.5269%" height="15" fill="rgb(226,81,46)" fg:x="5586" fg:w="10375"/><text x="5.3794%" y="782.50">_save_body (pa..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (1,945 samples, 1.79%)</title><rect x="12.8703%" y="788" width="1.7860%" height="15" fill="rgb(247,70,30)" fg:x="14016" fg:w="1945"/><text x="13.1203%" y="798.50">_..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (9,591 samples, 8.81%)</title><rect x="14.7288%" y="868" width="8.8070%" height="15" fill="rgb(212,68,19)" fg:x="16040" fg:w="9591"/><text x="14.9788%" y="878.50">get_values_f..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (9,886 samples, 9.08%)</title><rect x="14.7224%" y="852" width="9.0779%" height="15" fill="rgb(240,187,13)" fg:x="16033" fg:w="9886"/><text x="14.9724%" y="862.50">get_values_fo..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7839) (288 samples, 0.26%)</title><rect x="23.5358%" y="868" width="0.2645%" height="15" fill="rgb(223,113,26)" fg:x="25631" fg:w="288"/><text x="23.7858%" y="878.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (9,888 samples, 9.08%)</title><rect x="14.7224%" y="836" width="9.0797%" height="15" fill="rgb(206,192,2)" fg:x="16033" fg:w="9888"/><text x="14.9724%" y="846.50">apply (pandas..</text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (9,890 samples, 9.08%)</title><rect x="14.7224%" y="804" width="9.0816%" height="15" fill="rgb(241,108,4)" fg:x="16033" fg:w="9890"/><text x="14.9724%" y="814.50">_get_values_f..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (9,890 samples, 9.08%)</title><rect x="14.7224%" y="820" width="9.0816%" height="15" fill="rgb(247,173,49)" fg:x="16033" fg:w="9890"/><text x="14.9724%" y="830.50">get_values_fo..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (9,892 samples, 9.08%)</title><rect x="14.7224%" y="788" width="9.0834%" height="15" fill="rgb(224,114,35)" fg:x="16033" fg:w="9892"/><text x="14.9724%" y="798.50">_save_chunk (..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (2,118 samples, 1.94%)</title><rect x="23.8187%" y="788" width="1.9449%" height="15" fill="rgb(245,159,27)" fg:x="25939" fg:w="2118"/><text x="24.0687%" y="798.50">_..</text></g><g><title>validate (src/dgcv/validation/model.py:1227) (12,097 samples, 11.11%)</title><rect x="14.6563%" y="676" width="11.1082%" height="15" fill="rgb(245,172,44)" fg:x="15961" fg:w="12097"/><text x="14.9063%" y="686.50">validate (src/dg..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (12,097 samples, 11.11%)</title><rect x="14.6563%" y="692" width="11.1082%" height="15" fill="rgb(236,23,11)" fg:x="15961" fg:w="12097"/><text x="14.9063%" y="702.50">wrapper (pandas/..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (12,097 samples, 11.11%)</title><rect x="14.6563%" y="708" width="11.1082%" height="15" fill="rgb(205,117,38)" fg:x="15961" fg:w="12097"/><text x="14.9063%" y="718.50">to_csv (pandas/c..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (12,097 samples, 11.11%)</title><rect x="14.6563%" y="724" width="11.1082%" height="15" fill="rgb(237,72,25)" fg:x="15961" fg:w="12097"/><text x="14.9063%" y="734.50">to_csv (pandas/i..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (12,097 samples, 11.11%)</title><rect x="14.6563%" y="740" width="11.1082%" height="15" fill="rgb(244,70,9)" fg:x="15961" fg:w="12097"/><text x="14.9063%" y="750.50">save (pandas/io/..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (12,097 samples, 11.11%)</title><rect x="14.6563%" y="756" width="11.1082%" height="15" fill="rgb(217,125,39)" fg:x="15961" fg:w="12097"/><text x="14.9063%" y="766.50">_save (pandas/io..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (12,096 samples, 11.11%)</title><rect x="14.6572%" y="772" width="11.1072%" height="15" fill="rgb(235,36,10)" fg:x="15962" fg:w="12096"/><text x="14.9072%" y="782.50">_save_body (pand..</text></g><g><title>__calculate (src/dgcv/validation/model.py:866) (123 samples, 0.11%)</title><rect x="25.7791%" y="692" width="0.1129%" height="15" fill="rgb(251,123,47)" fg:x="28074" fg:w="123"/><text x="26.0291%" y="702.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:867) (125 samples, 0.11%)</title><rect x="25.8921%" y="692" width="0.1148%" height="15" fill="rgb(221,13,13)" fg:x="28197" fg:w="125"/><text x="26.1421%" y="702.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:884) (307 samples, 0.28%)</title><rect x="26.1354%" y="692" width="0.2819%" height="15" fill="rgb(238,131,9)" fg:x="28462" fg:w="307"/><text x="26.3854%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1234) (1,596 samples, 1.47%)</title><rect x="25.7644%" y="676" width="1.4655%" height="15" fill="rgb(211,50,8)" fg:x="28058" fg:w="1596"/><text x="26.0144%" y="686.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:902) (869 samples, 0.80%)</title><rect x="26.4320%" y="692" width="0.7980%" height="15" fill="rgb(245,182,24)" fg:x="28785" fg:w="869"/><text x="26.6820%" y="702.50"></text></g><g><title>validate (src/dgcv/model/operating_condition.py:190) (28,327 samples, 26.01%)</title><rect x="1.2194%" y="644" width="26.0115%" height="15" fill="rgb(242,14,37)" fg:x="1328" fg:w="28327"/><text x="1.4694%" y="654.50">validate (src/dgcv/model/operating_conditi..</text></g><g><title>__validate (src/dgcv/model/operating_condition.py:134) (28,327 samples, 26.01%)</title><rect x="1.2194%" y="660" width="26.0115%" height="15" fill="rgb(246,228,12)" fg:x="1328" fg:w="28327"/><text x="1.4694%" y="670.50">__validate (src/dgcv/model/operating_condi..</text></g><g><title>validate (src/dgcv/core/model_validation.py:219) (29,084 samples, 26.71%)</title><rect x="0.5252%" y="580" width="26.7066%" height="15" fill="rgb(213,55,15)" fg:x="572" fg:w="29084"/><text x="0.7752%" y="590.50">validate (src/dgcv/core/model_validation.py..</text></g><g><title>validate (src/dgcv/model/pcs.py:126) (29,084 samples, 26.71%)</title><rect x="0.5252%" y="596" width="26.7066%" height="15" fill="rgb(209,9,3)" fg:x="572" fg:w="29084"/><text x="0.7752%" y="606.50">validate (src/dgcv/model/pcs.py:126)</text></g><g><title>validate (src/dgcv/model/benchmark.py:539) (28,328 samples, 26.01%)</title><rect x="1.2194%" y="612" width="26.0124%" height="15" fill="rgb(230,59,30)" fg:x="1328" fg:w="28328"/><text x="1.4694%" y="622.50">validate (src/dgcv/model/benchmark.py:539)</text></g><g><title>__validate (src/dgcv/model/benchmark.py:477) (28,328 samples, 26.01%)</title><rect x="1.2194%" y="628" width="26.0124%" height="15" fill="rgb(209,121,21)" fg:x="1328" fg:w="28328"/><text x="1.4694%" y="638.50">__validate (src/dgcv/model/benchmark.py:47..</text></g><g><title>test_model_validation_iec2015_curves (test_tool.py:287) (29,126 samples, 26.75%)</title><rect x="0.5096%" y="548" width="26.7451%" height="15" fill="rgb(220,109,13)" fg:x="555" fg:w="29126"/><text x="0.7596%" y="558.50">test_model_validation_iec2015_curves (test_..</text></g><g><title>_execute_tool (test_tool.py:52) (29,111 samples, 26.73%)</title><rect x="0.5234%" y="564" width="26.7314%" height="15" fill="rgb(232,18,1)" fg:x="570" fg:w="29111"/><text x="0.7734%" y="574.50">_execute_tool (test_tool.py:52)</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (243 samples, 0.22%)</title><rect x="27.4155%" y="868" width="0.2231%" height="15" fill="rgb(215,41,42)" fg:x="29856" fg:w="243"/><text x="27.6655%" y="878.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (254 samples, 0.23%)</title><rect x="27.4155%" y="852" width="0.2332%" height="15" fill="rgb(224,123,36)" fg:x="29856" fg:w="254"/><text x="27.6655%" y="862.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (255 samples, 0.23%)</title><rect x="27.4155%" y="788" width="0.2342%" height="15" fill="rgb(240,125,3)" fg:x="29856" fg:w="255"/><text x="27.6655%" y="798.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (255 samples, 0.23%)</title><rect x="27.4155%" y="804" width="0.2342%" height="15" fill="rgb(205,98,50)" fg:x="29856" fg:w="255"/><text x="27.6655%" y="814.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (255 samples, 0.23%)</title><rect x="27.4155%" y="820" width="0.2342%" height="15" fill="rgb(205,185,37)" fg:x="29856" fg:w="255"/><text x="27.6655%" y="830.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (255 samples, 0.23%)</title><rect x="27.4155%" y="836" width="0.2342%" height="15" fill="rgb(238,207,15)" fg:x="29856" fg:w="255"/><text x="27.6655%" y="846.50"></text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:84) (480 samples, 0.44%)</title><rect x="27.2557%" y="644" width="0.4408%" height="15" fill="rgb(213,199,42)" fg:x="29682" fg:w="480"/><text x="27.5057%" y="654.50"></text></g><g><title>obtain_reference_curve (src/dgcv/curves/manager.py:174) (480 samples, 0.44%)</title><rect x="27.2557%" y="660" width="0.4408%" height="15" fill="rgb(235,201,11)" fg:x="29682" fg:w="480"/><text x="27.5057%" y="670.50"></text></g><g><title>__obtain_files_curve (src/dgcv/curves/manager.py:78) (310 samples, 0.28%)</title><rect x="27.4118%" y="676" width="0.2847%" height="15" fill="rgb(207,46,11)" fg:x="29852" fg:w="310"/><text x="27.6618%" y="686.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (310 samples, 0.28%)</title><rect x="27.4118%" y="692" width="0.2847%" height="15" fill="rgb(241,35,35)" fg:x="29852" fg:w="310"/><text x="27.6618%" y="702.50"></text></g><g><title>to_csv (pandas/core/generic.py:3967) (309 samples, 0.28%)</title><rect x="27.4127%" y="708" width="0.2837%" height="15" fill="rgb(243,32,47)" fg:x="29853" fg:w="309"/><text x="27.6627%" y="718.50"></text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (309 samples, 0.28%)</title><rect x="27.4127%" y="724" width="0.2837%" height="15" fill="rgb(247,202,23)" fg:x="29853" fg:w="309"/><text x="27.6627%" y="734.50"></text></g><g><title>save (pandas/io/formats/csvs.py:270) (308 samples, 0.28%)</title><rect x="27.4136%" y="740" width="0.2828%" height="15" fill="rgb(219,102,11)" fg:x="29854" fg:w="308"/><text x="27.6636%" y="750.50"></text></g><g><title>_save (pandas/io/formats/csvs.py:275) (308 samples, 0.28%)</title><rect x="27.4136%" y="756" width="0.2828%" height="15" fill="rgb(243,110,44)" fg:x="29854" fg:w="308"/><text x="27.6636%" y="766.50"></text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (308 samples, 0.28%)</title><rect x="27.4136%" y="772" width="0.2828%" height="15" fill="rgb(222,74,54)" fg:x="29854" fg:w="308"/><text x="27.6636%" y="782.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (261 samples, 0.24%)</title><rect x="27.8516%" y="868" width="0.2397%" height="15" fill="rgb(216,99,12)" fg:x="30331" fg:w="261"/><text x="28.1016%" y="878.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (281 samples, 0.26%)</title><rect x="27.8507%" y="804" width="0.2580%" height="15" fill="rgb(226,22,26)" fg:x="30330" fg:w="281"/><text x="28.1007%" y="814.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (281 samples, 0.26%)</title><rect x="27.8507%" y="820" width="0.2580%" height="15" fill="rgb(217,163,10)" fg:x="30330" fg:w="281"/><text x="28.1007%" y="830.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (281 samples, 0.26%)</title><rect x="27.8507%" y="836" width="0.2580%" height="15" fill="rgb(213,25,53)" fg:x="30330" fg:w="281"/><text x="28.1007%" y="846.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (281 samples, 0.26%)</title><rect x="27.8507%" y="852" width="0.2580%" height="15" fill="rgb(252,105,26)" fg:x="30330" fg:w="281"/><text x="28.1007%" y="862.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (282 samples, 0.26%)</title><rect x="27.8507%" y="788" width="0.2589%" height="15" fill="rgb(220,39,43)" fg:x="30330" fg:w="282"/><text x="28.1007%" y="798.50"></text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (332 samples, 0.30%)</title><rect x="27.8452%" y="724" width="0.3049%" height="15" fill="rgb(229,68,48)" fg:x="30324" fg:w="332"/><text x="28.0952%" y="734.50"></text></g><g><title>save (pandas/io/formats/csvs.py:270) (331 samples, 0.30%)</title><rect x="27.8461%" y="740" width="0.3039%" height="15" fill="rgb(252,8,32)" fg:x="30325" fg:w="331"/><text x="28.0961%" y="750.50"></text></g><g><title>_save (pandas/io/formats/csvs.py:275) (330 samples, 0.30%)</title><rect x="27.8471%" y="756" width="0.3030%" height="15" fill="rgb(223,20,43)" fg:x="30326" fg:w="330"/><text x="28.0971%" y="766.50"></text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (330 samples, 0.30%)</title><rect x="27.8471%" y="772" width="0.3030%" height="15" fill="rgb(229,81,49)" fg:x="30326" fg:w="330"/><text x="28.0971%" y="782.50"></text></g><g><title>__obtain_files_curve (src/dgcv/curves/manager.py:80) (334 samples, 0.31%)</title><rect x="27.8443%" y="676" width="0.3067%" height="15" fill="rgb(236,28,36)" fg:x="30323" fg:w="334"/><text x="28.0943%" y="686.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (333 samples, 0.31%)</title><rect x="27.8452%" y="692" width="0.3058%" height="15" fill="rgb(249,185,26)" fg:x="30324" fg:w="333"/><text x="28.0952%" y="702.50"></text></g><g><title>to_csv (pandas/core/generic.py:3967) (333 samples, 0.31%)</title><rect x="27.8452%" y="708" width="0.3058%" height="15" fill="rgb(249,174,33)" fg:x="30324" fg:w="333"/><text x="28.0952%" y="718.50"></text></g><g><title>has_required_curves (src/dgcv/model/operating_condition.py:248) (977 samples, 0.90%)</title><rect x="27.2557%" y="628" width="0.8971%" height="15" fill="rgb(233,201,37)" fg:x="29682" fg:w="977"/><text x="27.5057%" y="638.50"></text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:94) (495 samples, 0.45%)</title><rect x="27.6983%" y="644" width="0.4545%" height="15" fill="rgb(221,78,26)" fg:x="30164" fg:w="495"/><text x="27.9483%" y="654.50"></text></g><g><title>obtain_simulated_curve (src/dgcv/curves/manager.py:222) (495 samples, 0.45%)</title><rect x="27.6983%" y="660" width="0.4545%" height="15" fill="rgb(250,127,30)" fg:x="30164" fg:w="495"/><text x="27.9483%" y="670.50"></text></g><g><title>validate (src/dgcv/model/benchmark.py:537) (1,040 samples, 0.95%)</title><rect x="27.2548%" y="612" width="0.9550%" height="15" fill="rgb(230,49,44)" fg:x="29681" fg:w="1040"/><text x="27.5048%" y="622.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:105) (654 samples, 0.60%)</title><rect x="28.3209%" y="692" width="0.6005%" height="15" fill="rgb(229,67,23)" fg:x="30842" fg:w="654"/><text x="28.5709%" y="702.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:110) (109 samples, 0.10%)</title><rect x="28.9214%" y="692" width="0.1001%" height="15" fill="rgb(249,83,47)" fg:x="31496" fg:w="109"/><text x="29.1714%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1174) (784 samples, 0.72%)</title><rect x="28.3144%" y="676" width="0.7199%" height="15" fill="rgb(215,43,3)" fg:x="30835" fg:w="784"/><text x="28.5644%" y="686.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:105) (684 samples, 0.63%)</title><rect x="29.1041%" y="692" width="0.6281%" height="15" fill="rgb(238,154,13)" fg:x="31695" fg:w="684"/><text x="29.3541%" y="702.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:110) (123 samples, 0.11%)</title><rect x="29.7322%" y="692" width="0.1129%" height="15" fill="rgb(219,56,2)" fg:x="32379" fg:w="123"/><text x="29.9822%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1178) (820 samples, 0.75%)</title><rect x="29.1005%" y="676" width="0.7530%" height="15" fill="rgb(233,0,4)" fg:x="31691" fg:w="820"/><text x="29.3505%" y="686.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:782) (146 samples, 0.13%)</title><rect x="29.9719%" y="708" width="0.1341%" height="15" fill="rgb(235,30,7)" fg:x="32640" fg:w="146"/><text x="30.2219%" y="718.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:853) (146 samples, 0.13%)</title><rect x="29.9719%" y="724" width="0.1341%" height="15" fill="rgb(250,79,13)" fg:x="32640" fg:w="146"/><text x="30.2219%" y="734.50"></text></g><g><title>interpolate_same_time_grid (src/dgcv/sigpro/sigpro.py:143) (288 samples, 0.26%)</title><rect x="29.9719%" y="692" width="0.2645%" height="15" fill="rgb(211,146,34)" fg:x="32640" fg:w="288"/><text x="30.2219%" y="702.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:782) (189 samples, 0.17%)</title><rect x="30.2373%" y="708" width="0.1736%" height="15" fill="rgb(228,22,38)" fg:x="32929" fg:w="189"/><text x="30.4873%" y="718.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:853) (189 samples, 0.17%)</title><rect x="30.2373%" y="724" width="0.1736%" height="15" fill="rgb(235,168,5)" fg:x="32929" fg:w="189"/><text x="30.4873%" y="734.50"></text></g><g><title>interpolate_same_time_grid (src/dgcv/sigpro/sigpro.py:144) (333 samples, 0.31%)</title><rect x="30.2364%" y="692" width="0.3058%" height="15" fill="rgb(221,155,16)" fg:x="32928" fg:w="333"/><text x="30.4864%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1181) (777 samples, 0.71%)</title><rect x="29.8534%" y="676" width="0.7135%" height="15" fill="rgb(215,215,53)" fg:x="32511" fg:w="777"/><text x="30.1034%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:95) (518 samples, 0.48%)</title><rect x="30.6202%" y="692" width="0.4757%" height="15" fill="rgb(223,4,10)" fg:x="33346" fg:w="518"/><text x="30.8702%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:96) (542 samples, 0.50%)</title><rect x="31.0958%" y="692" width="0.4977%" height="15" fill="rgb(234,103,6)" fg:x="33864" fg:w="542"/><text x="31.3458%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:97) (528 samples, 0.48%)</title><rect x="31.5935%" y="692" width="0.4848%" height="15" fill="rgb(227,97,0)" fg:x="34406" fg:w="528"/><text x="31.8435%" y="702.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:130) (121 samples, 0.11%)</title><rect x="32.1032%" y="788" width="0.1111%" height="15" fill="rgb(234,150,53)" fg:x="34961" fg:w="121"/><text x="32.3532%" y="798.50"></text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1600) (116 samples, 0.11%)</title><rect x="32.1078%" y="804" width="0.1065%" height="15" fill="rgb(228,201,54)" fg:x="34966" fg:w="116"/><text x="32.3578%" y="814.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (365 samples, 0.34%)</title><rect x="32.1032%" y="772" width="0.3352%" height="15" fill="rgb(222,22,37)" fg:x="34961" fg:w="365"/><text x="32.3532%" y="782.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (244 samples, 0.22%)</title><rect x="32.2143%" y="788" width="0.2241%" height="15" fill="rgb(237,53,32)" fg:x="35082" fg:w="244"/><text x="32.4643%" y="798.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (392 samples, 0.36%)</title><rect x="32.0811%" y="756" width="0.3600%" height="15" fill="rgb(233,25,53)" fg:x="34937" fg:w="392"/><text x="32.3311%" y="766.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (394 samples, 0.36%)</title><rect x="32.0802%" y="740" width="0.3618%" height="15" fill="rgb(210,40,34)" fg:x="34936" fg:w="394"/><text x="32.3302%" y="750.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1196) (2,048 samples, 1.88%)</title><rect x="30.5697%" y="676" width="1.8806%" height="15" fill="rgb(241,220,44)" fg:x="33291" fg:w="2048"/><text x="30.8197%" y="686.50">v..</text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:99) (405 samples, 0.37%)</title><rect x="32.0784%" y="692" width="0.3719%" height="15" fill="rgb(235,28,35)" fg:x="34934" fg:w="405"/><text x="32.3284%" y="702.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (405 samples, 0.37%)</title><rect x="32.0784%" y="708" width="0.3719%" height="15" fill="rgb(210,56,17)" fg:x="34934" fg:w="405"/><text x="32.3284%" y="718.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (404 samples, 0.37%)</title><rect x="32.0793%" y="724" width="0.3710%" height="15" fill="rgb(224,130,29)" fg:x="34935" fg:w="404"/><text x="32.3293%" y="734.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1198) (154 samples, 0.14%)</title><rect x="32.4503%" y="676" width="0.1414%" height="15" fill="rgb(235,212,8)" fg:x="35339" fg:w="154"/><text x="32.7003%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:95) (638 samples, 0.59%)</title><rect x="32.7019%" y="692" width="0.5858%" height="15" fill="rgb(223,33,50)" fg:x="35613" fg:w="638"/><text x="32.9519%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:96) (656 samples, 0.60%)</title><rect x="33.2877%" y="692" width="0.6024%" height="15" fill="rgb(219,149,13)" fg:x="36251" fg:w="656"/><text x="33.5377%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:97) (626 samples, 0.57%)</title><rect x="33.8901%" y="692" width="0.5748%" height="15" fill="rgb(250,156,29)" fg:x="36907" fg:w="626"/><text x="34.1401%" y="702.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:130) (184 samples, 0.17%)</title><rect x="34.5136%" y="788" width="0.1690%" height="15" fill="rgb(216,193,19)" fg:x="37586" fg:w="184"/><text x="34.7636%" y="798.50"></text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1600) (166 samples, 0.15%)</title><rect x="34.5301%" y="804" width="0.1524%" height="15" fill="rgb(216,135,14)" fg:x="37604" fg:w="166"/><text x="34.7801%" y="814.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (571 samples, 0.52%)</title><rect x="34.4677%" y="756" width="0.5243%" height="15" fill="rgb(241,47,5)" fg:x="37536" fg:w="571"/><text x="34.7177%" y="766.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (522 samples, 0.48%)</title><rect x="34.5127%" y="772" width="0.4793%" height="15" fill="rgb(233,42,35)" fg:x="37585" fg:w="522"/><text x="34.7627%" y="782.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (337 samples, 0.31%)</title><rect x="34.6826%" y="788" width="0.3095%" height="15" fill="rgb(231,13,6)" fg:x="37770" fg:w="337"/><text x="34.9326%" y="798.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (573 samples, 0.53%)</title><rect x="34.4668%" y="740" width="0.5262%" height="15" fill="rgb(207,181,40)" fg:x="37535" fg:w="573"/><text x="34.7168%" y="750.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1212) (2,595 samples, 2.38%)</title><rect x="32.6486%" y="676" width="2.3829%" height="15" fill="rgb(254,173,49)" fg:x="35555" fg:w="2595"/><text x="32.8986%" y="686.50">va..</text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:99) (617 samples, 0.57%)</title><rect x="34.4649%" y="692" width="0.5666%" height="15" fill="rgb(221,1,38)" fg:x="37533" fg:w="617"/><text x="34.7149%" y="702.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (617 samples, 0.57%)</title><rect x="34.4649%" y="708" width="0.5666%" height="15" fill="rgb(206,124,46)" fg:x="37533" fg:w="617"/><text x="34.7149%" y="718.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (615 samples, 0.56%)</title><rect x="34.4668%" y="724" width="0.5647%" height="15" fill="rgb(249,21,11)" fg:x="37535" fg:w="615"/><text x="34.7168%" y="734.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1214) (138 samples, 0.13%)</title><rect x="35.0315%" y="676" width="0.1267%" height="15" fill="rgb(222,201,40)" fg:x="38150" fg:w="138"/><text x="35.2815%" y="686.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (12,792 samples, 11.75%)</title><rect x="35.3143%" y="868" width="11.7463%" height="15" fill="rgb(235,61,29)" fg:x="38458" fg:w="12792"/><text x="35.5643%" y="878.50">get_values_for_cs..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (13,242 samples, 12.16%)</title><rect x="35.3079%" y="852" width="12.1596%" height="15" fill="rgb(219,207,3)" fg:x="38451" fg:w="13242"/><text x="35.5579%" y="862.50">get_values_for_csv..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7839) (442 samples, 0.41%)</title><rect x="47.0616%" y="868" width="0.4059%" height="15" fill="rgb(222,56,46)" fg:x="51251" fg:w="442"/><text x="47.3116%" y="878.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (13,247 samples, 12.16%)</title><rect x="35.3079%" y="804" width="12.1641%" height="15" fill="rgb(239,76,54)" fg:x="38451" fg:w="13247"/><text x="35.5579%" y="814.50">_get_values_for_cs..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (13,247 samples, 12.16%)</title><rect x="35.3079%" y="820" width="12.1641%" height="15" fill="rgb(231,124,27)" fg:x="38451" fg:w="13247"/><text x="35.5579%" y="830.50">get_values_for_csv..</text></g><g><title>apply (pandas/core/internals/managers.py:363) (13,247 samples, 12.16%)</title><rect x="35.3079%" y="836" width="12.1641%" height="15" fill="rgb(249,195,6)" fg:x="38451" fg:w="13247"/><text x="35.5579%" y="846.50">apply (pandas/core..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (13,252 samples, 12.17%)</title><rect x="35.3061%" y="788" width="12.1687%" height="15" fill="rgb(237,174,47)" fg:x="38449" fg:w="13252"/><text x="35.5561%" y="798.50">_save_chunk (panda..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (16,420 samples, 15.08%)</title><rect x="35.2078%" y="724" width="15.0778%" height="15" fill="rgb(206,201,31)" fg:x="38342" fg:w="16420"/><text x="35.4578%" y="734.50">to_csv (pandas/io/forma..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (16,417 samples, 15.08%)</title><rect x="35.2106%" y="740" width="15.0750%" height="15" fill="rgb(231,57,52)" fg:x="38345" fg:w="16417"/><text x="35.4606%" y="750.50">save (pandas/io/formats..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (16,417 samples, 15.08%)</title><rect x="35.2106%" y="756" width="15.0750%" height="15" fill="rgb(248,177,22)" fg:x="38345" fg:w="16417"/><text x="35.4606%" y="766.50">_save (pandas/io/format..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (16,415 samples, 15.07%)</title><rect x="35.2124%" y="772" width="15.0732%" height="15" fill="rgb(215,211,37)" fg:x="38347" fg:w="16415"/><text x="35.4624%" y="782.50">_save_body (pandas/io/f..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (3,039 samples, 2.79%)</title><rect x="47.4950%" y="788" width="2.7906%" height="15" fill="rgb(241,128,51)" fg:x="51723" fg:w="3039"/><text x="47.7450%" y="798.50">_s..</text></g><g><title>validate (src/dgcv/validation/model.py:1226) (16,421 samples, 15.08%)</title><rect x="35.2078%" y="676" width="15.0787%" height="15" fill="rgb(227,165,31)" fg:x="38342" fg:w="16421"/><text x="35.4578%" y="686.50">validate (src/dgcv/vali..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (16,421 samples, 15.08%)</title><rect x="35.2078%" y="692" width="15.0787%" height="15" fill="rgb(228,167,24)" fg:x="38342" fg:w="16421"/><text x="35.4578%" y="702.50">wrapper (pandas/util/_d..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (16,421 samples, 15.08%)</title><rect x="35.2078%" y="708" width="15.0787%" height="15" fill="rgb(228,143,12)" fg:x="38342" fg:w="16421"/><text x="35.4578%" y="718.50">to_csv (pandas/core/gen..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (15,890 samples, 14.59%)</title><rect x="50.4187%" y="868" width="14.5911%" height="15" fill="rgb(249,149,8)" fg:x="54907" fg:w="15890"/><text x="50.6687%" y="878.50">get_values_for_csv (pa..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (16,359 samples, 15.02%)</title><rect x="50.4031%" y="852" width="15.0218%" height="15" fill="rgb(243,35,44)" fg:x="54890" fg:w="16359"/><text x="50.6531%" y="862.50">get_values_for_csv (pan..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7839) (451 samples, 0.41%)</title><rect x="65.0107%" y="868" width="0.4141%" height="15" fill="rgb(246,89,9)" fg:x="70798" fg:w="451"/><text x="65.2607%" y="878.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (16,362 samples, 15.02%)</title><rect x="50.4022%" y="788" width="15.0245%" height="15" fill="rgb(233,213,13)" fg:x="54889" fg:w="16362"/><text x="50.6522%" y="798.50">_save_chunk (pandas/io/..</text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (16,361 samples, 15.02%)</title><rect x="50.4031%" y="804" width="15.0236%" height="15" fill="rgb(233,141,41)" fg:x="54890" fg:w="16361"/><text x="50.6531%" y="814.50">_get_values_for_csv (pa..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (16,361 samples, 15.02%)</title><rect x="50.4031%" y="820" width="15.0236%" height="15" fill="rgb(239,167,4)" fg:x="54890" fg:w="16361"/><text x="50.6531%" y="830.50">get_values_for_csv (pan..</text></g><g><title>apply (pandas/core/internals/managers.py:363) (16,361 samples, 15.02%)</title><rect x="50.4031%" y="836" width="15.0236%" height="15" fill="rgb(209,217,16)" fg:x="54890" fg:w="16361"/><text x="50.6531%" y="846.50">apply (pandas/core/inte..</text></g><g><title>validate (src/dgcv/validation/model.py:1227) (20,214 samples, 18.56%)</title><rect x="50.2865%" y="676" width="18.5616%" height="15" fill="rgb(219,88,35)" fg:x="54763" fg:w="20214"/><text x="50.5365%" y="686.50">validate (src/dgcv/validation..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (20,213 samples, 18.56%)</title><rect x="50.2874%" y="692" width="18.5607%" height="15" fill="rgb(220,193,23)" fg:x="54764" fg:w="20213"/><text x="50.5374%" y="702.50">wrapper (pandas/util/_decorat..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (20,213 samples, 18.56%)</title><rect x="50.2874%" y="708" width="18.5607%" height="15" fill="rgb(230,90,52)" fg:x="54764" fg:w="20213"/><text x="50.5374%" y="718.50">to_csv (pandas/core/generic.p..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (20,213 samples, 18.56%)</title><rect x="50.2874%" y="724" width="18.5607%" height="15" fill="rgb(252,106,19)" fg:x="54764" fg:w="20213"/><text x="50.5374%" y="734.50">to_csv (pandas/io/formats/for..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (20,210 samples, 18.56%)</title><rect x="50.2902%" y="740" width="18.5580%" height="15" fill="rgb(206,74,20)" fg:x="54767" fg:w="20210"/><text x="50.5402%" y="750.50">save (pandas/io/formats/csvs...</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (20,210 samples, 18.56%)</title><rect x="50.2902%" y="756" width="18.5580%" height="15" fill="rgb(230,138,44)" fg:x="54767" fg:w="20210"/><text x="50.5402%" y="766.50">_save (pandas/io/formats/csvs..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (20,210 samples, 18.56%)</title><rect x="50.2902%" y="772" width="18.5580%" height="15" fill="rgb(235,182,43)" fg:x="54767" fg:w="20210"/><text x="50.5402%" y="782.50">_save_body (pandas/io/formats..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (3,707 samples, 3.40%)</title><rect x="65.4442%" y="788" width="3.4040%" height="15" fill="rgb(242,16,51)" fg:x="71270" fg:w="3707"/><text x="65.6942%" y="798.50">_sa..</text></g><g><title>_calculate_errors (src/dgcv/validation/model.py:491) (189 samples, 0.17%)</title><rect x="68.9124%" y="708" width="0.1736%" height="15" fill="rgb(248,9,4)" fg:x="75047" fg:w="189"/><text x="69.1624%" y="718.50"></text></g><g><title>maximum_error (src/dgcv/validation/common.py:560) (189 samples, 0.17%)</title><rect x="68.9124%" y="724" width="0.1736%" height="15" fill="rgb(210,31,22)" fg:x="75047" fg:w="189"/><text x="69.1624%" y="734.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:866) (223 samples, 0.20%)</title><rect x="68.8821%" y="692" width="0.2048%" height="15" fill="rgb(239,54,39)" fg:x="75014" fg:w="223"/><text x="69.1321%" y="702.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:867) (179 samples, 0.16%)</title><rect x="69.0869%" y="692" width="0.1644%" height="15" fill="rgb(230,99,41)" fg:x="75237" fg:w="179"/><text x="69.3369%" y="702.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:884) (635 samples, 0.58%)</title><rect x="69.4322%" y="692" width="0.5831%" height="15" fill="rgb(253,106,12)" fg:x="75613" fg:w="635"/><text x="69.6822%" y="702.50"></text></g><g><title>validate (src/dgcv/core/model_validation.py:219) (47,719 samples, 43.82%)</title><rect x="27.2548%" y="580" width="43.8183%" height="15" fill="rgb(213,46,41)" fg:x="29681" fg:w="47719"/><text x="27.5048%" y="590.50">validate (src/dgcv/core/model_validation.py:219)</text></g><g><title>validate (src/dgcv/model/pcs.py:126) (47,719 samples, 43.82%)</title><rect x="27.2548%" y="596" width="43.8183%" height="15" fill="rgb(215,133,35)" fg:x="29681" fg:w="47719"/><text x="27.5048%" y="606.50">validate (src/dgcv/model/pcs.py:126)</text></g><g><title>validate (src/dgcv/model/benchmark.py:539) (46,679 samples, 42.86%)</title><rect x="28.2098%" y="612" width="42.8633%" height="15" fill="rgb(213,28,5)" fg:x="30721" fg:w="46679"/><text x="28.4598%" y="622.50">validate (src/dgcv/model/benchmark.py:539)</text></g><g><title>__validate (src/dgcv/model/benchmark.py:477) (46,679 samples, 42.86%)</title><rect x="28.2098%" y="628" width="42.8633%" height="15" fill="rgb(215,77,49)" fg:x="30721" fg:w="46679"/><text x="28.4598%" y="638.50">__validate (src/dgcv/model/benchmark.py:477)</text></g><g><title>validate (src/dgcv/model/operating_condition.py:190) (46,679 samples, 42.86%)</title><rect x="28.2098%" y="644" width="42.8633%" height="15" fill="rgb(248,100,22)" fg:x="30721" fg:w="46679"/><text x="28.4598%" y="654.50">validate (src/dgcv/model/operating_condition.py:190)</text></g><g><title>__validate (src/dgcv/model/operating_condition.py:134) (46,679 samples, 42.86%)</title><rect x="28.2098%" y="660" width="42.8633%" height="15" fill="rgb(208,67,9)" fg:x="30721" fg:w="46679"/><text x="28.4598%" y="670.50">__validate (src/dgcv/model/operating_condition.py:134)</text></g><g><title>validate (src/dgcv/validation/model.py:1234) (2,423 samples, 2.22%)</title><rect x="68.8481%" y="676" width="2.2249%" height="15" fill="rgb(219,133,21)" fg:x="74977" fg:w="2423"/><text x="69.0981%" y="686.50">v..</text></g><g><title>__calculate (src/dgcv/validation/model.py:902) (1,147 samples, 1.05%)</title><rect x="70.0198%" y="692" width="1.0532%" height="15" fill="rgb(246,46,29)" fg:x="76253" fg:w="1147"/><text x="70.2698%" y="702.50"></text></g><g><title>test_model_validation_iec2020_curves (test_tool.py:321) (47,751 samples, 43.85%)</title><rect x="27.2548%" y="548" width="43.8477%" height="15" fill="rgb(246,185,52)" fg:x="29681" fg:w="47751"/><text x="27.5048%" y="558.50">test_model_validation_iec2020_curves (test_tool.py:321)</text></g><g><title>_execute_tool (test_tool.py:52) (47,751 samples, 43.85%)</title><rect x="27.2548%" y="564" width="43.8477%" height="15" fill="rgb(252,136,11)" fg:x="29681" fg:w="47751"/><text x="27.5048%" y="574.50">_execute_tool (test_tool.py:52)</text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:84) (128 samples, 0.12%)</title><rect x="71.1153%" y="644" width="0.1175%" height="15" fill="rgb(219,138,53)" fg:x="77446" fg:w="128"/><text x="71.3653%" y="654.50"></text></g><g><title>obtain_reference_curve (src/dgcv/curves/manager.py:174) (128 samples, 0.12%)</title><rect x="71.1153%" y="660" width="0.1175%" height="15" fill="rgb(211,51,23)" fg:x="77446" fg:w="128"/><text x="71.3653%" y="670.50"></text></g><g><title>__obtain_files_curve (src/dgcv/curves/manager.py:80) (124 samples, 0.11%)</title><rect x="71.3394%" y="676" width="0.1139%" height="15" fill="rgb(247,221,28)" fg:x="77690" fg:w="124"/><text x="71.5894%" y="686.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (124 samples, 0.11%)</title><rect x="71.3394%" y="692" width="0.1139%" height="15" fill="rgb(251,222,45)" fg:x="77690" fg:w="124"/><text x="71.5894%" y="702.50"></text></g><g><title>to_csv (pandas/core/generic.py:3967) (124 samples, 0.11%)</title><rect x="71.3394%" y="708" width="0.1139%" height="15" fill="rgb(217,162,53)" fg:x="77690" fg:w="124"/><text x="71.5894%" y="718.50"></text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (124 samples, 0.11%)</title><rect x="71.3394%" y="724" width="0.1139%" height="15" fill="rgb(229,93,14)" fg:x="77690" fg:w="124"/><text x="71.5894%" y="734.50"></text></g><g><title>save (pandas/io/formats/csvs.py:270) (122 samples, 0.11%)</title><rect x="71.3412%" y="740" width="0.1120%" height="15" fill="rgb(209,67,49)" fg:x="77692" fg:w="122"/><text x="71.5912%" y="750.50"></text></g><g><title>_save (pandas/io/formats/csvs.py:275) (121 samples, 0.11%)</title><rect x="71.3421%" y="756" width="0.1111%" height="15" fill="rgb(213,87,29)" fg:x="77693" fg:w="121"/><text x="71.5921%" y="766.50"></text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (121 samples, 0.11%)</title><rect x="71.3421%" y="772" width="0.1111%" height="15" fill="rgb(205,151,52)" fg:x="77693" fg:w="121"/><text x="71.5921%" y="782.50"></text></g><g><title>has_required_curves (src/dgcv/model/operating_condition.py:248) (371 samples, 0.34%)</title><rect x="71.1144%" y="628" width="0.3407%" height="15" fill="rgb(253,215,39)" fg:x="77445" fg:w="371"/><text x="71.3644%" y="638.50"></text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:94) (242 samples, 0.22%)</title><rect x="71.2329%" y="644" width="0.2222%" height="15" fill="rgb(221,220,41)" fg:x="77574" fg:w="242"/><text x="71.4829%" y="654.50"></text></g><g><title>obtain_simulated_curve (src/dgcv/curves/manager.py:222) (242 samples, 0.22%)</title><rect x="71.2329%" y="660" width="0.2222%" height="15" fill="rgb(218,133,21)" fg:x="77574" fg:w="242"/><text x="71.4829%" y="670.50"></text></g><g><title>validate (src/dgcv/model/benchmark.py:537) (403 samples, 0.37%)</title><rect x="71.1135%" y="612" width="0.3701%" height="15" fill="rgb(221,193,43)" fg:x="77444" fg:w="403"/><text x="71.3635%" y="622.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:105) (380 samples, 0.35%)</title><rect x="71.5598%" y="692" width="0.3489%" height="15" fill="rgb(240,128,52)" fg:x="77930" fg:w="380"/><text x="71.8098%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1174) (452 samples, 0.42%)</title><rect x="71.5579%" y="676" width="0.4151%" height="15" fill="rgb(253,114,12)" fg:x="77928" fg:w="452"/><text x="71.8079%" y="686.50"></text></g><g><title>lowpass_signal (src/dgcv/sigpro/sigpro.py:105) (407 samples, 0.37%)</title><rect x="72.0024%" y="692" width="0.3737%" height="15" fill="rgb(215,223,47)" fg:x="78412" fg:w="407"/><text x="72.2524%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1178) (485 samples, 0.45%)</title><rect x="71.9978%" y="676" width="0.4454%" height="15" fill="rgb(248,225,23)" fg:x="78407" fg:w="485"/><text x="72.2478%" y="686.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:853) (112 samples, 0.10%)</title><rect x="72.4890%" y="724" width="0.1028%" height="15" fill="rgb(250,108,0)" fg:x="78942" fg:w="112"/><text x="72.7390%" y="734.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:782) (113 samples, 0.10%)</title><rect x="72.4890%" y="708" width="0.1038%" height="15" fill="rgb(228,208,7)" fg:x="78942" fg:w="113"/><text x="72.7390%" y="718.50"></text></g><g><title>interpolate_same_time_grid (src/dgcv/sigpro/sigpro.py:143) (197 samples, 0.18%)</title><rect x="72.4881%" y="692" width="0.1809%" height="15" fill="rgb(244,45,10)" fg:x="78941" fg:w="197"/><text x="72.7381%" y="702.50"></text></g><g><title>interpolate_same_time_grid (src/dgcv/sigpro/sigpro.py:144) (190 samples, 0.17%)</title><rect x="72.6690%" y="692" width="0.1745%" height="15" fill="rgb(207,125,25)" fg:x="79138" fg:w="190"/><text x="72.9190%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1181) (463 samples, 0.43%)</title><rect x="72.4431%" y="676" width="0.4252%" height="15" fill="rgb(210,195,18)" fg:x="78892" fg:w="463"/><text x="72.6931%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:95) (335 samples, 0.31%)</title><rect x="72.8949%" y="692" width="0.3076%" height="15" fill="rgb(249,80,12)" fg:x="79384" fg:w="335"/><text x="73.1449%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:96) (364 samples, 0.33%)</title><rect x="73.2025%" y="692" width="0.3342%" height="15" fill="rgb(221,65,9)" fg:x="79719" fg:w="364"/><text x="73.4525%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:97) (334 samples, 0.31%)</title><rect x="73.5368%" y="692" width="0.3067%" height="15" fill="rgb(235,49,36)" fg:x="80083" fg:w="334"/><text x="73.7868%" y="702.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (270 samples, 0.25%)</title><rect x="73.8435%" y="756" width="0.2479%" height="15" fill="rgb(225,32,20)" fg:x="80417" fg:w="270"/><text x="74.0935%" y="766.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (245 samples, 0.22%)</title><rect x="73.8664%" y="772" width="0.2250%" height="15" fill="rgb(215,141,46)" fg:x="80442" fg:w="245"/><text x="74.1164%" y="782.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (154 samples, 0.14%)</title><rect x="73.9500%" y="788" width="0.1414%" height="15" fill="rgb(250,160,47)" fg:x="80533" fg:w="154"/><text x="74.2000%" y="798.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (271 samples, 0.25%)</title><rect x="73.8435%" y="740" width="0.2488%" height="15" fill="rgb(216,222,40)" fg:x="80417" fg:w="271"/><text x="74.0935%" y="750.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (278 samples, 0.26%)</title><rect x="73.8435%" y="708" width="0.2553%" height="15" fill="rgb(234,217,39)" fg:x="80417" fg:w="278"/><text x="74.0935%" y="718.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (278 samples, 0.26%)</title><rect x="73.8435%" y="724" width="0.2553%" height="15" fill="rgb(207,178,40)" fg:x="80417" fg:w="278"/><text x="74.0935%" y="734.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1196) (1,341 samples, 1.23%)</title><rect x="72.8683%" y="676" width="1.2314%" height="15" fill="rgb(221,136,13)" fg:x="79355" fg:w="1341"/><text x="73.1183%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:99) (279 samples, 0.26%)</title><rect x="73.8435%" y="692" width="0.2562%" height="15" fill="rgb(249,199,10)" fg:x="80417" fg:w="279"/><text x="74.0935%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:95) (332 samples, 0.30%)</title><rect x="74.2273%" y="692" width="0.3049%" height="15" fill="rgb(249,222,13)" fg:x="80835" fg:w="332"/><text x="74.4773%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:96) (347 samples, 0.32%)</title><rect x="74.5321%" y="692" width="0.3186%" height="15" fill="rgb(244,185,38)" fg:x="81167" fg:w="347"/><text x="74.7821%" y="702.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:97) (326 samples, 0.30%)</title><rect x="74.8508%" y="692" width="0.2994%" height="15" fill="rgb(236,202,9)" fg:x="81514" fg:w="326"/><text x="75.1008%" y="702.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (216 samples, 0.20%)</title><rect x="75.1703%" y="772" width="0.1983%" height="15" fill="rgb(250,229,37)" fg:x="81862" fg:w="216"/><text x="75.4203%" y="782.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (134 samples, 0.12%)</title><rect x="75.2456%" y="788" width="0.1230%" height="15" fill="rgb(206,174,23)" fg:x="81944" fg:w="134"/><text x="75.4956%" y="798.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (239 samples, 0.22%)</title><rect x="75.1511%" y="740" width="0.2195%" height="15" fill="rgb(211,33,43)" fg:x="81841" fg:w="239"/><text x="75.4011%" y="750.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (238 samples, 0.22%)</title><rect x="75.1520%" y="756" width="0.2185%" height="15" fill="rgb(245,58,50)" fg:x="81842" fg:w="238"/><text x="75.4020%" y="766.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1212) (1,287 samples, 1.18%)</title><rect x="74.2007%" y="676" width="1.1818%" height="15" fill="rgb(244,68,36)" fg:x="80806" fg:w="1287"/><text x="74.4507%" y="686.50"></text></g><g><title>get (src/dgcv/sigpro/signal_windows.py:99) (253 samples, 0.23%)</title><rect x="75.1501%" y="692" width="0.2323%" height="15" fill="rgb(232,229,15)" fg:x="81840" fg:w="253"/><text x="75.4001%" y="702.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (253 samples, 0.23%)</title><rect x="75.1501%" y="708" width="0.2323%" height="15" fill="rgb(254,30,23)" fg:x="81840" fg:w="253"/><text x="75.4001%" y="718.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (253 samples, 0.23%)</title><rect x="75.1501%" y="724" width="0.2323%" height="15" fill="rgb(235,160,14)" fg:x="81840" fg:w="253"/><text x="75.4001%" y="734.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (8,176 samples, 7.51%)</title><rect x="75.5330%" y="868" width="7.5077%" height="15" fill="rgb(212,155,44)" fg:x="82257" fg:w="8176"/><text x="75.7830%" y="878.50">get_values..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (8,445 samples, 7.75%)</title><rect x="75.5266%" y="852" width="7.7547%" height="15" fill="rgb(226,2,50)" fg:x="82250" fg:w="8445"/><text x="75.7766%" y="862.50">get_values_..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7839) (260 samples, 0.24%)</title><rect x="83.0426%" y="868" width="0.2387%" height="15" fill="rgb(234,177,6)" fg:x="90435" fg:w="260"/><text x="83.2926%" y="878.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (8,449 samples, 7.76%)</title><rect x="75.5257%" y="804" width="7.7584%" height="15" fill="rgb(217,24,9)" fg:x="82249" fg:w="8449"/><text x="75.7757%" y="814.50">_get_values..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (8,449 samples, 7.76%)</title><rect x="75.5257%" y="820" width="7.7584%" height="15" fill="rgb(220,13,46)" fg:x="82249" fg:w="8449"/><text x="75.7757%" y="830.50">get_values_..</text></g><g><title>apply (pandas/core/internals/managers.py:363) (8,449 samples, 7.76%)</title><rect x="75.5257%" y="836" width="7.7584%" height="15" fill="rgb(239,221,27)" fg:x="82249" fg:w="8449"/><text x="75.7757%" y="846.50">apply (pand..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (8,451 samples, 7.76%)</title><rect x="75.5248%" y="788" width="7.7602%" height="15" fill="rgb(222,198,25)" fg:x="82248" fg:w="8451"/><text x="75.7748%" y="798.50">_save_chunk..</text></g><g><title>validate (src/dgcv/validation/model.py:1226) (10,367 samples, 9.52%)</title><rect x="75.4715%" y="676" width="9.5196%" height="15" fill="rgb(211,99,13)" fg:x="82190" fg:w="10367"/><text x="75.7215%" y="686.50">validate (src/..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (10,367 samples, 9.52%)</title><rect x="75.4715%" y="692" width="9.5196%" height="15" fill="rgb(232,111,31)" fg:x="82190" fg:w="10367"/><text x="75.7215%" y="702.50">wrapper (panda..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (10,367 samples, 9.52%)</title><rect x="75.4715%" y="708" width="9.5196%" height="15" fill="rgb(245,82,37)" fg:x="82190" fg:w="10367"/><text x="75.7215%" y="718.50">to_csv (pandas..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (10,367 samples, 9.52%)</title><rect x="75.4715%" y="724" width="9.5196%" height="15" fill="rgb(227,149,46)" fg:x="82190" fg:w="10367"/><text x="75.7215%" y="734.50">to_csv (pandas..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (10,366 samples, 9.52%)</title><rect x="75.4724%" y="740" width="9.5186%" height="15" fill="rgb(218,36,50)" fg:x="82191" fg:w="10366"/><text x="75.7224%" y="750.50">save (pandas/i..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (10,366 samples, 9.52%)</title><rect x="75.4724%" y="756" width="9.5186%" height="15" fill="rgb(226,80,48)" fg:x="82191" fg:w="10366"/><text x="75.7224%" y="766.50">_save (pandas/..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (10,366 samples, 9.52%)</title><rect x="75.4724%" y="772" width="9.5186%" height="15" fill="rgb(238,224,15)" fg:x="82191" fg:w="10366"/><text x="75.7224%" y="782.50">_save_body (pa..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (1,851 samples, 1.70%)</title><rect x="83.2914%" y="788" width="1.6997%" height="15" fill="rgb(241,136,10)" fg:x="90706" fg:w="1851"/><text x="83.5414%" y="798.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (10,905 samples, 10.01%)</title><rect x="85.0590%" y="868" width="10.0136%" height="15" fill="rgb(208,32,45)" fg:x="92631" fg:w="10905"/><text x="85.3090%" y="878.50">get_values_for..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (11,211 samples, 10.29%)</title><rect x="85.0508%" y="852" width="10.2946%" height="15" fill="rgb(207,135,9)" fg:x="92622" fg:w="11211"/><text x="85.3008%" y="862.50">get_values_for_..</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7839) (297 samples, 0.27%)</title><rect x="95.0726%" y="868" width="0.2727%" height="15" fill="rgb(206,86,44)" fg:x="103536" fg:w="297"/><text x="95.3226%" y="878.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (11,212 samples, 10.30%)</title><rect x="85.0508%" y="836" width="10.2955%" height="15" fill="rgb(245,177,15)" fg:x="92622" fg:w="11212"/><text x="85.3008%" y="846.50">apply (pandas/c..</text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (11,213 samples, 10.30%)</title><rect x="85.0508%" y="804" width="10.2964%" height="15" fill="rgb(206,64,50)" fg:x="92622" fg:w="11213"/><text x="85.3008%" y="814.50">_get_values_for..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (11,213 samples, 10.30%)</title><rect x="85.0508%" y="820" width="10.2964%" height="15" fill="rgb(234,36,40)" fg:x="92622" fg:w="11213"/><text x="85.3008%" y="830.50">get_values_for_..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (11,215 samples, 10.30%)</title><rect x="85.0508%" y="788" width="10.2982%" height="15" fill="rgb(213,64,8)" fg:x="92622" fg:w="11215"/><text x="85.3008%" y="798.50">_save_chunk (pa..</text></g><g><title>validate (src/dgcv/validation/model.py:1227) (13,624 samples, 12.51%)</title><rect x="84.9911%" y="676" width="12.5103%" height="15" fill="rgb(210,75,36)" fg:x="92557" fg:w="13624"/><text x="85.2411%" y="686.50">validate (src/dgcv/..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (13,624 samples, 12.51%)</title><rect x="84.9911%" y="692" width="12.5103%" height="15" fill="rgb(229,88,21)" fg:x="92557" fg:w="13624"/><text x="85.2411%" y="702.50">wrapper (pandas/uti..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (13,624 samples, 12.51%)</title><rect x="84.9911%" y="708" width="12.5103%" height="15" fill="rgb(252,204,47)" fg:x="92557" fg:w="13624"/><text x="85.2411%" y="718.50">to_csv (pandas/core..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (13,624 samples, 12.51%)</title><rect x="84.9911%" y="724" width="12.5103%" height="15" fill="rgb(208,77,27)" fg:x="92557" fg:w="13624"/><text x="85.2411%" y="734.50">to_csv (pandas/io/f..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (13,623 samples, 12.51%)</title><rect x="84.9920%" y="740" width="12.5094%" height="15" fill="rgb(221,76,26)" fg:x="92558" fg:w="13623"/><text x="85.2420%" y="750.50">save (pandas/io/for..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (13,623 samples, 12.51%)</title><rect x="84.9920%" y="756" width="12.5094%" height="15" fill="rgb(225,139,18)" fg:x="92558" fg:w="13623"/><text x="85.2420%" y="766.50">_save (pandas/io/fo..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (13,623 samples, 12.51%)</title><rect x="84.9920%" y="772" width="12.5094%" height="15" fill="rgb(230,137,11)" fg:x="92558" fg:w="13623"/><text x="85.2420%" y="782.50">_save_body (pandas/..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (2,332 samples, 2.14%)</title><rect x="95.3600%" y="788" width="2.1414%" height="15" fill="rgb(212,28,1)" fg:x="103849" fg:w="2332"/><text x="95.6100%" y="798.50">_..</text></g><g><title>__calculate (src/dgcv/validation/model.py:866) (165 samples, 0.15%)</title><rect x="97.5180%" y="692" width="0.1515%" height="15" fill="rgb(248,164,17)" fg:x="106199" fg:w="165"/><text x="97.7680%" y="702.50"></text></g><g><title>_calculate_errors (src/dgcv/validation/model.py:491) (142 samples, 0.13%)</title><rect x="97.5391%" y="708" width="0.1304%" height="15" fill="rgb(222,171,42)" fg:x="106222" fg:w="142"/><text x="97.7891%" y="718.50"></text></g><g><title>maximum_error (src/dgcv/validation/common.py:560) (142 samples, 0.13%)</title><rect x="97.5391%" y="724" width="0.1304%" height="15" fill="rgb(243,84,45)" fg:x="106222" fg:w="142"/><text x="97.7891%" y="734.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:867) (151 samples, 0.14%)</title><rect x="97.6695%" y="692" width="0.1387%" height="15" fill="rgb(252,49,23)" fg:x="106364" fg:w="151"/><text x="97.9195%" y="702.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:884) (373 samples, 0.34%)</title><rect x="98.0028%" y="692" width="0.3425%" height="15" fill="rgb(215,19,7)" fg:x="106727" fg:w="373"/><text x="98.2528%" y="702.50"></text></g><g><title>validate (src/dgcv/validation/model.py:1234) (1,722 samples, 1.58%)</title><rect x="97.5014%" y="676" width="1.5812%" height="15" fill="rgb(238,81,41)" fg:x="106181" fg:w="1722"/><text x="97.7514%" y="686.50"></text></g><g><title>__calculate (src/dgcv/validation/model.py:902) (799 samples, 0.73%)</title><rect x="98.3490%" y="692" width="0.7337%" height="15" fill="rgb(210,199,37)" fg:x="107104" fg:w="799"/><text x="98.5990%" y="702.50"></text></g><g><title>validate (src/dgcv/model/operating_condition.py:190) (30,057 samples, 27.60%)</title><rect x="71.4835%" y="644" width="27.6000%" height="15" fill="rgb(244,192,49)" fg:x="77847" fg:w="30057"/><text x="71.7335%" y="654.50">validate (src/dgcv/model/operating_condition..</text></g><g><title>__validate (src/dgcv/model/operating_condition.py:134) (30,056 samples, 27.60%)</title><rect x="71.4845%" y="660" width="27.5991%" height="15" fill="rgb(226,211,11)" fg:x="77848" fg:w="30056"/><text x="71.7345%" y="670.50">__validate (src/dgcv/model/operating_conditi..</text></g><g><title>validate (src/dgcv/core/model_validation.py:219) (30,461 samples, 27.97%)</title><rect x="71.1135%" y="580" width="27.9710%" height="15" fill="rgb(236,162,54)" fg:x="77444" fg:w="30461"/><text x="71.3635%" y="590.50">validate (src/dgcv/core/model_validation.py:2..</text></g><g><title>validate (src/dgcv/model/pcs.py:126) (30,461 samples, 27.97%)</title><rect x="71.1135%" y="596" width="27.9710%" height="15" fill="rgb(220,229,9)" fg:x="77444" fg:w="30461"/><text x="71.3635%" y="606.50">validate (src/dgcv/model/pcs.py:126)</text></g><g><title>validate (src/dgcv/model/benchmark.py:539) (30,058 samples, 27.60%)</title><rect x="71.4835%" y="612" width="27.6010%" height="15" fill="rgb(250,87,22)" fg:x="77847" fg:w="30058"/><text x="71.7335%" y="622.50">validate (src/dgcv/model/benchmark.py:539)</text></g><g><title>__validate (src/dgcv/model/benchmark.py:477) (30,058 samples, 27.60%)</title><rect x="71.4835%" y="628" width="27.6010%" height="15" fill="rgb(239,43,17)" fg:x="77847" fg:w="30058"/><text x="71.7335%" y="638.50">__validate (src/dgcv/model/benchmark.py:477)</text></g><g><title>test_model_validation_wecc_curves (test_tool.py:253) (30,492 samples, 28.00%)</title><rect x="71.1025%" y="548" width="27.9995%" height="15" fill="rgb(231,177,25)" fg:x="77432" fg:w="30492"/><text x="71.3525%" y="558.50">test_model_validation_wecc_curves (test_tool...</text></g><g><title>_execute_tool (test_tool.py:52) (30,481 samples, 27.99%)</title><rect x="71.1126%" y="564" width="27.9894%" height="15" fill="rgb(219,179,1)" fg:x="77443" fg:w="30481"/><text x="71.3626%" y="574.50">_execute_tool (test_tool.py:52)</text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (348 samples, 0.32%)</title><rect x="99.2333%" y="868" width="0.3196%" height="15" fill="rgb(238,219,53)" fg:x="108067" fg:w="348"/><text x="99.4833%" y="878.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (381 samples, 0.35%)</title><rect x="99.2305%" y="852" width="0.3499%" height="15" fill="rgb(232,167,36)" fg:x="108064" fg:w="381"/><text x="99.4805%" y="862.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (383 samples, 0.35%)</title><rect x="99.2305%" y="788" width="0.3517%" height="15" fill="rgb(244,19,51)" fg:x="108064" fg:w="383"/><text x="99.4805%" y="798.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (383 samples, 0.35%)</title><rect x="99.2305%" y="804" width="0.3517%" height="15" fill="rgb(224,6,22)" fg:x="108064" fg:w="383"/><text x="99.4805%" y="814.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (383 samples, 0.35%)</title><rect x="99.2305%" y="820" width="0.3517%" height="15" fill="rgb(224,145,5)" fg:x="108064" fg:w="383"/><text x="99.4805%" y="830.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (383 samples, 0.35%)</title><rect x="99.2305%" y="836" width="0.3517%" height="15" fill="rgb(234,130,49)" fg:x="108064" fg:w="383"/><text x="99.4805%" y="846.50"></text></g><g><title>has_required_curves (src/dgcv/model/operating_condition.py:248) (606 samples, 0.56%)</title><rect x="99.1176%" y="628" width="0.5565%" height="15" fill="rgb(254,6,2)" fg:x="107941" fg:w="606"/><text x="99.3676%" y="638.50"></text></g><g><title>__obtain_curve (src/dgcv/model/operating_condition.py:94) (606 samples, 0.56%)</title><rect x="99.1176%" y="644" width="0.5565%" height="15" fill="rgb(208,96,46)" fg:x="107941" fg:w="606"/><text x="99.3676%" y="654.50"></text></g><g><title>obtain_simulated_curve (src/dgcv/curves/manager.py:222) (606 samples, 0.56%)</title><rect x="99.1176%" y="660" width="0.5565%" height="15" fill="rgb(239,3,39)" fg:x="107941" fg:w="606"/><text x="99.3676%" y="670.50"></text></g><g><title>__obtain_files_curve (src/dgcv/curves/manager.py:80) (490 samples, 0.45%)</title><rect x="99.2241%" y="676" width="0.4499%" height="15" fill="rgb(233,210,1)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="686.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (490 samples, 0.45%)</title><rect x="99.2241%" y="692" width="0.4499%" height="15" fill="rgb(244,137,37)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="702.50"></text></g><g><title>to_csv (pandas/core/generic.py:3967) (490 samples, 0.45%)</title><rect x="99.2241%" y="708" width="0.4499%" height="15" fill="rgb(240,136,2)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="718.50"></text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (490 samples, 0.45%)</title><rect x="99.2241%" y="724" width="0.4499%" height="15" fill="rgb(239,18,37)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="734.50"></text></g><g><title>save (pandas/io/formats/csvs.py:270) (490 samples, 0.45%)</title><rect x="99.2241%" y="740" width="0.4499%" height="15" fill="rgb(218,185,22)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="750.50"></text></g><g><title>_save (pandas/io/formats/csvs.py:275) (490 samples, 0.45%)</title><rect x="99.2241%" y="756" width="0.4499%" height="15" fill="rgb(225,218,4)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="766.50"></text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (490 samples, 0.45%)</title><rect x="99.2241%" y="772" width="0.4499%" height="15" fill="rgb(230,182,32)" fg:x="108057" fg:w="490"/><text x="99.4741%" y="782.50"></text></g><g><title>validate (src/dgcv/model/benchmark.py:537) (651 samples, 0.60%)</title><rect x="99.1166%" y="612" width="0.5978%" height="15" fill="rgb(242,56,43)" fg:x="107940" fg:w="651"/><text x="99.3666%" y="622.50"></text></g><g><title>validate (src/dgcv/core/model_validation.py:219) (745 samples, 0.68%)</title><rect x="99.1157%" y="580" width="0.6841%" height="15" fill="rgb(233,99,24)" fg:x="107939" fg:w="745"/><text x="99.3657%" y="590.50"></text></g><g><title>validate (src/dgcv/model/pcs.py:126) (744 samples, 0.68%)</title><rect x="99.1166%" y="596" width="0.6832%" height="15" fill="rgb(234,209,42)" fg:x="107940" fg:w="744"/><text x="99.3666%" y="606.50"></text></g><g><title>test_perf_ppm_curves (test_tool.py:121) (748 samples, 0.69%)</title><rect x="99.1139%" y="548" width="0.6869%" height="15" fill="rgb(227,7,12)" fg:x="107937" fg:w="748"/><text x="99.3639%" y="558.50"></text></g><g><title>_execute_tool (test_tool.py:52) (746 samples, 0.69%)</title><rect x="99.1157%" y="564" width="0.6850%" height="15" fill="rgb(245,203,43)" fg:x="107939" fg:w="746"/><text x="99.3657%" y="574.50"></text></g><g><title>test_perf_sm_curves (test_tool.py:76) (114 samples, 0.10%)</title><rect x="99.8007%" y="548" width="0.1047%" height="15" fill="rgb(238,205,33)" fg:x="108685" fg:w="114"/><text x="100.0507%" y="558.50"></text></g><g><title>_multicall (pluggy/_callers.py:103) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="436" width="99.6336%" height="15" fill="rgb(231,56,7)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="446.50">_multicall (pluggy/_callers.py:103)</text></g><g><title>pytest_runtest_call (_pytest/runner.py:174) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="452" width="99.6336%" height="15" fill="rgb(244,186,29)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="462.50">pytest_runtest_call (_pytest/runner.py:174)</text></g><g><title>runtest (_pytest/python.py:1627) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="468" width="99.6336%" height="15" fill="rgb(234,111,31)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="478.50">runtest (_pytest/python.py:1627)</text></g><g><title>__call__ (pluggy/_hooks.py:513) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="484" width="99.6336%" height="15" fill="rgb(241,149,10)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="494.50">__call__ (pluggy/_hooks.py:513)</text></g><g><title>_hookexec (pluggy/_manager.py:120) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="500" width="99.6336%" height="15" fill="rgb(249,206,44)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="510.50">_hookexec (pluggy/_manager.py:120)</text></g><g><title>_multicall (pluggy/_callers.py:103) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="516" width="99.6336%" height="15" fill="rgb(251,153,30)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="526.50">_multicall (pluggy/_callers.py:103)</text></g><g><title>pytest_pyfunc_call (_pytest/python.py:159) (108,503 samples, 99.63%)</title><rect x="0.2883%" y="532" width="99.6336%" height="15" fill="rgb(239,152,38)" fg:x="314" fg:w="108503"/><text x="0.5383%" y="542.50">pytest_pyfunc_call (_pytest/python.py:159)</text></g><g><title>call_and_report (_pytest/runner.py:241) (108,505 samples, 99.64%)</title><rect x="0.2883%" y="356" width="99.6355%" height="15" fill="rgb(249,139,47)" fg:x="314" fg:w="108505"/><text x="0.5383%" y="366.50">call_and_report (_pytest/runner.py:241)</text></g><g><title>from_call (_pytest/runner.py:341) (108,505 samples, 99.64%)</title><rect x="0.2883%" y="372" width="99.6355%" height="15" fill="rgb(244,64,35)" fg:x="314" fg:w="108505"/><text x="0.5383%" y="382.50">from_call (_pytest/runner.py:341)</text></g><g><title>&lt;lambda&gt; (_pytest/runner.py:242) (108,505 samples, 99.64%)</title><rect x="0.2883%" y="388" width="99.6355%" height="15" fill="rgb(216,46,15)" fg:x="314" fg:w="108505"/><text x="0.5383%" y="398.50">&lt;lambda&gt; (_pytest/runner.py:242)</text></g><g><title>__call__ (pluggy/_hooks.py:513) (108,505 samples, 99.64%)</title><rect x="0.2883%" y="404" width="99.6355%" height="15" fill="rgb(250,74,19)" fg:x="314" fg:w="108505"/><text x="0.5383%" y="414.50">__call__ (pluggy/_hooks.py:513)</text></g><g><title>_hookexec (pluggy/_manager.py:120) (108,505 samples, 99.64%)</title><rect x="0.2883%" y="420" width="99.6355%" height="15" fill="rgb(249,42,33)" fg:x="314" fg:w="108505"/><text x="0.5383%" y="430.50">_hookexec (pluggy/_manager.py:120)</text></g><g><title>runtestprotocol (_pytest/runner.py:132) (108,551 samples, 99.68%)</title><rect x="0.2874%" y="340" width="99.6777%" height="15" fill="rgb(242,149,17)" fg:x="313" fg:w="108551"/><text x="0.5374%" y="350.50">runtestprotocol (_pytest/runner.py:132)</text></g><g><title>_multicall (pluggy/_callers.py:103) (108,579 samples, 99.70%)</title><rect x="0.2681%" y="308" width="99.7034%" height="15" fill="rgb(244,29,21)" fg:x="292" fg:w="108579"/><text x="0.5181%" y="318.50">_multicall (pluggy/_callers.py:103)</text></g><g><title>pytest_runtest_protocol (_pytest/runner.py:113) (108,570 samples, 99.70%)</title><rect x="0.2764%" y="324" width="99.6951%" height="15" fill="rgb(220,130,37)" fg:x="301" fg:w="108570"/><text x="0.5264%" y="334.50">pytest_runtest_protocol (_pytest/runner.py:113)</text></g><g><title>wrap_session (_pytest/main.py:283) (108,794 samples, 99.90%)</title><rect x="0.0735%" y="180" width="99.9008%" height="15" fill="rgb(211,67,2)" fg:x="80" fg:w="108794"/><text x="0.3235%" y="190.50">wrap_session (_pytest/main.py:283)</text></g><g><title>_main (_pytest/main.py:337) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="196" width="99.7062%" height="15" fill="rgb(235,68,52)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="206.50">_main (_pytest/main.py:337)</text></g><g><title>__call__ (pluggy/_hooks.py:513) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="212" width="99.7062%" height="15" fill="rgb(246,142,3)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="222.50">__call__ (pluggy/_hooks.py:513)</text></g><g><title>_hookexec (pluggy/_manager.py:120) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="228" width="99.7062%" height="15" fill="rgb(241,25,7)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="238.50">_hookexec (pluggy/_manager.py:120)</text></g><g><title>_multicall (pluggy/_callers.py:103) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="244" width="99.7062%" height="15" fill="rgb(242,119,39)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="254.50">_multicall (pluggy/_callers.py:103)</text></g><g><title>pytest_runtestloop (_pytest/main.py:362) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="260" width="99.7062%" height="15" fill="rgb(241,98,45)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="270.50">pytest_runtestloop (_pytest/main.py:362)</text></g><g><title>__call__ (pluggy/_hooks.py:513) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="276" width="99.7062%" height="15" fill="rgb(254,28,30)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="286.50">__call__ (pluggy/_hooks.py:513)</text></g><g><title>_hookexec (pluggy/_manager.py:120) (108,582 samples, 99.71%)</title><rect x="0.2681%" y="292" width="99.7062%" height="15" fill="rgb(241,142,54)" fg:x="292" fg:w="108582"/><text x="0.5181%" y="302.50">_hookexec (pluggy/_manager.py:120)</text></g><g><title>all (108,902 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="108902"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (pytest:8) (108,893 samples, 99.99%)</title><rect x="0.0083%" y="68" width="99.9917%" height="15" fill="rgb(210,85,47)" fg:x="9" fg:w="108893"/><text x="0.2583%" y="78.50">&lt;module&gt; (pytest:8)</text></g><g><title>console_main (_pytest/config/__init__.py:201) (108,893 samples, 99.99%)</title><rect x="0.0083%" y="84" width="99.9917%" height="15" fill="rgb(224,206,25)" fg:x="9" fg:w="108893"/><text x="0.2583%" y="94.50">console_main (_pytest/config/__init__.py:201)</text></g><g><title>main (_pytest/config/__init__.py:177) (108,830 samples, 99.93%)</title><rect x="0.0661%" y="100" width="99.9339%" height="15" fill="rgb(243,201,19)" fg:x="72" fg:w="108830"/><text x="0.3161%" y="110.50">main (_pytest/config/__init__.py:177)</text></g><g><title>__call__ (pluggy/_hooks.py:513) (108,830 samples, 99.93%)</title><rect x="0.0661%" y="116" width="99.9339%" height="15" fill="rgb(236,59,4)" fg:x="72" fg:w="108830"/><text x="0.3161%" y="126.50">__call__ (pluggy/_hooks.py:513)</text></g><g><title>_hookexec (pluggy/_manager.py:120) (108,830 samples, 99.93%)</title><rect x="0.0661%" y="132" width="99.9339%" height="15" fill="rgb(254,179,45)" fg:x="72" fg:w="108830"/><text x="0.3161%" y="142.50">_hookexec (pluggy/_manager.py:120)</text></g><g><title>_multicall (pluggy/_callers.py:103) (108,830 samples, 99.93%)</title><rect x="0.0661%" y="148" width="99.9339%" height="15" fill="rgb(226,14,10)" fg:x="72" fg:w="108830"/><text x="0.3161%" y="158.50">_multicall (pluggy/_callers.py:103)</text></g><g><title>pytest_cmdline_main (_pytest/main.py:330) (108,830 samples, 99.93%)</title><rect x="0.0661%" y="164" width="99.9339%" height="15" fill="rgb(244,27,41)" fg:x="72" fg:w="108830"/><text x="0.3161%" y="174.50">pytest_cmdline_main (_pytest/main.py:330)</text></g></svg></svg>
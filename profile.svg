<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1050" onload="init(evt)" viewBox="0 0 1200 1050" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1050" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile.svg -- dycov validate -l dynawo.sh -m ./examples/Model/Wind/WECCA/Dynawo ./examples/Model/Wind/WECCA/ReferenceCurves -o ../Results/Model/Wind/WECCA --testing</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1039.00"> </text><svg id="frames" x="10" width="1180" total_samples="67564"><g><title>&lt;module&gt; (dycov:5) (139 samples, 0.21%)</title><rect x="0.0000%" y="68" width="0.2057%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="139"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (139 samples, 0.21%)</title><rect x="0.0000%" y="84" width="0.2057%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="139"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (139 samples, 0.21%)</title><rect x="0.0000%" y="100" width="0.2057%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="139"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (139 samples, 0.21%)</title><rect x="0.0000%" y="116" width="0.2057%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="139"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (139 samples, 0.21%)</title><rect x="0.0000%" y="132" width="0.2057%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="139"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (139 samples, 0.21%)</title><rect x="0.0000%" y="148" width="0.2057%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="139"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (src/dycov/launchers.py:16) (139 samples, 0.21%)</title><rect x="0.0000%" y="164" width="0.2057%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="139"/><text x="0.2500%" y="174.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1078) (139 samples, 0.21%)</title><rect x="0.0000%" y="180" width="0.2057%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="139"/><text x="0.2500%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (139 samples, 0.21%)</title><rect x="0.0000%" y="196" width="0.2057%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="139"/><text x="0.2500%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (139 samples, 0.21%)</title><rect x="0.0000%" y="212" width="0.2057%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="139"/><text x="0.2500%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (139 samples, 0.21%)</title><rect x="0.0000%" y="228" width="0.2057%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="139"/><text x="0.2500%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (139 samples, 0.21%)</title><rect x="0.0000%" y="244" width="0.2057%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="139"/><text x="0.2500%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (139 samples, 0.21%)</title><rect x="0.0000%" y="260" width="0.2057%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="139"/><text x="0.2500%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (139 samples, 0.21%)</title><rect x="0.0000%" y="276" width="0.2057%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="139"/><text x="0.2500%" y="286.50"></text></g><g><title>&lt;module&gt; (src/dycov/core/initialization.py:17) (139 samples, 0.21%)</title><rect x="0.0000%" y="292" width="0.2057%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="139"/><text x="0.2500%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (139 samples, 0.21%)</title><rect x="0.0000%" y="308" width="0.2057%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="139"/><text x="0.2500%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (139 samples, 0.21%)</title><rect x="0.0000%" y="324" width="0.2057%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="139"/><text x="0.2500%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (139 samples, 0.21%)</title><rect x="0.0000%" y="340" width="0.2057%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="139"/><text x="0.2500%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (139 samples, 0.21%)</title><rect x="0.0000%" y="356" width="0.2057%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="139"/><text x="0.2500%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (139 samples, 0.21%)</title><rect x="0.0000%" y="372" width="0.2057%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="139"/><text x="0.2500%" y="382.50"></text></g><g><title>obtain_simulated_curve (src/dycov/dynawo/curves.py:1138) (125 samples, 0.19%)</title><rect x="0.2768%" y="228" width="0.1850%" height="15" fill="rgb(249,33,26)" fg:x="187" fg:w="125"/><text x="0.5268%" y="238.50"></text></g><g><title>copy2 (shutil.py:434) (141 samples, 0.21%)</title><rect x="0.6364%" y="436" width="0.2087%" height="15" fill="rgb(235,183,28)" fg:x="430" fg:w="141"/><text x="0.8864%" y="446.50"></text></g><g><title>copyfile (shutil.py:267) (134 samples, 0.20%)</title><rect x="0.6468%" y="452" width="0.1983%" height="15" fill="rgb(221,5,38)" fg:x="437" fg:w="134"/><text x="0.8968%" y="462.50"></text></g><g><title>_fastcopy_sendfile (shutil.py:143) (134 samples, 0.20%)</title><rect x="0.6468%" y="468" width="0.1983%" height="15" fill="rgb(247,18,42)" fg:x="437" fg:w="134"/><text x="0.8968%" y="478.50"></text></g><g><title>_copytree (shutil.py:499) (149 samples, 0.22%)</title><rect x="0.6320%" y="420" width="0.2205%" height="15" fill="rgb(241,131,45)" fg:x="427" fg:w="149"/><text x="0.8820%" y="430.50"></text></g><g><title>_copytree (shutil.py:495) (186 samples, 0.28%)</title><rect x="0.5861%" y="388" width="0.2753%" height="15" fill="rgb(249,31,29)" fg:x="396" fg:w="186"/><text x="0.8361%" y="398.50"></text></g><g><title>copytree (shutil.py:559) (179 samples, 0.26%)</title><rect x="0.5965%" y="404" width="0.2649%" height="15" fill="rgb(225,111,53)" fg:x="403" fg:w="179"/><text x="0.8465%" y="414.50"></text></g><g><title>copy2 (shutil.py:434) (170 samples, 0.25%)</title><rect x="0.8629%" y="404" width="0.2516%" height="15" fill="rgb(238,160,17)" fg:x="583" fg:w="170"/><text x="1.1129%" y="414.50"></text></g><g><title>copyfile (shutil.py:267) (162 samples, 0.24%)</title><rect x="0.8747%" y="420" width="0.2398%" height="15" fill="rgb(214,148,48)" fg:x="591" fg:w="162"/><text x="1.1247%" y="430.50"></text></g><g><title>_fastcopy_sendfile (shutil.py:143) (159 samples, 0.24%)</title><rect x="0.8792%" y="436" width="0.2353%" height="15" fill="rgb(232,36,49)" fg:x="594" fg:w="159"/><text x="1.1292%" y="446.50"></text></g><g><title>_copytree (shutil.py:499) (180 samples, 0.27%)</title><rect x="0.8614%" y="388" width="0.2664%" height="15" fill="rgb(209,103,24)" fg:x="582" fg:w="180"/><text x="1.1114%" y="398.50"></text></g><g><title>_copytree (shutil.py:495) (418 samples, 0.62%)</title><rect x="0.5239%" y="356" width="0.6187%" height="15" fill="rgb(229,88,8)" fg:x="354" fg:w="418"/><text x="0.7739%" y="366.50"></text></g><g><title>copytree (shutil.py:559) (408 samples, 0.60%)</title><rect x="0.5387%" y="372" width="0.6039%" height="15" fill="rgb(213,181,19)" fg:x="364" fg:w="408"/><text x="0.7887%" y="382.50"></text></g><g><title>_copytree (shutil.py:495) (486 samples, 0.72%)</title><rect x="0.4914%" y="324" width="0.7193%" height="15" fill="rgb(254,191,54)" fg:x="332" fg:w="486"/><text x="0.7414%" y="334.50"></text></g><g><title>copytree (shutil.py:559) (481 samples, 0.71%)</title><rect x="0.4988%" y="340" width="0.7119%" height="15" fill="rgb(241,83,37)" fg:x="337" fg:w="481"/><text x="0.7488%" y="350.50"></text></g><g><title>copy2 (shutil.py:434) (73 samples, 0.11%)</title><rect x="1.2196%" y="340" width="0.1080%" height="15" fill="rgb(233,36,39)" fg:x="824" fg:w="73"/><text x="1.4696%" y="350.50"></text></g><g><title>_copytree (shutil.py:499) (98 samples, 0.15%)</title><rect x="1.2107%" y="324" width="0.1450%" height="15" fill="rgb(226,3,54)" fg:x="818" fg:w="98"/><text x="1.4607%" y="334.50"></text></g><g><title>_copytree (shutil.py:495) (601 samples, 0.89%)</title><rect x="0.4677%" y="292" width="0.8895%" height="15" fill="rgb(245,192,40)" fg:x="316" fg:w="601"/><text x="0.7177%" y="302.50"></text></g><g><title>copytree (shutil.py:559) (600 samples, 0.89%)</title><rect x="0.4692%" y="308" width="0.8880%" height="15" fill="rgb(238,167,29)" fg:x="317" fg:w="600"/><text x="0.7192%" y="318.50"></text></g><g><title>clone_as_subdirectory (src/dycov/files/manage_files.py:149) (619 samples, 0.92%)</title><rect x="0.4662%" y="260" width="0.9162%" height="15" fill="rgb(232,182,51)" fg:x="315" fg:w="619"/><text x="0.7162%" y="270.50"></text></g><g><title>copytree (shutil.py:559) (619 samples, 0.92%)</title><rect x="0.4662%" y="276" width="0.9162%" height="15" fill="rgb(231,60,39)" fg:x="315" fg:w="619"/><text x="0.7162%" y="286.50"></text></g><g><title>_rmtree_safe_fd (shutil.py:660) (75 samples, 0.11%)</title><rect x="1.4002%" y="308" width="0.1110%" height="15" fill="rgb(208,69,12)" fg:x="946" fg:w="75"/><text x="1.6502%" y="318.50"></text></g><g><title>clone_as_subdirectory (src/dycov/files/manage_files.py:157) (91 samples, 0.13%)</title><rect x="1.3883%" y="260" width="0.1347%" height="15" fill="rgb(235,93,37)" fg:x="938" fg:w="91"/><text x="1.6383%" y="270.50"></text></g><g><title>remove_dir (src/dycov/files/manage_files.py:128) (89 samples, 0.13%)</title><rect x="1.3913%" y="276" width="0.1317%" height="15" fill="rgb(213,116,39)" fg:x="940" fg:w="89"/><text x="1.6413%" y="286.50"></text></g><g><title>rmtree (shutil.py:725) (89 samples, 0.13%)</title><rect x="1.3913%" y="292" width="0.1317%" height="15" fill="rgb(222,207,29)" fg:x="940" fg:w="89"/><text x="1.6413%" y="302.50"></text></g><g><title>__get_hiz_fault (src/dycov/dynawo/curves.py:730) (718 samples, 1.06%)</title><rect x="0.4618%" y="244" width="1.0627%" height="15" fill="rgb(206,96,30)" fg:x="312" fg:w="718"/><text x="0.7118%" y="254.50"></text></g><g><title>_internal_poll (subprocess.py:1889) (106 samples, 0.16%)</title><rect x="1.7391%" y="324" width="0.1569%" height="15" fill="rgb(218,138,4)" fg:x="1175" fg:w="106"/><text x="1.9891%" y="334.50"></text></g><g><title>_internal_poll (subprocess.py:1896) (3,608 samples, 5.34%)</title><rect x="1.9700%" y="324" width="5.3401%" height="15" fill="rgb(250,191,14)" fg:x="1331" fg:w="3608"/><text x="2.2200%" y="334.50">_intern..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:184) (3,943 samples, 5.84%)</title><rect x="1.5452%" y="292" width="5.8359%" height="15" fill="rgb(239,60,40)" fg:x="1044" fg:w="3943"/><text x="1.7952%" y="302.50">_run_dy..</text></g><g><title>poll (subprocess.py:1181) (3,874 samples, 5.73%)</title><rect x="1.6473%" y="308" width="5.7338%" height="15" fill="rgb(206,27,48)" fg:x="1113" fg:w="3874"/><text x="1.8973%" y="318.50">poll (s..</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:629) (4,012 samples, 5.94%)</title><rect x="1.5348%" y="276" width="5.9381%" height="15" fill="rgb(225,35,8)" fg:x="1037" fg:w="4012"/><text x="1.7848%" y="286.50">run_base..</text></g><g><title>read (pandas/io/parsers/c_parser_wrapper.py:234) (157 samples, 0.23%)</title><rect x="7.5750%" y="356" width="0.2324%" height="15" fill="rgb(250,213,24)" fg:x="5118" fg:w="157"/><text x="7.8250%" y="366.50"></text></g><g><title>read (pandas/io/parsers/readers.py:1923) (158 samples, 0.23%)</title><rect x="7.5750%" y="340" width="0.2339%" height="15" fill="rgb(247,123,22)" fg:x="5118" fg:w="158"/><text x="7.8250%" y="350.50"></text></g><g><title>_create_curves (src/dycov/dynawo/dynawo.py:435) (198 samples, 0.29%)</title><rect x="7.5366%" y="292" width="0.2931%" height="15" fill="rgb(231,138,38)" fg:x="5092" fg:w="198"/><text x="7.7866%" y="302.50"></text></g><g><title>read_csv (pandas/io/parsers/readers.py:1026) (198 samples, 0.29%)</title><rect x="7.5366%" y="308" width="0.2931%" height="15" fill="rgb(231,145,46)" fg:x="5092" fg:w="198"/><text x="7.7866%" y="318.50"></text></g><g><title>_read (pandas/io/parsers/readers.py:626) (172 samples, 0.25%)</title><rect x="7.5750%" y="324" width="0.2546%" height="15" fill="rgb(251,118,11)" fg:x="5118" fg:w="172"/><text x="7.8250%" y="334.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (88 samples, 0.13%)</title><rect x="8.0413%" y="356" width="0.1302%" height="15" fill="rgb(217,147,25)" fg:x="5433" fg:w="88"/><text x="8.2913%" y="366.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (88 samples, 0.13%)</title><rect x="8.0413%" y="372" width="0.1302%" height="15" fill="rgb(247,81,37)" fg:x="5433" fg:w="88"/><text x="8.2913%" y="382.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (87 samples, 0.13%)</title><rect x="8.0427%" y="388" width="0.1288%" height="15" fill="rgb(209,12,38)" fg:x="5434" fg:w="87"/><text x="8.2927%" y="398.50"></text></g><g><title>_create_curves (src/dycov/dynawo/dynawo.py:441) (233 samples, 0.34%)</title><rect x="7.8385%" y="292" width="0.3449%" height="15" fill="rgb(227,1,9)" fg:x="5296" fg:w="233"/><text x="8.0885%" y="302.50"></text></g><g><title>_translate_curves (src/dycov/dynawo/dynawo.py:386) (98 samples, 0.15%)</title><rect x="8.0383%" y="308" width="0.1450%" height="15" fill="rgb(248,47,43)" fg:x="5431" fg:w="98"/><text x="8.2883%" y="318.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (98 samples, 0.15%)</title><rect x="8.0383%" y="324" width="0.1450%" height="15" fill="rgb(221,10,30)" fg:x="5431" fg:w="98"/><text x="8.2883%" y="334.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (97 samples, 0.14%)</title><rect x="8.0398%" y="340" width="0.1436%" height="15" fill="rgb(210,229,1)" fg:x="5432" fg:w="97"/><text x="8.2898%" y="350.50"></text></g><g><title>_create_curves (src/dycov/dynawo/dynawo.py:473) (75 samples, 0.11%)</title><rect x="8.4202%" y="292" width="0.1110%" height="15" fill="rgb(222,148,37)" fg:x="5689" fg:w="75"/><text x="8.6702%" y="302.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (121 samples, 0.18%)</title><rect x="8.5386%" y="340" width="0.1791%" height="15" fill="rgb(234,67,33)" fg:x="5769" fg:w="121"/><text x="8.7886%" y="350.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (121 samples, 0.18%)</title><rect x="8.5386%" y="356" width="0.1791%" height="15" fill="rgb(247,98,35)" fg:x="5769" fg:w="121"/><text x="8.7886%" y="366.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (110 samples, 0.16%)</title><rect x="8.5549%" y="372" width="0.1628%" height="15" fill="rgb(247,138,52)" fg:x="5780" fg:w="110"/><text x="8.8049%" y="382.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (75 samples, 0.11%)</title><rect x="8.6067%" y="388" width="0.1110%" height="15" fill="rgb(213,79,30)" fg:x="5815" fg:w="75"/><text x="8.8567%" y="398.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (133 samples, 0.20%)</title><rect x="8.5312%" y="308" width="0.1969%" height="15" fill="rgb(246,177,23)" fg:x="5764" fg:w="133"/><text x="8.7812%" y="318.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (129 samples, 0.19%)</title><rect x="8.5371%" y="324" width="0.1909%" height="15" fill="rgb(230,62,27)" fg:x="5768" fg:w="129"/><text x="8.7871%" y="334.50"></text></g><g><title>__get_hiz_fault (src/dycov/dynawo/curves.py:750) (4,861 samples, 7.19%)</title><rect x="1.5348%" y="244" width="7.1947%" height="15" fill="rgb(216,154,8)" fg:x="1037" fg:w="4861"/><text x="1.7848%" y="254.50">__get_hiz_..</text></g><g><title>__execute_dynawo (src/dycov/dynawo/curves.py:692) (4,861 samples, 7.19%)</title><rect x="1.5348%" y="260" width="7.1947%" height="15" fill="rgb(244,35,45)" fg:x="1037" fg:w="4861"/><text x="1.7848%" y="270.50">__execute_..</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:645) (820 samples, 1.21%)</title><rect x="7.5158%" y="276" width="1.2137%" height="15" fill="rgb(251,115,12)" fg:x="5078" fg:w="820"/><text x="7.7658%" y="286.50"></text></g><g><title>_create_curves (src/dycov/dynawo/dynawo.py:475) (134 samples, 0.20%)</title><rect x="8.5312%" y="292" width="0.1983%" height="15" fill="rgb(240,54,50)" fg:x="5764" fg:w="134"/><text x="8.7812%" y="302.50"></text></g><g><title>obtain_simulated_curve (src/dycov/dynawo/curves.py:1147) (5,673 samples, 8.40%)</title><rect x="0.4618%" y="228" width="8.3965%" height="15" fill="rgb(233,84,52)" fg:x="312" fg:w="5673"/><text x="0.7118%" y="238.50">obtain_simul..</text></g><g><title>_internal_poll (subprocess.py:1889) (121 samples, 0.18%)</title><rect x="9.0892%" y="324" width="0.1791%" height="15" fill="rgb(207,117,47)" fg:x="6141" fg:w="121"/><text x="9.3392%" y="334.50"></text></g><g><title>_internal_poll (subprocess.py:1896) (10,543 samples, 15.60%)</title><rect x="9.3053%" y="324" width="15.6045%" height="15" fill="rgb(249,43,39)" fg:x="6287" fg:w="10543"/><text x="9.5553%" y="334.50">_internal_poll (subproce..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:184) (10,894 samples, 16.12%)</title><rect x="8.8612%" y="292" width="16.1240%" height="15" fill="rgb(209,38,44)" fg:x="5987" fg:w="10894"/><text x="9.1112%" y="302.50">_run_dynawo (src/dycov/dyn..</text></g><g><title>poll (subprocess.py:1181) (10,808 samples, 16.00%)</title><rect x="8.9885%" y="308" width="15.9967%" height="15" fill="rgb(236,212,23)" fg:x="6073" fg:w="10808"/><text x="9.2385%" y="318.50">poll (subprocess.py:1181)</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:629) (10,964 samples, 16.23%)</title><rect x="8.8583%" y="276" width="16.2276%" height="15" fill="rgb(242,79,21)" fg:x="5985" fg:w="10964"/><text x="9.1083%" y="286.50">run_base_dynawo (src/dycov..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:185) (68 samples, 0.10%)</title><rect x="24.9852%" y="292" width="0.1006%" height="15" fill="rgb(211,96,35)" fg:x="16881" fg:w="68"/><text x="25.2352%" y="302.50"></text></g><g><title>read (pandas/io/parsers/c_parser_wrapper.py:234) (69 samples, 0.10%)</title><rect x="25.1406%" y="356" width="0.1021%" height="15" fill="rgb(253,215,40)" fg:x="16986" fg:w="69"/><text x="25.3906%" y="366.50"></text></g><g><title>read (pandas/io/parsers/readers.py:1923) (70 samples, 0.10%)</title><rect x="25.1406%" y="340" width="0.1036%" height="15" fill="rgb(211,81,21)" fg:x="16986" fg:w="70"/><text x="25.3906%" y="350.50"></text></g><g><title>_create_curves (src/dycov/dynawo/dynawo.py:435) (82 samples, 0.12%)</title><rect x="25.1302%" y="292" width="0.1214%" height="15" fill="rgb(208,190,38)" fg:x="16979" fg:w="82"/><text x="25.3802%" y="302.50"></text></g><g><title>read_csv (pandas/io/parsers/readers.py:1026) (82 samples, 0.12%)</title><rect x="25.1302%" y="308" width="0.1214%" height="15" fill="rgb(235,213,38)" fg:x="16979" fg:w="82"/><text x="25.3802%" y="318.50"></text></g><g><title>_read (pandas/io/parsers/readers.py:626) (75 samples, 0.11%)</title><rect x="25.1406%" y="324" width="0.1110%" height="15" fill="rgb(237,122,38)" fg:x="16986" fg:w="75"/><text x="25.3906%" y="334.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (72 samples, 0.11%)</title><rect x="25.3360%" y="372" width="0.1066%" height="15" fill="rgb(244,218,35)" fg:x="17118" fg:w="72"/><text x="25.5860%" y="382.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (74 samples, 0.11%)</title><rect x="25.3360%" y="356" width="0.1095%" height="15" fill="rgb(240,68,47)" fg:x="17118" fg:w="74"/><text x="25.5860%" y="366.50"></text></g><g><title>_create_curves (src/dycov/dynawo/dynawo.py:441) (133 samples, 0.20%)</title><rect x="25.2516%" y="292" width="0.1969%" height="15" fill="rgb(210,16,53)" fg:x="17061" fg:w="133"/><text x="25.5016%" y="302.50"></text></g><g><title>_translate_curves (src/dycov/dynawo/dynawo.py:386) (77 samples, 0.11%)</title><rect x="25.3345%" y="308" width="0.1140%" height="15" fill="rgb(235,124,12)" fg:x="17117" fg:w="77"/><text x="25.5845%" y="318.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (77 samples, 0.11%)</title><rect x="25.3345%" y="324" width="0.1140%" height="15" fill="rgb(224,169,11)" fg:x="17117" fg:w="77"/><text x="25.5845%" y="334.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (77 samples, 0.11%)</title><rect x="25.3345%" y="340" width="0.1140%" height="15" fill="rgb(250,166,2)" fg:x="17117" fg:w="77"/><text x="25.5845%" y="350.50"></text></g><g><title>__simulate (src/dycov/dynawo/curves.py:544) (11,336 samples, 16.78%)</title><rect x="8.8583%" y="244" width="16.7782%" height="15" fill="rgb(242,216,29)" fg:x="5985" fg:w="11336"/><text x="9.1083%" y="254.50">__simulate (src/dycov/dynaw..</text></g><g><title>__execute_dynawo (src/dycov/dynawo/curves.py:692) (11,336 samples, 16.78%)</title><rect x="8.8583%" y="260" width="16.7782%" height="15" fill="rgb(230,116,27)" fg:x="5985" fg:w="11336"/><text x="9.1083%" y="270.50">__execute_dynawo (src/dycov..</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:645) (350 samples, 0.52%)</title><rect x="25.1184%" y="276" width="0.5180%" height="15" fill="rgb(228,99,48)" fg:x="16971" fg:w="350"/><text x="25.3684%" y="286.50"></text></g><g><title>_internal_poll (subprocess.py:1889) (131 samples, 0.19%)</title><rect x="25.9014%" y="324" width="0.1939%" height="15" fill="rgb(253,11,6)" fg:x="17500" fg:w="131"/><text x="26.1514%" y="334.50"></text></g><g><title>_internal_poll (subprocess.py:1896) (8,432 samples, 12.48%)</title><rect x="26.1707%" y="324" width="12.4800%" height="15" fill="rgb(247,143,39)" fg:x="17682" fg:w="8432"/><text x="26.4207%" y="334.50">_internal_poll (sub..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:184) (8,895 samples, 13.17%)</title><rect x="25.6379%" y="292" width="13.1653%" height="15" fill="rgb(236,97,10)" fg:x="17322" fg:w="8895"/><text x="25.8879%" y="302.50">_run_dynawo (src/dgc..</text></g><g><title>poll (subprocess.py:1181) (8,789 samples, 13.01%)</title><rect x="25.7948%" y="308" width="13.0084%" height="15" fill="rgb(233,208,19)" fg:x="17428" fg:w="8789"/><text x="26.0448%" y="318.50">poll (subprocess.py:..</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:629) (8,996 samples, 13.31%)</title><rect x="25.6379%" y="276" width="13.3148%" height="15" fill="rgb(216,164,2)" fg:x="17322" fg:w="8996"/><text x="25.8879%" y="286.50">run_base_dynawo (src..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:185) (101 samples, 0.15%)</title><rect x="38.8032%" y="292" width="0.1495%" height="15" fill="rgb(220,129,5)" fg:x="26217" fg:w="101"/><text x="39.0532%" y="302.50"></text></g><g><title>__simulate (src/dycov/dynawo/curves.py:581) (9,006 samples, 13.33%)</title><rect x="25.6379%" y="244" width="13.3296%" height="15" fill="rgb(242,17,10)" fg:x="17322" fg:w="9006"/><text x="25.8879%" y="254.50">__simulate (src/dycov..</text></g><g><title>__execute_dynawo (src/dycov/dynawo/curves.py:692) (9,006 samples, 13.33%)</title><rect x="25.6379%" y="260" width="13.3296%" height="15" fill="rgb(242,107,0)" fg:x="17322" fg:w="9006"/><text x="25.8879%" y="270.50">__execute_dynawo (sr..</text></g><g><title>_internal_poll (subprocess.py:1889) (98 samples, 0.15%)</title><rect x="39.2058%" y="324" width="0.1450%" height="15" fill="rgb(251,28,31)" fg:x="26489" fg:w="98"/><text x="39.4558%" y="334.50"></text></g><g><title>_internal_poll (subprocess.py:1896) (8,359 samples, 12.37%)</title><rect x="39.3982%" y="324" width="12.3720%" height="15" fill="rgb(233,223,10)" fg:x="26619" fg:w="8359"/><text x="39.6482%" y="334.50">_internal_poll (su..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:184) (8,757 samples, 12.96%)</title><rect x="38.9675%" y="292" width="12.9610%" height="15" fill="rgb(215,21,27)" fg:x="26328" fg:w="8757"/><text x="39.2175%" y="302.50">_run_dynawo (src/dg..</text></g><g><title>poll (subprocess.py:1181) (8,670 samples, 12.83%)</title><rect x="39.0963%" y="308" width="12.8323%" height="15" fill="rgb(232,23,21)" fg:x="26415" fg:w="8670"/><text x="39.3463%" y="318.50">poll (subprocess.py..</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:629) (8,849 samples, 13.10%)</title><rect x="38.9675%" y="276" width="13.0972%" height="15" fill="rgb(244,5,23)" fg:x="26328" fg:w="8849"/><text x="39.2175%" y="286.50">run_base_dynawo (src..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:185) (92 samples, 0.14%)</title><rect x="51.9285%" y="292" width="0.1362%" height="15" fill="rgb(226,81,46)" fg:x="35085" fg:w="92"/><text x="52.1785%" y="302.50"></text></g><g><title>__simulate (src/dycov/dynawo/curves.py:621) (8,856 samples, 13.11%)</title><rect x="38.9675%" y="244" width="13.1076%" height="15" fill="rgb(247,70,30)" fg:x="26328" fg:w="8856"/><text x="39.2175%" y="254.50">__simulate (src/dycov..</text></g><g><title>__execute_dynawo (src/dycov/dynawo/curves.py:692) (8,856 samples, 13.11%)</title><rect x="38.9675%" y="260" width="13.1076%" height="15" fill="rgb(212,68,19)" fg:x="26328" fg:w="8856"/><text x="39.2175%" y="270.50">__execute_dynawo (sr..</text></g><g><title>_internal_poll (subprocess.py:1889) (100 samples, 0.15%)</title><rect x="52.3208%" y="324" width="0.1480%" height="15" fill="rgb(240,187,13)" fg:x="35350" fg:w="100"/><text x="52.5708%" y="334.50"></text></g><g><title>_internal_poll (subprocess.py:1896) (8,277 samples, 12.25%)</title><rect x="52.5235%" y="324" width="12.2506%" height="15" fill="rgb(223,113,26)" fg:x="35487" fg:w="8277"/><text x="52.7735%" y="334.50">_internal_poll (su..</text></g><g><title>_run_dynawo (src/dycov/dynawo/dynawo.py:184) (8,675 samples, 12.84%)</title><rect x="52.0751%" y="292" width="12.8397%" height="15" fill="rgb(206,192,2)" fg:x="35184" fg:w="8675"/><text x="52.3251%" y="302.50">_run_dynawo (src/dg..</text></g><g><title>poll (subprocess.py:1181) (8,590 samples, 12.71%)</title><rect x="52.2009%" y="308" width="12.7139%" height="15" fill="rgb(241,108,4)" fg:x="35269" fg:w="8590"/><text x="52.4509%" y="318.50">poll (subprocess.py..</text></g><g><title>run_base_dynawo (src/dycov/dynawo/dynawo.py:629) (8,739 samples, 12.93%)</title><rect x="52.0751%" y="276" width="12.9344%" height="15" fill="rgb(247,173,49)" fg:x="35184" fg:w="8739"/><text x="52.3251%" y="286.50">run_base_dynawo (sr..</text></g><g><title>__simulate (src/dycov/dynawo/curves.py:663) (8,746 samples, 12.94%)</title><rect x="52.0751%" y="244" width="12.9448%" height="15" fill="rgb(224,114,35)" fg:x="35184" fg:w="8746"/><text x="52.3251%" y="254.50">__simulate (src/dgc..</text></g><g><title>__execute_dynawo (src/dycov/dynawo/curves.py:692) (8,746 samples, 12.94%)</title><rect x="52.0751%" y="260" width="12.9448%" height="15" fill="rgb(245,159,27)" fg:x="35184" fg:w="8746"/><text x="52.3251%" y="270.50">__execute_dynawo (s..</text></g><g><title>__obtain_curve (src/dycov/curves/manager.py:109) (43,770 samples, 64.78%)</title><rect x="0.2383%" y="212" width="64.7830%" height="15" fill="rgb(245,172,44)" fg:x="161" fg:w="43770"/><text x="0.4883%" y="222.50">__obtain_curve (src/dycov/curves/manager.py:109)</text></g><g><title>obtain_simulated_curve (src/dycov/dynawo/curves.py:1167) (37,946 samples, 56.16%)</title><rect x="8.8583%" y="228" width="56.1630%" height="15" fill="rgb(236,23,11)" fg:x="5985" fg:w="37946"/><text x="9.1083%" y="238.50">obtain_simulated_curve (src/dycov/dynawo/curves.py:1167)</text></g><g><title>copy_base_curves_files (src/dycov/files/manage_files.py:318) (86 samples, 0.13%)</title><rect x="65.0317%" y="260" width="0.1273%" height="15" fill="rgb(205,117,38)" fg:x="43938" fg:w="86"/><text x="65.2817%" y="270.50"></text></g><g><title>copy (shutil.py:417) (86 samples, 0.13%)</title><rect x="65.0317%" y="276" width="0.1273%" height="15" fill="rgb(237,72,25)" fg:x="43938" fg:w="86"/><text x="65.2817%" y="286.50"></text></g><g><title>copyfile (shutil.py:267) (85 samples, 0.13%)</title><rect x="65.0332%" y="292" width="0.1258%" height="15" fill="rgb(244,70,9)" fg:x="43939" fg:w="85"/><text x="65.2832%" y="302.50"></text></g><g><title>_fastcopy_sendfile (shutil.py:143) (85 samples, 0.13%)</title><rect x="65.0332%" y="308" width="0.1258%" height="15" fill="rgb(217,125,39)" fg:x="43939" fg:w="85"/><text x="65.2832%" y="318.50"></text></g><g><title>__obtain_files_curve (src/dycov/curves/importer/curves.py:123) (110 samples, 0.16%)</title><rect x="65.0243%" y="244" width="0.1628%" height="15" fill="rgb(235,36,10)" fg:x="43933" fg:w="110"/><text x="65.2743%" y="254.50"></text></g><g><title>read (pandas/io/parsers/c_parser_wrapper.py:234) (177 samples, 0.26%)</title><rect x="65.2344%" y="356" width="0.2620%" height="15" fill="rgb(251,123,47)" fg:x="44075" fg:w="177"/><text x="65.4844%" y="366.50"></text></g><g><title>read (pandas/io/parsers/readers.py:1923) (178 samples, 0.26%)</title><rect x="65.2344%" y="340" width="0.2635%" height="15" fill="rgb(221,13,13)" fg:x="44075" fg:w="178"/><text x="65.4844%" y="350.50"></text></g><g><title>load (src/dycov/curves/importer/reader.py:239) (196 samples, 0.29%)</title><rect x="65.2137%" y="292" width="0.2901%" height="15" fill="rgb(238,131,9)" fg:x="44061" fg:w="196"/><text x="65.4637%" y="302.50"></text></g><g><title>read_csv (pandas/io/parsers/readers.py:1026) (196 samples, 0.29%)</title><rect x="65.2137%" y="308" width="0.2901%" height="15" fill="rgb(211,50,8)" fg:x="44061" fg:w="196"/><text x="65.4637%" y="318.50"></text></g><g><title>_read (pandas/io/parsers/readers.py:626) (182 samples, 0.27%)</title><rect x="65.2344%" y="324" width="0.2694%" height="15" fill="rgb(245,182,24)" fg:x="44075" fg:w="182"/><text x="65.4844%" y="334.50"></text></g><g><title>get_curves_dataframe (src/dycov/curves/importer/importer.py:141) (202 samples, 0.30%)</title><rect x="65.2137%" y="276" width="0.2990%" height="15" fill="rgb(242,14,37)" fg:x="44061" fg:w="202"/><text x="65.4637%" y="286.50"></text></g><g><title>__obtain_files_curve (src/dycov/curves/importer/curves.py:127) (226 samples, 0.33%)</title><rect x="65.1871%" y="244" width="0.3345%" height="15" fill="rgb(246,228,12)" fg:x="44043" fg:w="226"/><text x="65.4371%" y="254.50"></text></g><g><title>__get_curves_dataframe (src/dycov/curves/importer/curves.py:72) (217 samples, 0.32%)</title><rect x="65.2004%" y="260" width="0.3212%" height="15" fill="rgb(213,55,15)" fg:x="44052" fg:w="217"/><text x="65.4504%" y="270.50"></text></g><g><title>has_required_curves (src/dycov/curves/manager.py:223) (44,109 samples, 65.28%)</title><rect x="0.2383%" y="196" width="65.2848%" height="15" fill="rgb(209,9,3)" fg:x="161" fg:w="44109"/><text x="0.4883%" y="206.50">has_required_curves (src/dycov/curves/manager.py:223)</text></g><g><title>__obtain_curve (src/dycov/curves/manager.py:98) (337 samples, 0.50%)</title><rect x="65.0243%" y="212" width="0.4988%" height="15" fill="rgb(230,59,30)" fg:x="43933" fg:w="337"/><text x="65.2743%" y="222.50"></text></g><g><title>obtain_reference_curve (src/dycov/curves/importer/curves.py:200) (337 samples, 0.50%)</title><rect x="65.0243%" y="228" width="0.4988%" height="15" fill="rgb(209,121,21)" fg:x="43933" fg:w="337"/><text x="65.2743%" y="238.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (994 samples, 1.47%)</title><rect x="65.5364%" y="404" width="1.4712%" height="15" fill="rgb(220,109,13)" fg:x="44279" fg:w="994"/><text x="65.7864%" y="414.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (1,041 samples, 1.54%)</title><rect x="65.5334%" y="388" width="1.5408%" height="15" fill="rgb(232,18,1)" fg:x="44277" fg:w="1041"/><text x="65.7834%" y="398.50"></text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (1,042 samples, 1.54%)</title><rect x="65.5334%" y="324" width="1.5422%" height="15" fill="rgb(215,41,42)" fg:x="44277" fg:w="1042"/><text x="65.7834%" y="334.50"></text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (1,042 samples, 1.54%)</title><rect x="65.5334%" y="340" width="1.5422%" height="15" fill="rgb(224,123,36)" fg:x="44277" fg:w="1042"/><text x="65.7834%" y="350.50"></text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (1,042 samples, 1.54%)</title><rect x="65.5334%" y="356" width="1.5422%" height="15" fill="rgb(240,125,3)" fg:x="44277" fg:w="1042"/><text x="65.7834%" y="366.50"></text></g><g><title>apply (pandas/core/internals/managers.py:363) (1,042 samples, 1.54%)</title><rect x="65.5334%" y="372" width="1.5422%" height="15" fill="rgb(205,98,50)" fg:x="44277" fg:w="1042"/><text x="65.7834%" y="382.50"></text></g><g><title>__save_curves (src/dycov/curves/manager.py:156) (1,324 samples, 1.96%)</title><rect x="65.5231%" y="212" width="1.9596%" height="15" fill="rgb(205,185,37)" fg:x="44270" fg:w="1324"/><text x="65.7731%" y="222.50">_..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (1,324 samples, 1.96%)</title><rect x="65.5231%" y="228" width="1.9596%" height="15" fill="rgb(238,207,15)" fg:x="44270" fg:w="1324"/><text x="65.7731%" y="238.50">w..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (1,324 samples, 1.96%)</title><rect x="65.5231%" y="244" width="1.9596%" height="15" fill="rgb(213,199,42)" fg:x="44270" fg:w="1324"/><text x="65.7731%" y="254.50">t..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (1,324 samples, 1.96%)</title><rect x="65.5231%" y="260" width="1.9596%" height="15" fill="rgb(235,201,11)" fg:x="44270" fg:w="1324"/><text x="65.7731%" y="270.50">t..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (1,322 samples, 1.96%)</title><rect x="65.5260%" y="276" width="1.9567%" height="15" fill="rgb(207,46,11)" fg:x="44272" fg:w="1322"/><text x="65.7760%" y="286.50">s..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (1,321 samples, 1.96%)</title><rect x="65.5275%" y="292" width="1.9552%" height="15" fill="rgb(241,35,35)" fg:x="44273" fg:w="1321"/><text x="65.7775%" y="302.50">_..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (1,321 samples, 1.96%)</title><rect x="65.5275%" y="308" width="1.9552%" height="15" fill="rgb(243,32,47)" fg:x="44273" fg:w="1321"/><text x="65.7775%" y="318.50">_..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (273 samples, 0.40%)</title><rect x="67.0786%" y="324" width="0.4041%" height="15" fill="rgb(247,202,23)" fg:x="45321" fg:w="273"/><text x="67.3286%" y="334.50"></text></g><g><title>get_values_for_csv (pandas/core/indexes/base.py:7834) (1,218 samples, 1.80%)</title><rect x="67.5138%" y="404" width="1.8027%" height="15" fill="rgb(219,102,11)" fg:x="45615" fg:w="1218"/><text x="67.7638%" y="414.50">g..</text></g><g><title>get_values_for_csv (pandas/core/internals/blocks.py:780) (1,252 samples, 1.85%)</title><rect x="67.5123%" y="388" width="1.8531%" height="15" fill="rgb(243,110,44)" fg:x="45614" fg:w="1252"/><text x="67.7623%" y="398.50">g..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:320) (1,253 samples, 1.85%)</title><rect x="67.5123%" y="324" width="1.8545%" height="15" fill="rgb(222,74,54)" fg:x="45614" fg:w="1253"/><text x="67.7623%" y="334.50">_..</text></g><g><title>_get_values_for_csv (pandas/core/frame.py:1410) (1,253 samples, 1.85%)</title><rect x="67.5123%" y="340" width="1.8545%" height="15" fill="rgb(216,99,12)" fg:x="45614" fg:w="1253"/><text x="67.7623%" y="350.50">_..</text></g><g><title>get_values_for_csv (pandas/core/internals/managers.py:466) (1,253 samples, 1.85%)</title><rect x="67.5123%" y="356" width="1.8545%" height="15" fill="rgb(226,22,26)" fg:x="45614" fg:w="1253"/><text x="67.7623%" y="366.50">g..</text></g><g><title>apply (pandas/core/internals/managers.py:363) (1,253 samples, 1.85%)</title><rect x="67.5123%" y="372" width="1.8545%" height="15" fill="rgb(217,163,10)" fg:x="45614" fg:w="1253"/><text x="67.7623%" y="382.50">a..</text></g><g><title>validate (src/dycov/model/benchmark.py:556) (47,040 samples, 69.62%)</title><rect x="0.2383%" y="164" width="69.6229%" height="15" fill="rgb(213,25,53)" fg:x="161" fg:w="47040"/><text x="0.4883%" y="174.50">validate (src/dycov/model/benchmark.py:556)</text></g><g><title>__has_required_curves (src/dycov/model/benchmark.py:471) (47,040 samples, 69.62%)</title><rect x="0.2383%" y="180" width="69.6229%" height="15" fill="rgb(252,105,26)" fg:x="161" fg:w="47040"/><text x="0.4883%" y="190.50">__has_required_curves (src/dycov/model/benchmark.py:471)</text></g><g><title>has_required_curves (src/dycov/curves/manager.py:255) (2,931 samples, 4.34%)</title><rect x="65.5231%" y="196" width="4.3381%" height="15" fill="rgb(220,39,43)" fg:x="44270" fg:w="2931"/><text x="65.7731%" y="206.50">has_r..</text></g><g><title>__save_curves (src/dycov/curves/manager.py:158) (1,607 samples, 2.38%)</title><rect x="67.4827%" y="212" width="2.3785%" height="15" fill="rgb(229,68,48)" fg:x="45594" fg:w="1607"/><text x="67.7327%" y="222.50">__..</text></g><g><title>wrapper (pandas/util/_decorators.py:333) (1,607 samples, 2.38%)</title><rect x="67.4827%" y="228" width="2.3785%" height="15" fill="rgb(252,8,32)" fg:x="45594" fg:w="1607"/><text x="67.7327%" y="238.50">wr..</text></g><g><title>to_csv (pandas/core/generic.py:3967) (1,607 samples, 2.38%)</title><rect x="67.4827%" y="244" width="2.3785%" height="15" fill="rgb(223,20,43)" fg:x="45594" fg:w="1607"/><text x="67.7327%" y="254.50">to..</text></g><g><title>to_csv (pandas/io/formats/format.py:1014) (1,607 samples, 2.38%)</title><rect x="67.4827%" y="260" width="2.3785%" height="15" fill="rgb(229,81,49)" fg:x="45594" fg:w="1607"/><text x="67.7327%" y="270.50">to..</text></g><g><title>save (pandas/io/formats/csvs.py:270) (1,606 samples, 2.38%)</title><rect x="67.4842%" y="276" width="2.3770%" height="15" fill="rgb(236,28,36)" fg:x="45595" fg:w="1606"/><text x="67.7342%" y="286.50">sa..</text></g><g><title>_save (pandas/io/formats/csvs.py:275) (1,606 samples, 2.38%)</title><rect x="67.4842%" y="292" width="2.3770%" height="15" fill="rgb(249,185,26)" fg:x="45595" fg:w="1606"/><text x="67.7342%" y="302.50">_s..</text></g><g><title>_save_body (pandas/io/formats/csvs.py:313) (1,606 samples, 2.38%)</title><rect x="67.4842%" y="308" width="2.3770%" height="15" fill="rgb(249,174,33)" fg:x="45595" fg:w="1606"/><text x="67.7342%" y="318.50">_s..</text></g><g><title>_save_chunk (pandas/io/formats/csvs.py:324) (331 samples, 0.49%)</title><rect x="69.3713%" y="324" width="0.4899%" height="15" fill="rgb(233,201,37)" fg:x="46870" fg:w="331"/><text x="69.6213%" y="334.50"></text></g><g><title>resample_to_fixed_step (src/dycov/sigpro/sigpro.py:96) (78 samples, 0.12%)</title><rect x="69.9041%" y="260" width="0.1154%" height="15" fill="rgb(221,78,26)" fg:x="47230" fg:w="78"/><text x="70.1541%" y="270.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1153) (68 samples, 0.10%)</title><rect x="69.9189%" y="276" width="0.1006%" height="15" fill="rgb(250,127,30)" fg:x="47240" fg:w="68"/><text x="70.1689%" y="286.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:788) (170 samples, 0.25%)</title><rect x="70.0210%" y="276" width="0.2516%" height="15" fill="rgb(230,49,44)" fg:x="47309" fg:w="170"/><text x="70.2710%" y="286.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:859) (170 samples, 0.25%)</title><rect x="70.0210%" y="292" width="0.2516%" height="15" fill="rgb(229,67,23)" fg:x="47309" fg:w="170"/><text x="70.2710%" y="302.50"></text></g><g><title>resample_to_fixed_step (src/dycov/sigpro/sigpro.py:97) (229 samples, 0.34%)</title><rect x="70.0195%" y="260" width="0.3389%" height="15" fill="rgb(249,83,47)" fg:x="47308" fg:w="229"/><text x="70.2695%" y="270.50"></text></g><g><title>apply_signal_processing (src/dycov/curves/manager.py:322) (325 samples, 0.48%)</title><rect x="69.9011%" y="244" width="0.4810%" height="15" fill="rgb(215,43,3)" fg:x="47228" fg:w="325"/><text x="70.1511%" y="254.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:788) (119 samples, 0.18%)</title><rect x="70.4798%" y="276" width="0.1761%" height="15" fill="rgb(238,154,13)" fg:x="47619" fg:w="119"/><text x="70.7298%" y="286.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:859) (118 samples, 0.17%)</title><rect x="70.4813%" y="292" width="0.1746%" height="15" fill="rgb(219,56,2)" fg:x="47620" fg:w="118"/><text x="70.7313%" y="302.50"></text></g><g><title>resample_to_fixed_step (src/dycov/sigpro/sigpro.py:97) (173 samples, 0.26%)</title><rect x="70.4769%" y="260" width="0.2561%" height="15" fill="rgb(233,0,4)" fg:x="47617" fg:w="173"/><text x="70.7269%" y="270.50"></text></g><g><title>apply_signal_processing (src/dycov/curves/manager.py:323) (244 samples, 0.36%)</title><rect x="70.3822%" y="244" width="0.3611%" height="15" fill="rgb(235,30,7)" fg:x="47553" fg:w="244"/><text x="70.6322%" y="254.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:217) (627 samples, 0.93%)</title><rect x="70.9771%" y="260" width="0.9280%" height="15" fill="rgb(250,79,13)" fg:x="47955" fg:w="627"/><text x="71.2271%" y="270.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:218) (452 samples, 0.67%)</title><rect x="71.9052%" y="260" width="0.6690%" height="15" fill="rgb(211,146,34)" fg:x="48582" fg:w="452"/><text x="72.1552%" y="270.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (176 samples, 0.26%)</title><rect x="72.5756%" y="324" width="0.2605%" height="15" fill="rgb(228,22,38)" fg:x="49035" fg:w="176"/><text x="72.8256%" y="334.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:188) (178 samples, 0.26%)</title><rect x="72.5742%" y="276" width="0.2635%" height="15" fill="rgb(235,168,5)" fg:x="49034" fg:w="178"/><text x="72.8242%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (177 samples, 0.26%)</title><rect x="72.5756%" y="292" width="0.2620%" height="15" fill="rgb(221,155,16)" fg:x="49035" fg:w="177"/><text x="72.8256%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (177 samples, 0.26%)</title><rect x="72.5756%" y="308" width="0.2620%" height="15" fill="rgb(215,215,53)" fg:x="49035" fg:w="177"/><text x="72.8256%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (184 samples, 0.27%)</title><rect x="72.8376%" y="324" width="0.2723%" height="15" fill="rgb(223,4,10)" fg:x="49212" fg:w="184"/><text x="73.0876%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:229) (365 samples, 0.54%)</title><rect x="72.5742%" y="260" width="0.5402%" height="15" fill="rgb(234,103,6)" fg:x="49034" fg:w="365"/><text x="72.8242%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:189) (187 samples, 0.28%)</title><rect x="72.8376%" y="276" width="0.2768%" height="15" fill="rgb(227,97,0)" fg:x="49212" fg:w="187"/><text x="73.0876%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (187 samples, 0.28%)</title><rect x="72.8376%" y="292" width="0.2768%" height="15" fill="rgb(234,150,53)" fg:x="49212" fg:w="187"/><text x="73.0876%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (187 samples, 0.28%)</title><rect x="72.8376%" y="308" width="0.2768%" height="15" fill="rgb(228,201,54)" fg:x="49212" fg:w="187"/><text x="73.0876%" y="318.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:230) (114 samples, 0.17%)</title><rect x="73.1144%" y="260" width="0.1687%" height="15" fill="rgb(222,22,37)" fg:x="49399" fg:w="114"/><text x="73.3644%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:188) (79 samples, 0.12%)</title><rect x="73.2831%" y="276" width="0.1169%" height="15" fill="rgb(237,53,32)" fg:x="49513" fg:w="79"/><text x="73.5331%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (79 samples, 0.12%)</title><rect x="73.2831%" y="292" width="0.1169%" height="15" fill="rgb(233,25,53)" fg:x="49513" fg:w="79"/><text x="73.5331%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (79 samples, 0.12%)</title><rect x="73.2831%" y="308" width="0.1169%" height="15" fill="rgb(210,40,34)" fg:x="49513" fg:w="79"/><text x="73.5331%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (79 samples, 0.12%)</title><rect x="73.2831%" y="324" width="0.1169%" height="15" fill="rgb(241,220,44)" fg:x="49513" fg:w="79"/><text x="73.5331%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:234) (141 samples, 0.21%)</title><rect x="73.2831%" y="260" width="0.2087%" height="15" fill="rgb(235,28,35)" fg:x="49513" fg:w="141"/><text x="73.5331%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:188) (188 samples, 0.28%)</title><rect x="73.5258%" y="276" width="0.2783%" height="15" fill="rgb(210,56,17)" fg:x="49677" fg:w="188"/><text x="73.7758%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (188 samples, 0.28%)</title><rect x="73.5258%" y="292" width="0.2783%" height="15" fill="rgb(224,130,29)" fg:x="49677" fg:w="188"/><text x="73.7758%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (188 samples, 0.28%)</title><rect x="73.5258%" y="308" width="0.2783%" height="15" fill="rgb(235,212,8)" fg:x="49677" fg:w="188"/><text x="73.7758%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (188 samples, 0.28%)</title><rect x="73.5258%" y="324" width="0.2783%" height="15" fill="rgb(223,33,50)" fg:x="49677" fg:w="188"/><text x="73.7758%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:240) (364 samples, 0.54%)</title><rect x="73.5258%" y="260" width="0.5387%" height="15" fill="rgb(219,149,13)" fg:x="49677" fg:w="364"/><text x="73.7758%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:189) (176 samples, 0.26%)</title><rect x="73.8041%" y="276" width="0.2605%" height="15" fill="rgb(250,156,29)" fg:x="49865" fg:w="176"/><text x="74.0541%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (176 samples, 0.26%)</title><rect x="73.8041%" y="292" width="0.2605%" height="15" fill="rgb(216,193,19)" fg:x="49865" fg:w="176"/><text x="74.0541%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (176 samples, 0.26%)</title><rect x="73.8041%" y="308" width="0.2605%" height="15" fill="rgb(216,135,14)" fg:x="49865" fg:w="176"/><text x="74.0541%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (175 samples, 0.26%)</title><rect x="73.8056%" y="324" width="0.2590%" height="15" fill="rgb(241,47,5)" fg:x="49866" fg:w="175"/><text x="74.0556%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:241) (151 samples, 0.22%)</title><rect x="74.0646%" y="260" width="0.2235%" height="15" fill="rgb(233,42,35)" fg:x="50041" fg:w="151"/><text x="74.3146%" y="270.50"></text></g><g><title>lowpass_filter (src/dycov/sigpro/sigpro.py:184) (110 samples, 0.16%)</title><rect x="74.1253%" y="276" width="0.1628%" height="15" fill="rgb(231,13,6)" fg:x="50082" fg:w="110"/><text x="74.3753%" y="286.50"></text></g><g><title>apply_filtfilt (src/dycov/sigpro/lp_filters.py:41) (90 samples, 0.13%)</title><rect x="74.1549%" y="292" width="0.1332%" height="15" fill="rgb(207,181,40)" fg:x="50102" fg:w="90"/><text x="74.4049%" y="302.50"></text></g><g><title>filtfilt (scipy/signal/_signaltools.py:4521) (86 samples, 0.13%)</title><rect x="74.1608%" y="308" width="0.1273%" height="15" fill="rgb(254,173,49)" fg:x="50106" fg:w="86"/><text x="74.4108%" y="318.50"></text></g><g><title>apply_signal_processing (src/dycov/curves/manager.py:340) (2,313 samples, 3.42%)</title><rect x="70.9031%" y="244" width="3.4234%" height="15" fill="rgb(221,1,38)" fg:x="47905" fg:w="2313"/><text x="71.1531%" y="254.50">app..</text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:217) (616 samples, 0.91%)</title><rect x="74.3798%" y="260" width="0.9117%" height="15" fill="rgb(206,124,46)" fg:x="50254" fg:w="616"/><text x="74.6298%" y="270.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:218) (352 samples, 0.52%)</title><rect x="75.2916%" y="260" width="0.5210%" height="15" fill="rgb(249,21,11)" fg:x="50870" fg:w="352"/><text x="75.5416%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:188) (212 samples, 0.31%)</title><rect x="75.8170%" y="276" width="0.3138%" height="15" fill="rgb(222,201,40)" fg:x="51225" fg:w="212"/><text x="76.0670%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (212 samples, 0.31%)</title><rect x="75.8170%" y="292" width="0.3138%" height="15" fill="rgb(235,61,29)" fg:x="51225" fg:w="212"/><text x="76.0670%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (212 samples, 0.31%)</title><rect x="75.8170%" y="308" width="0.3138%" height="15" fill="rgb(219,207,3)" fg:x="51225" fg:w="212"/><text x="76.0670%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (212 samples, 0.31%)</title><rect x="75.8170%" y="324" width="0.3138%" height="15" fill="rgb(222,56,46)" fg:x="51225" fg:w="212"/><text x="76.0670%" y="334.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (247 samples, 0.37%)</title><rect x="76.1323%" y="324" width="0.3656%" height="15" fill="rgb(239,76,54)" fg:x="51438" fg:w="247"/><text x="76.3823%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:229) (461 samples, 0.68%)</title><rect x="75.8170%" y="260" width="0.6823%" height="15" fill="rgb(231,124,27)" fg:x="51225" fg:w="461"/><text x="76.0670%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:189) (249 samples, 0.37%)</title><rect x="76.1308%" y="276" width="0.3685%" height="15" fill="rgb(249,195,6)" fg:x="51437" fg:w="249"/><text x="76.3808%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (249 samples, 0.37%)</title><rect x="76.1308%" y="292" width="0.3685%" height="15" fill="rgb(237,174,47)" fg:x="51437" fg:w="249"/><text x="76.3808%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (248 samples, 0.37%)</title><rect x="76.1323%" y="308" width="0.3671%" height="15" fill="rgb(206,201,31)" fg:x="51438" fg:w="248"/><text x="76.3823%" y="318.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:230) (120 samples, 0.18%)</title><rect x="76.4993%" y="260" width="0.1776%" height="15" fill="rgb(231,57,52)" fg:x="51686" fg:w="120"/><text x="76.7493%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:188) (101 samples, 0.15%)</title><rect x="76.6784%" y="276" width="0.1495%" height="15" fill="rgb(248,177,22)" fg:x="51807" fg:w="101"/><text x="76.9284%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (100 samples, 0.15%)</title><rect x="76.6799%" y="292" width="0.1480%" height="15" fill="rgb(215,211,37)" fg:x="51808" fg:w="100"/><text x="76.9299%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (100 samples, 0.15%)</title><rect x="76.6799%" y="308" width="0.1480%" height="15" fill="rgb(241,128,51)" fg:x="51808" fg:w="100"/><text x="76.9299%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (100 samples, 0.15%)</title><rect x="76.6799%" y="324" width="0.1480%" height="15" fill="rgb(227,165,31)" fg:x="51808" fg:w="100"/><text x="76.9299%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:234) (193 samples, 0.29%)</title><rect x="76.6784%" y="260" width="0.2857%" height="15" fill="rgb(228,167,24)" fg:x="51807" fg:w="193"/><text x="76.9284%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:189) (92 samples, 0.14%)</title><rect x="76.8279%" y="276" width="0.1362%" height="15" fill="rgb(228,143,12)" fg:x="51908" fg:w="92"/><text x="77.0779%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (92 samples, 0.14%)</title><rect x="76.8279%" y="292" width="0.1362%" height="15" fill="rgb(249,149,8)" fg:x="51908" fg:w="92"/><text x="77.0779%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (92 samples, 0.14%)</title><rect x="76.8279%" y="308" width="0.1362%" height="15" fill="rgb(243,35,44)" fg:x="51908" fg:w="92"/><text x="77.0779%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (91 samples, 0.13%)</title><rect x="76.8294%" y="324" width="0.1347%" height="15" fill="rgb(246,89,9)" fg:x="51909" fg:w="91"/><text x="77.0794%" y="334.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (234 samples, 0.35%)</title><rect x="77.0173%" y="324" width="0.3463%" height="15" fill="rgb(233,213,13)" fg:x="52036" fg:w="234"/><text x="77.2673%" y="334.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:188) (240 samples, 0.36%)</title><rect x="77.0144%" y="276" width="0.3552%" height="15" fill="rgb(233,141,41)" fg:x="52034" fg:w="240"/><text x="77.2644%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (239 samples, 0.35%)</title><rect x="77.0159%" y="292" width="0.3537%" height="15" fill="rgb(239,167,4)" fg:x="52035" fg:w="239"/><text x="77.2659%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (238 samples, 0.35%)</title><rect x="77.0173%" y="308" width="0.3523%" height="15" fill="rgb(209,217,16)" fg:x="52036" fg:w="238"/><text x="77.2673%" y="318.50"></text></g><g><title>_wrapit (numpy/_core/fromnumeric.py:42) (270 samples, 0.40%)</title><rect x="77.3696%" y="324" width="0.3996%" height="15" fill="rgb(219,88,35)" fg:x="52274" fg:w="270"/><text x="77.6196%" y="334.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:240) (512 samples, 0.76%)</title><rect x="77.0144%" y="260" width="0.7578%" height="15" fill="rgb(220,193,23)" fg:x="52034" fg:w="512"/><text x="77.2644%" y="270.50"></text></g><g><title>get_time_positions (src/dycov/sigpro/sigpro.py:189) (272 samples, 0.40%)</title><rect x="77.3696%" y="276" width="0.4026%" height="15" fill="rgb(230,90,52)" fg:x="52274" fg:w="272"/><text x="77.6196%" y="286.50"></text></g><g><title>searchsorted (numpy/_core/fromnumeric.py:1527) (272 samples, 0.40%)</title><rect x="77.3696%" y="292" width="0.4026%" height="15" fill="rgb(252,106,19)" fg:x="52274" fg:w="272"/><text x="77.6196%" y="302.50"></text></g><g><title>_wrapfunc (numpy/_core/fromnumeric.py:54) (272 samples, 0.40%)</title><rect x="77.3696%" y="308" width="0.4026%" height="15" fill="rgb(206,74,20)" fg:x="52274" fg:w="272"/><text x="77.6196%" y="318.50"></text></g><g><title>filter_curves (src/dycov/sigpro/sigpro.py:241) (197 samples, 0.29%)</title><rect x="77.7722%" y="260" width="0.2916%" height="15" fill="rgb(230,138,44)" fg:x="52546" fg:w="197"/><text x="78.0222%" y="270.50"></text></g><g><title>lowpass_filter (src/dycov/sigpro/sigpro.py:184) (129 samples, 0.19%)</title><rect x="77.8728%" y="276" width="0.1909%" height="15" fill="rgb(235,182,43)" fg:x="52614" fg:w="129"/><text x="78.1228%" y="286.50"></text></g><g><title>apply_filtfilt (src/dycov/sigpro/lp_filters.py:41) (109 samples, 0.16%)</title><rect x="77.9024%" y="292" width="0.1613%" height="15" fill="rgb(242,16,51)" fg:x="52634" fg:w="109"/><text x="78.1524%" y="302.50"></text></g><g><title>filtfilt (scipy/signal/_signaltools.py:4521) (103 samples, 0.15%)</title><rect x="77.9113%" y="308" width="0.1524%" height="15" fill="rgb(248,9,4)" fg:x="52640" fg:w="103"/><text x="78.1613%" y="318.50"></text></g><g><title>apply_signal_processing (src/dycov/curves/manager.py:343) (2,537 samples, 3.75%)</title><rect x="74.3266%" y="244" width="3.7550%" height="15" fill="rgb(210,31,22)" fg:x="50218" fg:w="2537"/><text x="74.5766%" y="254.50">appl..</text></g><g><title>_getitem_iterable (pandas/core/indexing.py:1360) (69 samples, 0.10%)</title><rect x="78.1185%" y="340" width="0.1021%" height="15" fill="rgb(239,54,39)" fg:x="52780" fg:w="69"/><text x="78.3685%" y="350.50"></text></g><g><title>_get_listlike_indexer (pandas/core/indexing.py:1558) (69 samples, 0.10%)</title><rect x="78.1185%" y="356" width="0.1021%" height="15" fill="rgb(230,99,41)" fg:x="52780" fg:w="69"/><text x="78.3685%" y="366.50"></text></g><g><title>resample_to_common_tgrid (src/dycov/sigpro/sigpro.py:132) (118 samples, 0.17%)</title><rect x="78.0978%" y="260" width="0.1746%" height="15" fill="rgb(253,106,12)" fg:x="52766" fg:w="118"/><text x="78.3478%" y="270.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1153) (109 samples, 0.16%)</title><rect x="78.1111%" y="276" width="0.1613%" height="15" fill="rgb(213,46,41)" fg:x="52775" fg:w="109"/><text x="78.3611%" y="286.50"></text></g><g><title>_get_with (pandas/core/series.py:1180) (105 samples, 0.16%)</title><rect x="78.1170%" y="292" width="0.1554%" height="15" fill="rgb(215,133,35)" fg:x="52779" fg:w="105"/><text x="78.3670%" y="302.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1191) (104 samples, 0.15%)</title><rect x="78.1185%" y="308" width="0.1539%" height="15" fill="rgb(213,28,5)" fg:x="52780" fg:w="104"/><text x="78.3685%" y="318.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1420) (104 samples, 0.15%)</title><rect x="78.1185%" y="324" width="0.1539%" height="15" fill="rgb(215,77,49)" fg:x="52780" fg:w="104"/><text x="78.3685%" y="334.50"></text></g><g><title>resample_to_common_tgrid (src/dycov/sigpro/sigpro.py:133) (82 samples, 0.12%)</title><rect x="78.2725%" y="260" width="0.1214%" height="15" fill="rgb(248,100,22)" fg:x="52884" fg:w="82"/><text x="78.5225%" y="270.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1153) (74 samples, 0.11%)</title><rect x="78.2843%" y="276" width="0.1095%" height="15" fill="rgb(208,67,9)" fg:x="52892" fg:w="74"/><text x="78.5343%" y="286.50"></text></g><g><title>_get_with (pandas/core/series.py:1180) (74 samples, 0.11%)</title><rect x="78.2843%" y="292" width="0.1095%" height="15" fill="rgb(219,133,21)" fg:x="52892" fg:w="74"/><text x="78.5343%" y="302.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1191) (74 samples, 0.11%)</title><rect x="78.2843%" y="308" width="0.1095%" height="15" fill="rgb(246,46,29)" fg:x="52892" fg:w="74"/><text x="78.5343%" y="318.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1420) (74 samples, 0.11%)</title><rect x="78.2843%" y="324" width="0.1095%" height="15" fill="rgb(246,185,52)" fg:x="52892" fg:w="74"/><text x="78.5343%" y="334.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:788) (138 samples, 0.20%)</title><rect x="78.3997%" y="276" width="0.2043%" height="15" fill="rgb(252,136,11)" fg:x="52970" fg:w="138"/><text x="78.6497%" y="286.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:859) (138 samples, 0.20%)</title><rect x="78.3997%" y="292" width="0.2043%" height="15" fill="rgb(219,138,53)" fg:x="52970" fg:w="138"/><text x="78.6497%" y="302.50"></text></g><g><title>__init__ (scipy/interpolate/_cubic.py:243) (136 samples, 0.20%)</title><rect x="78.6528%" y="276" width="0.2013%" height="15" fill="rgb(211,51,23)" fg:x="53141" fg:w="136"/><text x="78.9028%" y="286.50"></text></g><g><title>resample_to_common_tgrid (src/dycov/sigpro/sigpro.py:134) (466 samples, 0.69%)</title><rect x="78.3938%" y="260" width="0.6897%" height="15" fill="rgb(247,221,28)" fg:x="52966" fg:w="466"/><text x="78.6438%" y="270.50"></text></g><g><title>__init__ (scipy/interpolate/_cubic.py:244) (155 samples, 0.23%)</title><rect x="78.8541%" y="276" width="0.2294%" height="15" fill="rgb(251,222,45)" fg:x="53277" fg:w="155"/><text x="79.1041%" y="286.50"></text></g><g><title>__call__ (scipy/interpolate/_interpolate.py:788) (148 samples, 0.22%)</title><rect x="79.0835%" y="276" width="0.2191%" height="15" fill="rgb(217,162,53)" fg:x="53432" fg:w="148"/><text x="79.3335%" y="286.50"></text></g><g><title>_evaluate (scipy/interpolate/_interpolate.py:859) (147 samples, 0.22%)</title><rect x="79.0850%" y="292" width="0.2176%" height="15" fill="rgb(229,93,14)" fg:x="53433" fg:w="147"/><text x="79.3350%" y="302.50"></text></g><g><title>__init__ (scipy/interpolate/_cubic.py:243) (144 samples, 0.21%)</title><rect x="79.3692%" y="276" width="0.2131%" height="15" fill="rgb(209,67,49)" fg:x="53625" fg:w="144"/><text x="79.6192%" y="286.50"></text></g><g><title>resample_to_common_tgrid (src/dycov/sigpro/sigpro.py:135) (433 samples, 0.64%)</title><rect x="79.0835%" y="260" width="0.6409%" height="15" fill="rgb(213,87,29)" fg:x="53432" fg:w="433"/><text x="79.3335%" y="270.50"></text></g><g><title>__init__ (scipy/interpolate/_cubic.py:244) (96 samples, 0.14%)</title><rect x="79.5823%" y="276" width="0.1421%" height="15" fill="rgb(205,151,52)" fg:x="53769" fg:w="96"/><text x="79.8323%" y="286.50"></text></g><g><title>apply_signal_processing (src/dycov/curves/manager.py:350) (1,126 samples, 1.67%)</title><rect x="78.0815%" y="244" width="1.6666%" height="15" fill="rgb(253,215,39)" fg:x="52755" fg:w="1126"/><text x="78.3315%" y="254.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (326 samples, 0.48%)</title><rect x="79.8206%" y="260" width="0.4825%" height="15" fill="rgb(221,220,41)" fg:x="53930" fg:w="326"/><text x="80.0706%" y="270.50"></text></g><g><title>apply_signal_processing (src/dycov/curves/manager.py:367) (381 samples, 0.56%)</title><rect x="79.7481%" y="244" width="0.5639%" height="15" fill="rgb(218,133,21)" fg:x="53881" fg:w="381"/><text x="79.9981%" y="254.50"></text></g><g><title>validate (src/dycov/validation/model.py:1181) (7,066 samples, 10.46%)</title><rect x="69.8626%" y="228" width="10.4582%" height="15" fill="rgb(221,193,43)" fg:x="47202" fg:w="7066"/><text x="70.1126%" y="238.50">validate (src/d..</text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (321 samples, 0.48%)</title><rect x="80.4156%" y="292" width="0.4751%" height="15" fill="rgb(240,128,52)" fg:x="54332" fg:w="321"/><text x="80.6656%" y="302.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:444) (381 samples, 0.56%)</title><rect x="80.3357%" y="276" width="0.5639%" height="15" fill="rgb(253,114,12)" fg:x="54278" fg:w="381"/><text x="80.5857%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (217 samples, 0.32%)</title><rect x="80.9322%" y="292" width="0.3212%" height="15" fill="rgb(215,223,47)" fg:x="54681" fg:w="217"/><text x="81.1822%" y="302.50"></text></g><g><title>__calculate (src/dycov/validation/model.py:839) (632 samples, 0.94%)</title><rect x="80.3209%" y="244" width="0.9354%" height="15" fill="rgb(248,225,23)" fg:x="54268" fg:w="632"/><text x="80.5709%" y="254.50"></text></g><g><title>_get_curves_by_windows (src/dycov/core/validator.py:61) (622 samples, 0.92%)</title><rect x="80.3357%" y="260" width="0.9206%" height="15" fill="rgb(250,108,0)" fg:x="54278" fg:w="622"/><text x="80.5857%" y="270.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:446) (241 samples, 0.36%)</title><rect x="80.8996%" y="276" width="0.3567%" height="15" fill="rgb(228,208,7)" fg:x="54659" fg:w="241"/><text x="81.1496%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (190 samples, 0.28%)</title><rect x="81.3540%" y="292" width="0.2812%" height="15" fill="rgb(244,45,10)" fg:x="54966" fg:w="190"/><text x="81.6040%" y="302.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:444) (250 samples, 0.37%)</title><rect x="81.2711%" y="276" width="0.3700%" height="15" fill="rgb(207,125,25)" fg:x="54910" fg:w="250"/><text x="81.5211%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (239 samples, 0.35%)</title><rect x="81.6929%" y="292" width="0.3537%" height="15" fill="rgb(210,195,18)" fg:x="55195" fg:w="239"/><text x="81.9429%" y="302.50"></text></g><g><title>__calculate (src/dycov/validation/model.py:840) (537 samples, 0.79%)</title><rect x="81.2563%" y="244" width="0.7948%" height="15" fill="rgb(249,80,12)" fg:x="54900" fg:w="537"/><text x="81.5063%" y="254.50"></text></g><g><title>_get_curves_by_windows (src/dycov/core/validator.py:61) (527 samples, 0.78%)</title><rect x="81.2711%" y="260" width="0.7800%" height="15" fill="rgb(221,65,9)" fg:x="54910" fg:w="527"/><text x="81.5211%" y="270.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:446) (277 samples, 0.41%)</title><rect x="81.6411%" y="276" width="0.4100%" height="15" fill="rgb(235,49,36)" fg:x="55160" fg:w="277"/><text x="81.8911%" y="286.50"></text></g><g><title>_calculate_errors (src/dycov/validation/model.py:489) (85 samples, 0.13%)</title><rect x="82.0911%" y="260" width="0.1258%" height="15" fill="rgb(225,32,20)" fg:x="55464" fg:w="85"/><text x="82.3411%" y="270.50"></text></g><g><title>maximum_error (src/dycov/validation/common.py:603) (85 samples, 0.13%)</title><rect x="82.0911%" y="276" width="0.1258%" height="15" fill="rgb(215,141,46)" fg:x="55464" fg:w="85"/><text x="82.3411%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (268 samples, 0.40%)</title><rect x="82.3249%" y="292" width="0.3967%" height="15" fill="rgb(250,160,47)" fg:x="55622" fg:w="268"/><text x="82.5749%" y="302.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (159 samples, 0.24%)</title><rect x="82.7216%" y="340" width="0.2353%" height="15" fill="rgb(216,222,40)" fg:x="55890" fg:w="159"/><text x="82.9716%" y="350.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (159 samples, 0.24%)</title><rect x="82.7216%" y="356" width="0.2353%" height="15" fill="rgb(234,217,39)" fg:x="55890" fg:w="159"/><text x="82.9716%" y="366.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (148 samples, 0.22%)</title><rect x="82.7378%" y="372" width="0.2191%" height="15" fill="rgb(207,178,40)" fg:x="55901" fg:w="148"/><text x="82.9878%" y="382.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (100 samples, 0.15%)</title><rect x="82.8089%" y="388" width="0.1480%" height="15" fill="rgb(221,136,13)" fg:x="55949" fg:w="100"/><text x="83.0589%" y="398.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:444) (501 samples, 0.74%)</title><rect x="82.2183%" y="276" width="0.7415%" height="15" fill="rgb(249,199,10)" fg:x="55550" fg:w="501"/><text x="82.4683%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:210) (161 samples, 0.24%)</title><rect x="82.7216%" y="292" width="0.2383%" height="15" fill="rgb(249,222,13)" fg:x="55890" fg:w="161"/><text x="82.9716%" y="302.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (161 samples, 0.24%)</title><rect x="82.7216%" y="308" width="0.2383%" height="15" fill="rgb(244,185,38)" fg:x="55890" fg:w="161"/><text x="82.9716%" y="318.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (161 samples, 0.24%)</title><rect x="82.7216%" y="324" width="0.2383%" height="15" fill="rgb(236,202,9)" fg:x="55890" fg:w="161"/><text x="82.9716%" y="334.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (225 samples, 0.33%)</title><rect x="83.0294%" y="292" width="0.3330%" height="15" fill="rgb(250,229,37)" fg:x="56098" fg:w="225"/><text x="83.2794%" y="302.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (138 samples, 0.20%)</title><rect x="83.3772%" y="372" width="0.2043%" height="15" fill="rgb(206,174,23)" fg:x="56333" fg:w="138"/><text x="83.6272%" y="382.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (92 samples, 0.14%)</title><rect x="83.4453%" y="388" width="0.1362%" height="15" fill="rgb(211,33,43)" fg:x="56379" fg:w="92"/><text x="83.6953%" y="398.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (148 samples, 0.22%)</title><rect x="83.3639%" y="340" width="0.2191%" height="15" fill="rgb(245,58,50)" fg:x="56324" fg:w="148"/><text x="83.6139%" y="350.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (148 samples, 0.22%)</title><rect x="83.3639%" y="356" width="0.2191%" height="15" fill="rgb(244,68,36)" fg:x="56324" fg:w="148"/><text x="83.6139%" y="366.50"></text></g><g><title>__calculate (src/dycov/validation/model.py:841) (1,036 samples, 1.53%)</title><rect x="82.0511%" y="244" width="1.5334%" height="15" fill="rgb(232,229,15)" fg:x="55437" fg:w="1036"/><text x="82.3011%" y="254.50"></text></g><g><title>_get_curves_by_windows (src/dycov/core/validator.py:61) (923 samples, 1.37%)</title><rect x="82.2183%" y="260" width="1.3661%" height="15" fill="rgb(254,30,23)" fg:x="55550" fg:w="923"/><text x="82.4683%" y="270.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:446) (422 samples, 0.62%)</title><rect x="82.9599%" y="276" width="0.6246%" height="15" fill="rgb(235,160,14)" fg:x="56051" fg:w="422"/><text x="83.2099%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:210) (150 samples, 0.22%)</title><rect x="83.3624%" y="292" width="0.2220%" height="15" fill="rgb(212,155,44)" fg:x="56323" fg:w="150"/><text x="83.6124%" y="302.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (150 samples, 0.22%)</title><rect x="83.3624%" y="308" width="0.2220%" height="15" fill="rgb(226,2,50)" fg:x="56323" fg:w="150"/><text x="83.6124%" y="318.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (149 samples, 0.22%)</title><rect x="83.3639%" y="324" width="0.2205%" height="15" fill="rgb(234,177,6)" fg:x="56324" fg:w="149"/><text x="83.6139%" y="334.50"></text></g><g><title>__calculate (src/dycov/validation/model.py:842) (73 samples, 0.11%)</title><rect x="83.5845%" y="244" width="0.1080%" height="15" fill="rgb(217,24,9)" fg:x="56473" fg:w="73"/><text x="83.8345%" y="254.50"></text></g><g><title>__calculate (src/dycov/validation/model.py:858) (184 samples, 0.27%)</title><rect x="83.8775%" y="244" width="0.2723%" height="15" fill="rgb(220,13,46)" fg:x="56671" fg:w="184"/><text x="84.1275%" y="254.50"></text></g><g><title>__calculate (src/dycov/validation/model.py:873) (524 samples, 0.78%)</title><rect x="84.1572%" y="244" width="0.7756%" height="15" fill="rgb(239,221,27)" fg:x="56860" fg:w="524"/><text x="84.4072%" y="254.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (290 samples, 0.43%)</title><rect x="85.0660%" y="292" width="0.4292%" height="15" fill="rgb(222,198,25)" fg:x="57474" fg:w="290"/><text x="85.3160%" y="302.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (195 samples, 0.29%)</title><rect x="85.5219%" y="372" width="0.2886%" height="15" fill="rgb(211,99,13)" fg:x="57782" fg:w="195"/><text x="85.7719%" y="382.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (133 samples, 0.20%)</title><rect x="85.6136%" y="388" width="0.1969%" height="15" fill="rgb(232,111,31)" fg:x="57844" fg:w="133"/><text x="85.8636%" y="398.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (215 samples, 0.32%)</title><rect x="85.4952%" y="356" width="0.3182%" height="15" fill="rgb(245,82,37)" fg:x="57764" fg:w="215"/><text x="85.7452%" y="366.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (216 samples, 0.32%)</title><rect x="85.4952%" y="340" width="0.3197%" height="15" fill="rgb(227,149,46)" fg:x="57764" fg:w="216"/><text x="85.7452%" y="350.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:444) (598 samples, 0.89%)</title><rect x="84.9328%" y="276" width="0.8851%" height="15" fill="rgb(218,36,50)" fg:x="57384" fg:w="598"/><text x="85.1828%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:210) (218 samples, 0.32%)</title><rect x="85.4952%" y="292" width="0.3227%" height="15" fill="rgb(226,80,48)" fg:x="57764" fg:w="218"/><text x="85.7452%" y="302.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (218 samples, 0.32%)</title><rect x="85.4952%" y="308" width="0.3227%" height="15" fill="rgb(238,224,15)" fg:x="57764" fg:w="218"/><text x="85.7452%" y="318.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (218 samples, 0.32%)</title><rect x="85.4952%" y="324" width="0.3227%" height="15" fill="rgb(241,136,10)" fg:x="57764" fg:w="218"/><text x="85.7452%" y="334.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:208) (263 samples, 0.39%)</title><rect x="85.9674%" y="292" width="0.3893%" height="15" fill="rgb(208,32,45)" fg:x="58083" fg:w="263"/><text x="86.2174%" y="302.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:655) (166 samples, 0.25%)</title><rect x="86.3744%" y="372" width="0.2457%" height="15" fill="rgb(207,135,9)" fg:x="58358" fg:w="166"/><text x="86.6244%" y="382.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:138) (106 samples, 0.16%)</title><rect x="86.4632%" y="388" width="0.1569%" height="15" fill="rgb(206,86,44)" fg:x="58418" fg:w="106"/><text x="86.7132%" y="398.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (179 samples, 0.26%)</title><rect x="86.3581%" y="340" width="0.2649%" height="15" fill="rgb(245,177,15)" fg:x="58347" fg:w="179"/><text x="86.6081%" y="350.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (178 samples, 0.26%)</title><rect x="86.3596%" y="356" width="0.2635%" height="15" fill="rgb(206,64,50)" fg:x="58348" fg:w="178"/><text x="86.6096%" y="366.50"></text></g><g><title>validate (src/dycov/validation/model.py:1195) (4,260 samples, 6.31%)</title><rect x="80.3209%" y="228" width="6.3051%" height="15" fill="rgb(234,36,40)" fg:x="54268" fg:w="4260"/><text x="80.5709%" y="238.50">validate..</text></g><g><title>__calculate (src/dycov/validation/model.py:875) (1,144 samples, 1.69%)</title><rect x="84.9328%" y="244" width="1.6932%" height="15" fill="rgb(213,64,8)" fg:x="57384" fg:w="1144"/><text x="85.1828%" y="254.50"></text></g><g><title>_get_curves_by_windows (src/dycov/core/validator.py:61) (1,144 samples, 1.69%)</title><rect x="84.9328%" y="260" width="1.6932%" height="15" fill="rgb(210,75,36)" fg:x="57384" fg:w="1144"/><text x="85.1828%" y="270.50"></text></g><g><title>get_curves_by_windows (src/dycov/curves/manager.py:446) (546 samples, 0.81%)</title><rect x="85.8179%" y="276" width="0.8081%" height="15" fill="rgb(229,88,21)" fg:x="57982" fg:w="546"/><text x="86.0679%" y="286.50"></text></g><g><title>get (src/dycov/sigpro/signal_windows.py:210) (182 samples, 0.27%)</title><rect x="86.3566%" y="292" width="0.2694%" height="15" fill="rgb(252,204,47)" fg:x="58346" fg:w="182"/><text x="86.6066%" y="302.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (181 samples, 0.27%)</title><rect x="86.3581%" y="308" width="0.2679%" height="15" fill="rgb(208,77,27)" fg:x="58347" fg:w="181"/><text x="86.6081%" y="318.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:503) (181 samples, 0.27%)</title><rect x="86.3581%" y="324" width="0.2679%" height="15" fill="rgb(221,76,26)" fg:x="58347" fg:w="181"/><text x="86.6081%" y="334.50"></text></g><g><title>__validate (src/dycov/model/operating_condition.py:68) (11,330 samples, 16.77%)</title><rect x="69.8626%" y="212" width="16.7693%" height="15" fill="rgb(225,139,18)" fg:x="47202" fg:w="11330"/><text x="70.1126%" y="222.50">__validate (src/dycov/model..</text></g><g><title>_get_strcols (pandas/io/formats/string.py:35) (69 samples, 0.10%)</title><rect x="86.6586%" y="324" width="0.1021%" height="15" fill="rgb(230,137,11)" fg:x="58550" fg:w="69"/><text x="86.9086%" y="334.50"></text></g><g><title>get_strcols (pandas/io/formats/format.py:476) (69 samples, 0.10%)</title><rect x="86.6586%" y="340" width="0.1021%" height="15" fill="rgb(212,28,1)" fg:x="58550" fg:w="69"/><text x="86.9086%" y="350.50"></text></g><g><title>_get_string_representation (pandas/io/formats/string.py:44) (70 samples, 0.10%)</title><rect x="86.6586%" y="308" width="0.1036%" height="15" fill="rgb(248,164,17)" fg:x="58550" fg:w="70"/><text x="86.9086%" y="318.50"></text></g><g><title>validate (src/dycov/model/benchmark.py:564) (11,557 samples, 17.11%)</title><rect x="69.8612%" y="164" width="17.1053%" height="15" fill="rgb(222,171,42)" fg:x="47201" fg:w="11557"/><text x="70.1112%" y="174.50">validate (src/dycov/model/b..</text></g><g><title>__validate (src/dycov/model/benchmark.py:492) (11,556 samples, 17.10%)</title><rect x="69.8626%" y="180" width="17.1038%" height="15" fill="rgb(243,84,45)" fg:x="47202" fg:w="11556"/><text x="70.1126%" y="190.50">__validate (src/dycov/model..</text></g><g><title>validate (src/dycov/model/operating_condition.py:127) (11,556 samples, 17.10%)</title><rect x="69.8626%" y="196" width="17.1038%" height="15" fill="rgb(252,49,23)" fg:x="47202" fg:w="11556"/><text x="70.1126%" y="206.50">validate (src/dycov/model/o..</text></g><g><title>__validate (src/dycov/model/operating_condition.py:82) (219 samples, 0.32%)</title><rect x="86.6423%" y="212" width="0.3241%" height="15" fill="rgb(215,19,7)" fg:x="58539" fg:w="219"/><text x="86.8923%" y="222.50"></text></g><g><title>__repr__ (pandas/core/frame.py:1214) (214 samples, 0.32%)</title><rect x="86.6497%" y="228" width="0.3167%" height="15" fill="rgb(238,81,41)" fg:x="58544" fg:w="214"/><text x="86.8997%" y="238.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:333) (214 samples, 0.32%)</title><rect x="86.6497%" y="244" width="0.3167%" height="15" fill="rgb(210,199,37)" fg:x="58544" fg:w="214"/><text x="86.8997%" y="254.50"></text></g><g><title>to_string (pandas/core/frame.py:1394) (209 samples, 0.31%)</title><rect x="86.6571%" y="260" width="0.3093%" height="15" fill="rgb(244,192,49)" fg:x="58549" fg:w="209"/><text x="86.9071%" y="270.50"></text></g><g><title>to_string (pandas/io/formats/format.py:962) (209 samples, 0.31%)</title><rect x="86.6571%" y="276" width="0.3093%" height="15" fill="rgb(226,211,11)" fg:x="58549" fg:w="209"/><text x="86.9071%" y="286.50"></text></g><g><title>to_string (pandas/io/formats/string.py:29) (209 samples, 0.31%)</title><rect x="86.6571%" y="292" width="0.3093%" height="15" fill="rgb(236,162,54)" fg:x="58549" fg:w="209"/><text x="86.9071%" y="302.50"></text></g><g><title>_get_string_representation (pandas/io/formats/string.py:53) (138 samples, 0.20%)</title><rect x="86.7622%" y="308" width="0.2043%" height="15" fill="rgb(220,229,9)" fg:x="58620" fg:w="138"/><text x="87.0122%" y="318.50"></text></g><g><title>validate (src/dycov/core/validation.py:238) (58,602 samples, 86.74%)</title><rect x="0.2324%" y="132" width="86.7355%" height="15" fill="rgb(250,87,22)" fg:x="157" fg:w="58602"/><text x="0.4824%" y="142.50">validate (src/dycov/core/validation.py:238)</text></g><g><title>validate (src/dycov/model/pcs.py:126) (58,601 samples, 86.73%)</title><rect x="0.2339%" y="148" width="86.7341%" height="15" fill="rgb(239,43,17)" fg:x="158" fg:w="58601"/><text x="0.4839%" y="158.50">validate (src/dycov/model/pcs.py:126)</text></g><g><title>get_common_time_range (src/dycov/report/figure.py:585) (68 samples, 0.10%)</title><rect x="86.9886%" y="212" width="0.1006%" height="15" fill="rgb(231,177,25)" fg:x="58773" fg:w="68"/><text x="87.2386%" y="222.50"></text></g><g><title>get_curves2plot (src/dycov/report/figure.py:705) (73 samples, 0.11%)</title><rect x="87.1130%" y="244" width="0.1080%" height="15" fill="rgb(219,179,1)" fg:x="58857" fg:w="73"/><text x="87.3630%" y="254.50"></text></g><g><title>_add_curve2plot (src/dycov/report/figure.py:83) (73 samples, 0.11%)</title><rect x="87.1130%" y="260" width="0.1080%" height="15" fill="rgb(238,219,53)" fg:x="58857" fg:w="73"/><text x="87.3630%" y="270.50"></text></g><g><title>_get_time_range (src/dycov/report/figure.py:535) (126 samples, 0.19%)</title><rect x="87.0952%" y="228" width="0.1865%" height="15" fill="rgb(232,167,36)" fg:x="58845" fg:w="126"/><text x="87.3452%" y="238.50"></text></g><g><title>_get_xrange_for_curve (src/dycov/report/figure.py:142) (137 samples, 0.20%)</title><rect x="87.3143%" y="260" width="0.2028%" height="15" fill="rgb(244,19,51)" fg:x="58993" fg:w="137"/><text x="87.5643%" y="270.50"></text></g><g><title>_get_xrange_for_curve (src/dycov/report/figure.py:143) (151 samples, 0.22%)</title><rect x="87.5170%" y="260" width="0.2235%" height="15" fill="rgb(224,6,22)" fg:x="59130" fg:w="151"/><text x="87.7670%" y="270.50"></text></g><g><title>_get_time_range (src/dycov/report/figure.py:539) (339 samples, 0.50%)</title><rect x="87.2832%" y="228" width="0.5017%" height="15" fill="rgb(224,145,5)" fg:x="58972" fg:w="339"/><text x="87.5332%" y="238.50"></text></g><g><title>_get_xrange (src/dycov/report/figure.py:100) (339 samples, 0.50%)</title><rect x="87.2832%" y="244" width="0.5017%" height="15" fill="rgb(234,130,49)" fg:x="58972" fg:w="339"/><text x="87.5332%" y="254.50"></text></g><g><title>_create_full_tex (src/dycov/report/report.py:328) (543 samples, 0.80%)</title><rect x="86.9827%" y="196" width="0.8037%" height="15" fill="rgb(254,6,2)" fg:x="58769" fg:w="543"/><text x="87.2327%" y="206.50"></text></g><g><title>get_common_time_range (src/dycov/report/figure.py:586) (471 samples, 0.70%)</title><rect x="87.0893%" y="212" width="0.6971%" height="15" fill="rgb(208,96,46)" fg:x="58841" fg:w="471"/><text x="87.3393%" y="222.50"></text></g><g><title>get_curves2plot (src/dycov/report/figure.py:705) (68 samples, 0.10%)</title><rect x="87.8160%" y="228" width="0.1006%" height="15" fill="rgb(239,3,39)" fg:x="59332" fg:w="68"/><text x="88.0660%" y="238.50"></text></g><g><title>_add_curve2plot (src/dycov/report/figure.py:83) (68 samples, 0.10%)</title><rect x="87.8160%" y="244" width="0.1006%" height="15" fill="rgb(233,210,1)" fg:x="59332" fg:w="68"/><text x="88.0660%" y="254.50"></text></g><g><title>_generate_figures (src/dycov/report/report.py:244) (129 samples, 0.19%)</title><rect x="87.7968%" y="212" width="0.1909%" height="15" fill="rgb(244,137,37)" fg:x="59319" fg:w="129"/><text x="88.0468%" y="222.50"></text></g><g><title>_generate_figures (src/dycov/report/report.py:250) (102 samples, 0.15%)</title><rect x="88.0084%" y="212" width="0.1510%" height="15" fill="rgb(240,136,2)" fg:x="59462" fg:w="102"/><text x="88.2584%" y="222.50"></text></g><g><title>create_plot (src/dycov/report/figure.py:660) (119 samples, 0.18%)</title><rect x="88.2482%" y="228" width="0.1761%" height="15" fill="rgb(239,18,37)" fg:x="59624" fg:w="119"/><text x="88.4982%" y="238.50"></text></g><g><title>_get_yrange (src/dycov/report/figure.py:178) (118 samples, 0.17%)</title><rect x="88.2497%" y="244" width="0.1746%" height="15" fill="rgb(218,185,22)" fg:x="59625" fg:w="118"/><text x="88.4997%" y="254.50"></text></g><g><title>__clear (matplotlib/axes/_base.py:1332) (89 samples, 0.13%)</title><rect x="88.7174%" y="356" width="0.1317%" height="15" fill="rgb(225,218,4)" fg:x="59941" fg:w="89"/><text x="88.9674%" y="366.50"></text></g><g><title>__init__ (matplotlib/axes/_base.py:696) (234 samples, 0.35%)</title><rect x="88.6744%" y="324" width="0.3463%" height="15" fill="rgb(230,182,32)" fg:x="59912" fg:w="234"/><text x="88.9244%" y="334.50"></text></g><g><title>clear (matplotlib/axes/_base.py:1416) (234 samples, 0.35%)</title><rect x="88.6744%" y="340" width="0.3463%" height="15" fill="rgb(242,56,43)" fg:x="59912" fg:w="234"/><text x="88.9244%" y="350.50"></text></g><g><title>gca (matplotlib/figure.py:1719) (323 samples, 0.48%)</title><rect x="88.5575%" y="292" width="0.4781%" height="15" fill="rgb(233,99,24)" fg:x="59833" fg:w="323"/><text x="88.8075%" y="302.50"></text></g><g><title>add_subplot (matplotlib/figure.py:768) (323 samples, 0.48%)</title><rect x="88.5575%" y="308" width="0.4781%" height="15" fill="rgb(234,209,42)" fg:x="59833" fg:w="323"/><text x="88.8075%" y="318.50"></text></g><g><title>_plot_exclusion_windows (src/dycov/report/figure.py:416) (366 samples, 0.54%)</title><rect x="88.4954%" y="244" width="0.5417%" height="15" fill="rgb(227,7,12)" fg:x="59791" fg:w="366"/><text x="88.7454%" y="254.50"></text></g><g><title>axvspan (matplotlib/pyplot.py:2966) (366 samples, 0.54%)</title><rect x="88.4954%" y="260" width="0.5417%" height="15" fill="rgb(245,203,43)" fg:x="59791" fg:w="366"/><text x="88.7454%" y="270.50"></text></g><g><title>gca (matplotlib/pyplot.py:2776) (325 samples, 0.48%)</title><rect x="88.5560%" y="276" width="0.4810%" height="15" fill="rgb(238,205,33)" fg:x="59832" fg:w="325"/><text x="88.8060%" y="286.50"></text></g><g><title>create_plot (src/dycov/report/figure.py:673) (382 samples, 0.57%)</title><rect x="88.4954%" y="228" width="0.5654%" height="15" fill="rgb(231,56,7)" fg:x="59791" fg:w="382"/><text x="88.7454%" y="238.50"></text></g><g><title>_plot_args (matplotlib/axes/_base.py:483) (72 samples, 0.11%)</title><rect x="89.1407%" y="308" width="0.1066%" height="15" fill="rgb(244,186,29)" fg:x="60227" fg:w="72"/><text x="89.3907%" y="318.50"></text></g><g><title>_check_1d (matplotlib/cbook.py:1358) (72 samples, 0.11%)</title><rect x="89.1407%" y="324" width="0.1066%" height="15" fill="rgb(234,111,31)" fg:x="60227" fg:w="72"/><text x="89.3907%" y="334.50"></text></g><g><title>atleast_1d (numpy/_core/shape_base.py:63) (72 samples, 0.11%)</title><rect x="89.1407%" y="340" width="0.1066%" height="15" fill="rgb(241,149,10)" fg:x="60227" fg:w="72"/><text x="89.3907%" y="350.50"></text></g><g><title>_plot_args (matplotlib/axes/_base.py:484) (76 samples, 0.11%)</title><rect x="89.2472%" y="308" width="0.1125%" height="15" fill="rgb(249,206,44)" fg:x="60299" fg:w="76"/><text x="89.4972%" y="318.50"></text></g><g><title>_check_1d (matplotlib/cbook.py:1358) (76 samples, 0.11%)</title><rect x="89.2472%" y="324" width="0.1125%" height="15" fill="rgb(251,153,30)" fg:x="60299" fg:w="76"/><text x="89.4972%" y="334.50"></text></g><g><title>atleast_1d (numpy/_core/shape_base.py:63) (76 samples, 0.11%)</title><rect x="89.2472%" y="340" width="0.1125%" height="15" fill="rgb(239,152,38)" fg:x="60299" fg:w="76"/><text x="89.4972%" y="350.50"></text></g><g><title>plot (matplotlib/axes/_axes.py:1777) (155 samples, 0.23%)</title><rect x="89.1392%" y="276" width="0.2294%" height="15" fill="rgb(249,139,47)" fg:x="60226" fg:w="155"/><text x="89.3892%" y="286.50"></text></g><g><title>__call__ (matplotlib/axes/_base.py:297) (155 samples, 0.23%)</title><rect x="89.1392%" y="292" width="0.2294%" height="15" fill="rgb(244,64,35)" fg:x="60226" fg:w="155"/><text x="89.3892%" y="302.50"></text></g><g><title>add_line (matplotlib/axes/_base.py:2371) (74 samples, 0.11%)</title><rect x="89.3745%" y="292" width="0.1095%" height="15" fill="rgb(216,46,15)" fg:x="60385" fg:w="74"/><text x="89.6245%" y="302.50"></text></g><g><title>_save_plot (src/dycov/report/figure.py:497) (234 samples, 0.35%)</title><rect x="89.1392%" y="244" width="0.3463%" height="15" fill="rgb(250,74,19)" fg:x="60226" fg:w="234"/><text x="89.3892%" y="254.50"></text></g><g><title>plot (matplotlib/pyplot.py:3829) (234 samples, 0.35%)</title><rect x="89.1392%" y="260" width="0.3463%" height="15" fill="rgb(249,42,33)" fg:x="60226" fg:w="234"/><text x="89.3892%" y="270.50"></text></g><g><title>plot (matplotlib/axes/_axes.py:1779) (79 samples, 0.12%)</title><rect x="89.3686%" y="276" width="0.1169%" height="15" fill="rgb(242,149,17)" fg:x="60381" fg:w="79"/><text x="89.6186%" y="286.50"></text></g><g><title>_plot_args (matplotlib/axes/_base.py:483) (74 samples, 0.11%)</title><rect x="89.4900%" y="308" width="0.1095%" height="15" fill="rgb(244,29,21)" fg:x="60463" fg:w="74"/><text x="89.7400%" y="318.50"></text></g><g><title>_check_1d (matplotlib/cbook.py:1358) (74 samples, 0.11%)</title><rect x="89.4900%" y="324" width="0.1095%" height="15" fill="rgb(220,130,37)" fg:x="60463" fg:w="74"/><text x="89.7400%" y="334.50"></text></g><g><title>atleast_1d (numpy/_core/shape_base.py:63) (74 samples, 0.11%)</title><rect x="89.4900%" y="340" width="0.1095%" height="15" fill="rgb(211,67,2)" fg:x="60463" fg:w="74"/><text x="89.7400%" y="350.50"></text></g><g><title>_plot_args (matplotlib/axes/_base.py:484) (82 samples, 0.12%)</title><rect x="89.5995%" y="308" width="0.1214%" height="15" fill="rgb(235,68,52)" fg:x="60537" fg:w="82"/><text x="89.8495%" y="318.50"></text></g><g><title>_check_1d (matplotlib/cbook.py:1358) (82 samples, 0.12%)</title><rect x="89.5995%" y="324" width="0.1214%" height="15" fill="rgb(246,142,3)" fg:x="60537" fg:w="82"/><text x="89.8495%" y="334.50"></text></g><g><title>atleast_1d (numpy/_core/shape_base.py:63) (82 samples, 0.12%)</title><rect x="89.5995%" y="340" width="0.1214%" height="15" fill="rgb(241,25,7)" fg:x="60537" fg:w="82"/><text x="89.8495%" y="350.50"></text></g><g><title>plot (matplotlib/axes/_axes.py:1777) (172 samples, 0.25%)</title><rect x="89.4885%" y="276" width="0.2546%" height="15" fill="rgb(242,119,39)" fg:x="60462" fg:w="172"/><text x="89.7385%" y="286.50"></text></g><g><title>__call__ (matplotlib/axes/_base.py:297) (171 samples, 0.25%)</title><rect x="89.4900%" y="292" width="0.2531%" height="15" fill="rgb(241,98,45)" fg:x="60463" fg:w="171"/><text x="89.7400%" y="302.50"></text></g><g><title>_save_plot (src/dycov/report/figure.py:501) (230 samples, 0.34%)</title><rect x="89.4855%" y="244" width="0.3404%" height="15" fill="rgb(254,28,30)" fg:x="60460" fg:w="230"/><text x="89.7355%" y="254.50"></text></g><g><title>plot (matplotlib/pyplot.py:3829) (230 samples, 0.34%)</title><rect x="89.4855%" y="260" width="0.3404%" height="15" fill="rgb(241,142,54)" fg:x="60460" fg:w="230"/><text x="89.7355%" y="270.50"></text></g><g><title>__init__ (matplotlib/axis.py:368) (166 samples, 0.25%)</title><rect x="90.1160%" y="532" width="0.2457%" height="15" fill="rgb(222,85,15)" fg:x="60886" fg:w="166"/><text x="90.3660%" y="542.50"></text></g><g><title>__init__ (matplotlib/axis.py:429) (197 samples, 0.29%)</title><rect x="90.4476%" y="532" width="0.2916%" height="15" fill="rgb(210,85,47)" fg:x="61110" fg:w="197"/><text x="90.6976%" y="542.50"></text></g><g><title>get_major_ticks (matplotlib/axis.py:1675) (505 samples, 0.75%)</title><rect x="90.1146%" y="500" width="0.7474%" height="15" fill="rgb(224,206,25)" fg:x="60885" fg:w="505"/><text x="90.3646%" y="510.50"></text></g><g><title>_get_tick (matplotlib/axis.py:1603) (505 samples, 0.75%)</title><rect x="90.1146%" y="516" width="0.7474%" height="15" fill="rgb(243,201,19)" fg:x="60885" fg:w="505"/><text x="90.3646%" y="526.50"></text></g><g><title>_update_ticks (matplotlib/axis.py:1294) (677 samples, 1.00%)</title><rect x="90.1131%" y="484" width="1.0020%" height="15" fill="rgb(236,59,4)" fg:x="60884" fg:w="677"/><text x="90.3631%" y="494.50"></text></g><g><title>get_major_ticks (matplotlib/axis.py:1677) (171 samples, 0.25%)</title><rect x="90.8620%" y="500" width="0.2531%" height="15" fill="rgb(254,179,45)" fg:x="61390" fg:w="171"/><text x="91.1120%" y="510.50"></text></g><g><title>draw (matplotlib/axis.py:1415) (746 samples, 1.10%)</title><rect x="90.0746%" y="468" width="1.1041%" height="15" fill="rgb(226,14,10)" fg:x="60858" fg:w="746"/><text x="90.3246%" y="478.50"></text></g><g><title>get_window_extent (matplotlib/text.py:969) (116 samples, 0.17%)</title><rect x="91.1965%" y="516" width="0.1717%" height="15" fill="rgb(244,27,41)" fg:x="61616" fg:w="116"/><text x="91.4465%" y="526.50"></text></g><g><title>&lt;listcomp&gt; (matplotlib/axis.py:1343) (149 samples, 0.22%)</title><rect x="91.1802%" y="500" width="0.2205%" height="15" fill="rgb(235,35,32)" fg:x="61605" fg:w="149"/><text x="91.4302%" y="510.50"></text></g><g><title>_get_ticklabel_bboxes (matplotlib/axis.py:1343) (151 samples, 0.22%)</title><rect x="91.1787%" y="484" width="0.2235%" height="15" fill="rgb(218,68,31)" fg:x="61604" fg:w="151"/><text x="91.4287%" y="494.50"></text></g><g><title>draw (matplotlib/axis.py:1416) (152 samples, 0.22%)</title><rect x="91.1787%" y="468" width="0.2250%" height="15" fill="rgb(207,120,37)" fg:x="61604" fg:w="152"/><text x="91.4287%" y="478.50"></text></g><g><title>draw (matplotlib/lines.py:873) (82 samples, 0.12%)</title><rect x="91.5458%" y="532" width="0.1214%" height="15" fill="rgb(227,98,0)" fg:x="61852" fg:w="82"/><text x="91.7958%" y="542.50"></text></g><g><title>draw_markers (matplotlib/backends/backend_pdf.py:2108) (77 samples, 0.11%)</title><rect x="91.5532%" y="548" width="0.1140%" height="15" fill="rgb(207,7,3)" fg:x="61857" fg:w="77"/><text x="91.8032%" y="558.50"></text></g><g><title>draw (matplotlib/text.py:752) (84 samples, 0.12%)</title><rect x="91.7264%" y="532" width="0.1243%" height="15" fill="rgb(206,98,19)" fg:x="61974" fg:w="84"/><text x="91.9764%" y="542.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (470 samples, 0.70%)</title><rect x="91.4111%" y="516" width="0.6956%" height="15" fill="rgb(217,5,26)" fg:x="61761" fg:w="470"/><text x="91.6611%" y="526.50"></text></g><g><title>draw (matplotlib/text.py:808) (130 samples, 0.19%)</title><rect x="91.9143%" y="532" width="0.1924%" height="15" fill="rgb(235,190,38)" fg:x="62101" fg:w="130"/><text x="92.1643%" y="542.50"></text></g><g><title>draw (matplotlib/axis.py:276) (475 samples, 0.70%)</title><rect x="91.4067%" y="500" width="0.7030%" height="15" fill="rgb(247,86,24)" fg:x="61758" fg:w="475"/><text x="91.6567%" y="510.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (478 samples, 0.71%)</title><rect x="91.4052%" y="484" width="0.7075%" height="15" fill="rgb(205,101,16)" fg:x="61757" fg:w="478"/><text x="91.6552%" y="494.50"></text></g><g><title>draw (matplotlib/axis.py:1419) (480 samples, 0.71%)</title><rect x="91.4037%" y="468" width="0.7104%" height="15" fill="rgb(246,168,33)" fg:x="61756" fg:w="480"/><text x="91.6537%" y="478.50"></text></g><g><title>_update_label_position (matplotlib/axis.py:2459) (80 samples, 0.12%)</title><rect x="92.1141%" y="484" width="0.1184%" height="15" fill="rgb(231,114,1)" fg:x="62236" fg:w="80"/><text x="92.3641%" y="494.50"></text></g><g><title>_update_label_position (matplotlib/axis.py:2686) (69 samples, 0.10%)</title><rect x="92.2947%" y="484" width="0.1021%" height="15" fill="rgb(207,184,53)" fg:x="62358" fg:w="69"/><text x="92.5447%" y="494.50"></text></g><g><title>draw (matplotlib/axis.py:1422) (222 samples, 0.33%)</title><rect x="92.1141%" y="468" width="0.3286%" height="15" fill="rgb(224,95,51)" fg:x="62236" fg:w="222"/><text x="92.3641%" y="478.50"></text></g><g><title>draw (matplotlib/lines.py:807) (72 samples, 0.11%)</title><rect x="92.6174%" y="468" width="0.1066%" height="15" fill="rgb(212,188,45)" fg:x="62576" fg:w="72"/><text x="92.8674%" y="478.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (1,885 samples, 2.79%)</title><rect x="90.0687%" y="452" width="2.7899%" height="15" fill="rgb(223,154,38)" fg:x="60854" fg:w="1885"/><text x="90.3187%" y="462.50">dr..</text></g><g><title>draw (matplotlib/figure.py:3257) (1,894 samples, 2.80%)</title><rect x="90.0583%" y="372" width="2.8033%" height="15" fill="rgb(251,22,52)" fg:x="60847" fg:w="1894"/><text x="90.3083%" y="382.50">dr..</text></g><g><title>_draw_list_compositing_images (matplotlib/image.py:134) (1,894 samples, 2.80%)</title><rect x="90.0583%" y="388" width="2.8033%" height="15" fill="rgb(229,209,22)" fg:x="60847" fg:w="1894"/><text x="90.3083%" y="398.50">_d..</text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (1,894 samples, 2.80%)</title><rect x="90.0583%" y="404" width="2.8033%" height="15" fill="rgb(234,138,34)" fg:x="60847" fg:w="1894"/><text x="90.3083%" y="414.50">dr..</text></g><g><title>draw (matplotlib/axes/_base.py:3181) (1,890 samples, 2.80%)</title><rect x="90.0642%" y="420" width="2.7973%" height="15" fill="rgb(212,95,11)" fg:x="60851" fg:w="1890"/><text x="90.3142%" y="430.50">dr..</text></g><g><title>_draw_list_compositing_images (matplotlib/image.py:134) (1,890 samples, 2.80%)</title><rect x="90.0642%" y="436" width="2.7973%" height="15" fill="rgb(240,179,47)" fg:x="60851" fg:w="1890"/><text x="90.3142%" y="446.50">_d..</text></g><g><title>draw_wrapper (matplotlib/artist.py:94) (1,908 samples, 2.82%)</title><rect x="90.0391%" y="340" width="2.8240%" height="15" fill="rgb(240,163,11)" fg:x="60834" fg:w="1908"/><text x="90.2891%" y="350.50">dr..</text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (1,908 samples, 2.82%)</title><rect x="90.0391%" y="356" width="2.8240%" height="15" fill="rgb(236,37,12)" fg:x="60834" fg:w="1908"/><text x="90.2891%" y="366.50">dr..</text></g><g><title>print_pdf (matplotlib/backends/backend_pdf.py:2786) (1,909 samples, 2.83%)</title><rect x="90.0391%" y="324" width="2.8255%" height="15" fill="rgb(232,164,16)" fg:x="60834" fg:w="1909"/><text x="90.2891%" y="334.50">pr..</text></g><g><title>get_char_width (matplotlib/backends/backend_pdf.py:1186) (155 samples, 0.23%)</title><rect x="92.9178%" y="420" width="0.2294%" height="15" fill="rgb(244,205,15)" fg:x="62779" fg:w="155"/><text x="93.1678%" y="430.50"></text></g><g><title>embedTTFType3 (matplotlib/backends/backend_pdf.py:1194) (189 samples, 0.28%)</title><rect x="92.9104%" y="388" width="0.2797%" height="15" fill="rgb(223,117,47)" fg:x="62774" fg:w="189"/><text x="93.1604%" y="398.50"></text></g><g><title>&lt;listcomp&gt; (matplotlib/backends/backend_pdf.py:1194) (189 samples, 0.28%)</title><rect x="92.9104%" y="404" width="0.2797%" height="15" fill="rgb(244,107,35)" fg:x="62774" fg:w="189"/><text x="93.1604%" y="414.50"></text></g><g><title>embedTTFType3 (matplotlib/backends/backend_pdf.py:1223) (153 samples, 0.23%)</title><rect x="93.2005%" y="388" width="0.2265%" height="15" fill="rgb(205,140,8)" fg:x="62970" fg:w="153"/><text x="93.4505%" y="398.50"></text></g><g><title>finalize (matplotlib/backends/backend_pdf.py:827) (405 samples, 0.60%)</title><rect x="92.8734%" y="340" width="0.5994%" height="15" fill="rgb(228,84,46)" fg:x="62749" fg:w="405"/><text x="93.1234%" y="350.50"></text></g><g><title>writeFonts (matplotlib/backends/backend_pdf.py:973) (403 samples, 0.60%)</title><rect x="92.8764%" y="356" width="0.5965%" height="15" fill="rgb(254,188,9)" fg:x="62751" fg:w="403"/><text x="93.1264%" y="366.50"></text></g><g><title>embedTTF (matplotlib/backends/backend_pdf.py:1451) (382 samples, 0.57%)</title><rect x="92.9075%" y="372" width="0.5654%" height="15" fill="rgb(206,112,54)" fg:x="62772" fg:w="382"/><text x="93.1575%" y="382.50"></text></g><g><title>print_pdf (matplotlib/backends/backend_pdf.py:2789) (416 samples, 0.62%)</title><rect x="92.8660%" y="324" width="0.6157%" height="15" fill="rgb(216,84,49)" fg:x="62744" fg:w="416"/><text x="93.1160%" y="334.50"></text></g><g><title>savefig (matplotlib/pyplot.py:1243) (2,399 samples, 3.55%)</title><rect x="89.9325%" y="260" width="3.5507%" height="15" fill="rgb(214,194,35)" fg:x="60762" fg:w="2399"/><text x="90.1825%" y="270.50">save..</text></g><g><title>savefig (matplotlib/figure.py:3490) (2,398 samples, 3.55%)</title><rect x="89.9340%" y="276" width="3.5492%" height="15" fill="rgb(249,28,3)" fg:x="60763" fg:w="2398"/><text x="90.1840%" y="286.50">save..</text></g><g><title>print_figure (matplotlib/backend_bases.py:2184) (2,340 samples, 3.46%)</title><rect x="90.0198%" y="292" width="3.4634%" height="15" fill="rgb(222,56,52)" fg:x="60821" fg:w="2340"/><text x="90.2698%" y="302.50">pri..</text></g><g><title>&lt;lambda&gt; (matplotlib/backend_bases.py:2040) (2,340 samples, 3.46%)</title><rect x="90.0198%" y="308" width="3.4634%" height="15" fill="rgb(245,217,50)" fg:x="60821" fg:w="2340"/><text x="90.2698%" y="318.50">&lt;la..</text></g><g><title>draw (matplotlib/axis.py:1415) (72 samples, 0.11%)</title><rect x="93.5321%" y="436" width="0.1066%" height="15" fill="rgb(213,201,24)" fg:x="63194" fg:w="72"/><text x="93.7821%" y="446.50"></text></g><g><title>get_window_extent (matplotlib/text.py:969) (134 samples, 0.20%)</title><rect x="93.6490%" y="484" width="0.1983%" height="15" fill="rgb(248,116,28)" fg:x="63273" fg:w="134"/><text x="93.8990%" y="494.50"></text></g><g><title>_get_ticklabel_bboxes (matplotlib/axis.py:1343) (163 samples, 0.24%)</title><rect x="93.6386%" y="452" width="0.2413%" height="15" fill="rgb(219,72,43)" fg:x="63266" fg:w="163"/><text x="93.8886%" y="462.50"></text></g><g><title>&lt;listcomp&gt; (matplotlib/axis.py:1343) (162 samples, 0.24%)</title><rect x="93.6401%" y="468" width="0.2398%" height="15" fill="rgb(209,138,14)" fg:x="63267" fg:w="162"/><text x="93.8901%" y="478.50"></text></g><g><title>draw (matplotlib/axis.py:1416) (165 samples, 0.24%)</title><rect x="93.6386%" y="436" width="0.2442%" height="15" fill="rgb(222,18,33)" fg:x="63266" fg:w="165"/><text x="93.8886%" y="446.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (323 samples, 0.48%)</title><rect x="93.8888%" y="484" width="0.4781%" height="15" fill="rgb(213,199,7)" fg:x="63435" fg:w="323"/><text x="94.1388%" y="494.50"></text></g><g><title>draw (matplotlib/text.py:808) (92 samples, 0.14%)</title><rect x="94.2307%" y="500" width="0.1362%" height="15" fill="rgb(250,110,10)" fg:x="63666" fg:w="92"/><text x="94.4807%" y="510.50"></text></g><g><title>draw (matplotlib/axis.py:276) (326 samples, 0.48%)</title><rect x="93.8873%" y="468" width="0.4825%" height="15" fill="rgb(248,123,6)" fg:x="63434" fg:w="326"/><text x="94.1373%" y="478.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (330 samples, 0.49%)</title><rect x="93.8828%" y="452" width="0.4884%" height="15" fill="rgb(206,91,31)" fg:x="63431" fg:w="330"/><text x="94.1328%" y="462.50"></text></g><g><title>draw (matplotlib/axis.py:1419) (331 samples, 0.49%)</title><rect x="93.8828%" y="436" width="0.4899%" height="15" fill="rgb(211,154,13)" fg:x="63431" fg:w="331"/><text x="94.1328%" y="446.50"></text></g><g><title>_update_label_position (matplotlib/axis.py:2459) (70 samples, 0.10%)</title><rect x="94.3727%" y="452" width="0.1036%" height="15" fill="rgb(225,148,7)" fg:x="63762" fg:w="70"/><text x="94.6227%" y="462.50"></text></g><g><title>_update_label_position (matplotlib/axis.py:2686) (87 samples, 0.13%)</title><rect x="94.5444%" y="452" width="0.1288%" height="15" fill="rgb(220,160,43)" fg:x="63878" fg:w="87"/><text x="94.7944%" y="462.50"></text></g><g><title>draw (matplotlib/axis.py:1422) (254 samples, 0.38%)</title><rect x="94.3727%" y="436" width="0.3759%" height="15" fill="rgb(213,52,39)" fg:x="63762" fg:w="254"/><text x="94.6227%" y="446.50"></text></g><g><title>draw_path (matplotlib/backends/backend_agg.py:130) (73 samples, 0.11%)</title><rect x="94.8834%" y="452" width="0.1080%" height="15" fill="rgb(243,137,7)" fg:x="64107" fg:w="73"/><text x="95.1334%" y="462.50"></text></g><g><title>draw (matplotlib/lines.py:807) (78 samples, 0.12%)</title><rect x="94.8834%" y="436" width="0.1154%" height="15" fill="rgb(230,79,13)" fg:x="64107" fg:w="78"/><text x="95.1334%" y="446.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (1,103 samples, 1.63%)</title><rect x="93.5306%" y="420" width="1.6325%" height="15" fill="rgb(247,105,23)" fg:x="63193" fg:w="1103"/><text x="93.7806%" y="430.50"></text></g><g><title>savefig (matplotlib/pyplot.py:1244) (1,136 samples, 1.68%)</title><rect x="93.4832%" y="260" width="1.6814%" height="15" fill="rgb(223,179,41)" fg:x="63161" fg:w="1136"/><text x="93.7332%" y="270.50"></text></g><g><title>draw_idle (matplotlib/backend_bases.py:1891) (1,135 samples, 1.68%)</title><rect x="93.4847%" y="276" width="1.6799%" height="15" fill="rgb(218,9,34)" fg:x="63162" fg:w="1135"/><text x="93.7347%" y="286.50"></text></g><g><title>draw (matplotlib/backends/backend_agg.py:382) (1,127 samples, 1.67%)</title><rect x="93.4965%" y="292" width="1.6680%" height="15" fill="rgb(222,106,8)" fg:x="63170" fg:w="1127"/><text x="93.7465%" y="302.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:94) (1,127 samples, 1.67%)</title><rect x="93.4965%" y="308" width="1.6680%" height="15" fill="rgb(211,220,0)" fg:x="63170" fg:w="1127"/><text x="93.7465%" y="318.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (1,127 samples, 1.67%)</title><rect x="93.4965%" y="324" width="1.6680%" height="15" fill="rgb(229,52,16)" fg:x="63170" fg:w="1127"/><text x="93.7465%" y="334.50"></text></g><g><title>draw (matplotlib/figure.py:3257) (1,111 samples, 1.64%)</title><rect x="93.5202%" y="340" width="1.6444%" height="15" fill="rgb(212,155,18)" fg:x="63186" fg:w="1111"/><text x="93.7702%" y="350.50"></text></g><g><title>_draw_list_compositing_images (matplotlib/image.py:134) (1,110 samples, 1.64%)</title><rect x="93.5217%" y="356" width="1.6429%" height="15" fill="rgb(242,21,14)" fg:x="63187" fg:w="1110"/><text x="93.7717%" y="366.50"></text></g><g><title>draw_wrapper (matplotlib/artist.py:71) (1,110 samples, 1.64%)</title><rect x="93.5217%" y="372" width="1.6429%" height="15" fill="rgb(222,19,48)" fg:x="63187" fg:w="1110"/><text x="93.7717%" y="382.50"></text></g><g><title>draw (matplotlib/axes/_base.py:3181) (1,106 samples, 1.64%)</title><rect x="93.5276%" y="388" width="1.6370%" height="15" fill="rgb(232,45,27)" fg:x="63191" fg:w="1106"/><text x="93.7776%" y="398.50"></text></g><g><title>_draw_list_compositing_images (matplotlib/image.py:134) (1,104 samples, 1.63%)</title><rect x="93.5306%" y="404" width="1.6340%" height="15" fill="rgb(249,103,42)" fg:x="63193" fg:w="1104"/><text x="93.7806%" y="414.50"></text></g><g><title>_generate_figures (src/dycov/report/report.py:253) (4,735 samples, 7.01%)</title><rect x="88.1594%" y="212" width="7.0082%" height="15" fill="rgb(246,81,33)" fg:x="59564" fg:w="4735"/><text x="88.4094%" y="222.50">_generate..</text></g><g><title>create_plot (src/dycov/report/figure.py:675) (4,073 samples, 6.03%)</title><rect x="89.1392%" y="228" width="6.0284%" height="15" fill="rgb(252,33,42)" fg:x="60226" fg:w="4073"/><text x="89.3892%" y="238.50">create_p..</text></g><g><title>_save_plot (src/dycov/report/figure.py:519) (3,537 samples, 5.24%)</title><rect x="89.9325%" y="244" width="5.2350%" height="15" fill="rgb(209,212,41)" fg:x="60762" fg:w="3537"/><text x="90.1825%" y="254.50">_save_..</text></g><g><title>_generate_figures (src/dycov/report/report.py:254) (96 samples, 0.14%)</title><rect x="95.1675%" y="212" width="0.1421%" height="15" fill="rgb(207,154,6)" fg:x="64299" fg:w="96"/><text x="95.4175%" y="222.50"></text></g><g><title>_generate_figures (src/dycov/report/report.py:257) (101 samples, 0.15%)</title><rect x="95.3096%" y="212" width="0.1495%" height="15" fill="rgb(223,64,47)" fg:x="64395" fg:w="101"/><text x="95.5596%" y="222.50"></text></g><g><title>__init__ (plotly/basedatatypes.py:578) (146 samples, 0.22%)</title><rect x="95.5538%" y="260" width="0.2161%" height="15" fill="rgb(211,161,38)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (146 samples, 0.22%)</title><rect x="95.5538%" y="276" width="0.2161%" height="15" fill="rgb(219,138,40)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:992) (146 samples, 0.22%)</title><rect x="95.5538%" y="292" width="0.2161%" height="15" fill="rgb(241,228,46)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (146 samples, 0.22%)</title><rect x="95.5538%" y="308" width="0.2161%" height="15" fill="rgb(223,209,38)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (146 samples, 0.22%)</title><rect x="95.5538%" y="324" width="0.2161%" height="15" fill="rgb(236,164,45)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (146 samples, 0.22%)</title><rect x="95.5538%" y="340" width="0.2161%" height="15" fill="rgb(231,15,5)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (146 samples, 0.22%)</title><rect x="95.5538%" y="356" width="0.2161%" height="15" fill="rgb(252,35,15)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="366.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (146 samples, 0.22%)</title><rect x="95.5538%" y="372" width="0.2161%" height="15" fill="rgb(248,181,18)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (146 samples, 0.22%)</title><rect x="95.5538%" y="388" width="0.2161%" height="15" fill="rgb(233,39,42)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="398.50"></text></g><g><title>&lt;module&gt; (plotly/offline/__init__.py:6) (146 samples, 0.22%)</title><rect x="95.5538%" y="404" width="0.2161%" height="15" fill="rgb(238,110,33)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (146 samples, 0.22%)</title><rect x="95.5538%" y="420" width="0.2161%" height="15" fill="rgb(233,195,10)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (146 samples, 0.22%)</title><rect x="95.5538%" y="436" width="0.2161%" height="15" fill="rgb(254,105,3)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (146 samples, 0.22%)</title><rect x="95.5538%" y="452" width="0.2161%" height="15" fill="rgb(221,225,9)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (146 samples, 0.22%)</title><rect x="95.5538%" y="468" width="0.2161%" height="15" fill="rgb(224,227,45)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (146 samples, 0.22%)</title><rect x="95.5538%" y="484" width="0.2161%" height="15" fill="rgb(229,198,43)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="494.50"></text></g><g><title>&lt;module&gt; (plotly/offline/offline.py:11) (146 samples, 0.22%)</title><rect x="95.5538%" y="500" width="0.2161%" height="15" fill="rgb(206,209,35)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="510.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1075) (146 samples, 0.22%)</title><rect x="95.5538%" y="516" width="0.2161%" height="15" fill="rgb(245,195,53)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="526.50"></text></g><g><title>__getattr__ (_plotly_utils/importers.py:29) (146 samples, 0.22%)</title><rect x="95.5538%" y="532" width="0.2161%" height="15" fill="rgb(240,92,26)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="542.50"></text></g><g><title>import_module (importlib/__init__.py:126) (146 samples, 0.22%)</title><rect x="95.5538%" y="548" width="0.2161%" height="15" fill="rgb(207,40,23)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="558.50"></text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1050) (146 samples, 0.22%)</title><rect x="95.5538%" y="564" width="0.2161%" height="15" fill="rgb(223,111,35)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="574.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (146 samples, 0.22%)</title><rect x="95.5538%" y="580" width="0.2161%" height="15" fill="rgb(229,147,28)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="590.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (146 samples, 0.22%)</title><rect x="95.5538%" y="596" width="0.2161%" height="15" fill="rgb(211,29,28)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="606.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (146 samples, 0.22%)</title><rect x="95.5538%" y="612" width="0.2161%" height="15" fill="rgb(228,72,33)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="622.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (146 samples, 0.22%)</title><rect x="95.5538%" y="628" width="0.2161%" height="15" fill="rgb(205,214,31)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="638.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (146 samples, 0.22%)</title><rect x="95.5538%" y="644" width="0.2161%" height="15" fill="rgb(224,111,15)" fg:x="64560" fg:w="146"/><text x="95.8038%" y="654.50"></text></g><g><title>&lt;module&gt; (plotly/tools.py:64) (144 samples, 0.21%)</title><rect x="95.5568%" y="660" width="0.2131%" height="15" fill="rgb(253,21,26)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="670.50"></text></g><g><title>get_module (_plotly_utils/optional_imports.py:28) (144 samples, 0.21%)</title><rect x="95.5568%" y="676" width="0.2131%" height="15" fill="rgb(245,139,43)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="686.50"></text></g><g><title>import_module (importlib/__init__.py:126) (144 samples, 0.21%)</title><rect x="95.5568%" y="692" width="0.2131%" height="15" fill="rgb(252,170,7)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="702.50"></text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1050) (144 samples, 0.21%)</title><rect x="95.5568%" y="708" width="0.2131%" height="15" fill="rgb(231,118,14)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="718.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (144 samples, 0.21%)</title><rect x="95.5568%" y="724" width="0.2131%" height="15" fill="rgb(238,83,0)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="734.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:992) (144 samples, 0.21%)</title><rect x="95.5568%" y="740" width="0.2131%" height="15" fill="rgb(221,39,39)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (144 samples, 0.21%)</title><rect x="95.5568%" y="756" width="0.2131%" height="15" fill="rgb(222,119,46)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="766.50"></text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1050) (144 samples, 0.21%)</title><rect x="95.5568%" y="772" width="0.2131%" height="15" fill="rgb(222,165,49)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (144 samples, 0.21%)</title><rect x="95.5568%" y="788" width="0.2131%" height="15" fill="rgb(219,113,52)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:992) (144 samples, 0.21%)</title><rect x="95.5568%" y="804" width="0.2131%" height="15" fill="rgb(214,7,15)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="814.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (144 samples, 0.21%)</title><rect x="95.5568%" y="820" width="0.2131%" height="15" fill="rgb(235,32,4)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="830.50"></text></g><g><title>_gcd_import (&lt;frozen importlib._bootstrap&gt;:1050) (144 samples, 0.21%)</title><rect x="95.5568%" y="836" width="0.2131%" height="15" fill="rgb(238,90,54)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="846.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (144 samples, 0.21%)</title><rect x="95.5568%" y="852" width="0.2131%" height="15" fill="rgb(213,208,19)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="862.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (144 samples, 0.21%)</title><rect x="95.5568%" y="868" width="0.2131%" height="15" fill="rgb(233,156,4)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="878.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (144 samples, 0.21%)</title><rect x="95.5568%" y="884" width="0.2131%" height="15" fill="rgb(207,194,5)" fg:x="64562" fg:w="144"/><text x="95.8068%" y="894.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (143 samples, 0.21%)</title><rect x="95.5583%" y="900" width="0.2117%" height="15" fill="rgb(206,111,30)" fg:x="64563" fg:w="143"/><text x="95.8083%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (143 samples, 0.21%)</title><rect x="95.5583%" y="916" width="0.2117%" height="15" fill="rgb(243,70,54)" fg:x="64563" fg:w="143"/><text x="95.8083%" y="926.50"></text></g><g><title>&lt;module&gt; (IPython/__init__.py:55) (104 samples, 0.15%)</title><rect x="95.6160%" y="932" width="0.1539%" height="15" fill="rgb(242,28,8)" fg:x="64602" fg:w="104"/><text x="95.8660%" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (104 samples, 0.15%)</title><rect x="95.6160%" y="948" width="0.1539%" height="15" fill="rgb(219,106,18)" fg:x="64602" fg:w="104"/><text x="95.8660%" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (104 samples, 0.15%)</title><rect x="95.6160%" y="964" width="0.1539%" height="15" fill="rgb(244,222,10)" fg:x="64602" fg:w="104"/><text x="95.8660%" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (104 samples, 0.15%)</title><rect x="95.6160%" y="980" width="0.1539%" height="15" fill="rgb(236,179,52)" fg:x="64602" fg:w="104"/><text x="95.8660%" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (104 samples, 0.15%)</title><rect x="95.6160%" y="996" width="0.1539%" height="15" fill="rgb(213,23,39)" fg:x="64602" fg:w="104"/><text x="95.8660%" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (104 samples, 0.15%)</title><rect x="95.6160%" y="1012" width="0.1539%" height="15" fill="rgb(238,48,10)" fg:x="64602" fg:w="104"/><text x="95.8660%" y="1022.50"></text></g><g><title>plotly_figures (src/dycov/report/html.py:411) (225 samples, 0.33%)</title><rect x="95.4606%" y="228" width="0.3330%" height="15" fill="rgb(251,196,23)" fg:x="64497" fg:w="225"/><text x="95.7106%" y="238.50"></text></g><g><title>__init__ (plotly/graph_objs/_figure.py:641) (170 samples, 0.25%)</title><rect x="95.5420%" y="244" width="0.2516%" height="15" fill="rgb(250,152,24)" fg:x="64552" fg:w="170"/><text x="95.7920%" y="254.50"></text></g><g><title>add_vrect (plotly/basedatatypes.py:4138) (154 samples, 0.23%)</title><rect x="95.7936%" y="292" width="0.2279%" height="15" fill="rgb(209,150,17)" fg:x="64722" fg:w="154"/><text x="96.0436%" y="302.50"></text></g><g><title>_exclusion_windows (src/dycov/report/html.py:334) (155 samples, 0.23%)</title><rect x="95.7936%" y="260" width="0.2294%" height="15" fill="rgb(234,202,34)" fg:x="64722" fg:w="155"/><text x="96.0436%" y="270.50"></text></g><g><title>add_vrect (plotly/graph_objs/_figure.py:1152) (155 samples, 0.23%)</title><rect x="95.7936%" y="276" width="0.2294%" height="15" fill="rgb(253,148,53)" fg:x="64722" fg:w="155"/><text x="96.0436%" y="286.50"></text></g><g><title>_plotly_figures (src/dycov/report/html.py:360) (224 samples, 0.33%)</title><rect x="95.7936%" y="244" width="0.3315%" height="15" fill="rgb(218,129,16)" fg:x="64722" fg:w="224"/><text x="96.0436%" y="254.50"></text></g><g><title>_exclusion_windows (src/dycov/report/html.py:342) (69 samples, 0.10%)</title><rect x="96.0230%" y="260" width="0.1021%" height="15" fill="rgb(216,85,19)" fg:x="64877" fg:w="69"/><text x="96.2730%" y="270.50"></text></g><g><title>add_vrect (plotly/graph_objs/_figure.py:1152) (69 samples, 0.10%)</title><rect x="96.0230%" y="276" width="0.1021%" height="15" fill="rgb(235,228,7)" fg:x="64877" fg:w="69"/><text x="96.2730%" y="286.50"></text></g><g><title>add_vrect (plotly/basedatatypes.py:4138) (69 samples, 0.10%)</title><rect x="96.0230%" y="292" width="0.1021%" height="15" fill="rgb(245,175,0)" fg:x="64877" fg:w="69"/><text x="96.2730%" y="302.50"></text></g><g><title>_plotly_figures (src/dycov/report/html.py:377) (98 samples, 0.15%)</title><rect x="96.1266%" y="244" width="0.1450%" height="15" fill="rgb(208,168,36)" fg:x="64947" fg:w="98"/><text x="96.3766%" y="254.50"></text></g><g><title>_mxe_traces (src/dycov/report/html.py:273) (126 samples, 0.19%)</title><rect x="96.2717%" y="260" width="0.1865%" height="15" fill="rgb(246,171,24)" fg:x="65045" fg:w="126"/><text x="96.5217%" y="270.50"></text></g><g><title>add_vline (plotly/graph_objs/_figure.py:1044) (126 samples, 0.19%)</title><rect x="96.2717%" y="276" width="0.1865%" height="15" fill="rgb(215,142,24)" fg:x="65045" fg:w="126"/><text x="96.5217%" y="286.50"></text></g><g><title>add_vline (plotly/basedatatypes.py:4087) (126 samples, 0.19%)</title><rect x="96.2717%" y="292" width="0.1865%" height="15" fill="rgb(250,187,7)" fg:x="65045" fg:w="126"/><text x="96.5217%" y="302.50"></text></g><g><title>_mxe_traces (src/dycov/report/html.py:279) (83 samples, 0.12%)</title><rect x="96.4582%" y="260" width="0.1228%" height="15" fill="rgb(228,66,33)" fg:x="65171" fg:w="83"/><text x="96.7082%" y="270.50"></text></g><g><title>add_vline (plotly/graph_objs/_figure.py:1044) (83 samples, 0.12%)</title><rect x="96.4582%" y="276" width="0.1228%" height="15" fill="rgb(234,215,21)" fg:x="65171" fg:w="83"/><text x="96.7082%" y="286.50"></text></g><g><title>add_vline (plotly/basedatatypes.py:4087) (83 samples, 0.12%)</title><rect x="96.4582%" y="292" width="0.1228%" height="15" fill="rgb(222,191,20)" fg:x="65171" fg:w="83"/><text x="96.7082%" y="302.50"></text></g><g><title>_mxe_traces (src/dycov/report/html.py:285) (145 samples, 0.21%)</title><rect x="96.5810%" y="260" width="0.2146%" height="15" fill="rgb(245,79,54)" fg:x="65254" fg:w="145"/><text x="96.8310%" y="270.50"></text></g><g><title>add_vline (plotly/graph_objs/_figure.py:1044) (145 samples, 0.21%)</title><rect x="96.5810%" y="276" width="0.2146%" height="15" fill="rgb(240,10,37)" fg:x="65254" fg:w="145"/><text x="96.8310%" y="286.50"></text></g><g><title>add_vline (plotly/basedatatypes.py:4087) (145 samples, 0.21%)</title><rect x="96.5810%" y="292" width="0.2146%" height="15" fill="rgb(214,192,32)" fg:x="65254" fg:w="145"/><text x="96.8310%" y="302.50"></text></g><g><title>_plotly_figures (src/dycov/report/html.py:378) (371 samples, 0.55%)</title><rect x="96.2717%" y="244" width="0.5491%" height="15" fill="rgb(209,36,54)" fg:x="65045" fg:w="371"/><text x="96.5217%" y="254.50"></text></g><g><title>_plotly_figures (src/dycov/report/html.py:388) (77 samples, 0.11%)</title><rect x="96.8208%" y="244" width="0.1140%" height="15" fill="rgb(220,10,11)" fg:x="65416" fg:w="77"/><text x="97.0708%" y="254.50"></text></g><g><title>plotly_figures (src/dycov/report/html.py:413) (865 samples, 1.28%)</title><rect x="95.7936%" y="228" width="1.2803%" height="15" fill="rgb(221,106,17)" fg:x="64722" fg:w="865"/><text x="96.0436%" y="238.50"></text></g><g><title>_set_compound_prop (plotly/basedatatypes.py:5263) (316 samples, 0.47%)</title><rect x="97.3699%" y="436" width="0.4677%" height="15" fill="rgb(251,142,44)" fg:x="65787" fg:w="316"/><text x="97.6199%" y="446.50"></text></g><g><title>validate_coerce (_plotly_utils/basevalidators.py:2504) (316 samples, 0.47%)</title><rect x="97.3699%" y="452" width="0.4677%" height="15" fill="rgb(238,13,15)" fg:x="65787" fg:w="316"/><text x="97.6199%" y="462.50"></text></g><g><title>__init__ (plotly/graph_objs/layout/_template.py:327) (334 samples, 0.49%)</title><rect x="97.3684%" y="404" width="0.4943%" height="15" fill="rgb(208,107,27)" fg:x="65786" fg:w="334"/><text x="97.6184%" y="414.50"></text></g><g><title>__setitem__ (plotly/basedatatypes.py:4852) (333 samples, 0.49%)</title><rect x="97.3699%" y="420" width="0.4929%" height="15" fill="rgb(205,136,37)" fg:x="65787" fg:w="333"/><text x="97.6199%" y="430.50"></text></g><g><title>_set_compound_prop (plotly/basedatatypes.py:5263) (128 samples, 0.19%)</title><rect x="97.8642%" y="436" width="0.1895%" height="15" fill="rgb(250,205,27)" fg:x="66121" fg:w="128"/><text x="98.1142%" y="446.50"></text></g><g><title>validate_coerce (_plotly_utils/basevalidators.py:2504) (128 samples, 0.19%)</title><rect x="97.8642%" y="452" width="0.1895%" height="15" fill="rgb(210,80,43)" fg:x="66121" fg:w="128"/><text x="98.1142%" y="462.50"></text></g><g><title>_set_compound_prop (plotly/basedatatypes.py:5263) (513 samples, 0.76%)</title><rect x="97.3048%" y="340" width="0.7593%" height="15" fill="rgb(247,160,36)" fg:x="65743" fg:w="513"/><text x="97.5548%" y="350.50"></text></g><g><title>validate_coerce (_plotly_utils/basevalidators.py:2778) (512 samples, 0.76%)</title><rect x="97.3063%" y="356" width="0.7578%" height="15" fill="rgb(234,13,49)" fg:x="65744" fg:w="512"/><text x="97.5563%" y="366.50"></text></g><g><title>deepcopy (copy.py:172) (492 samples, 0.73%)</title><rect x="97.3359%" y="372" width="0.7282%" height="15" fill="rgb(234,122,0)" fg:x="65764" fg:w="492"/><text x="97.5859%" y="382.50"></text></g><g><title>_reconstruct (copy.py:265) (492 samples, 0.73%)</title><rect x="97.3359%" y="388" width="0.7282%" height="15" fill="rgb(207,146,38)" fg:x="65764" fg:w="492"/><text x="97.5859%" y="398.50"></text></g><g><title>__init__ (plotly/graph_objs/layout/_template.py:331) (136 samples, 0.20%)</title><rect x="97.8628%" y="404" width="0.2013%" height="15" fill="rgb(207,177,25)" fg:x="66120" fg:w="136"/><text x="98.1128%" y="414.50"></text></g><g><title>__setitem__ (plotly/basedatatypes.py:4852) (135 samples, 0.20%)</title><rect x="97.8642%" y="420" width="0.1998%" height="15" fill="rgb(211,178,42)" fg:x="66121" fg:w="135"/><text x="98.1142%" y="430.50"></text></g><g><title>__setitem__ (plotly/basedatatypes.py:4852) (560 samples, 0.83%)</title><rect x="97.3048%" y="324" width="0.8288%" height="15" fill="rgb(230,69,54)" fg:x="65743" fg:w="560"/><text x="97.5548%" y="334.50"></text></g><g><title>plotly_figures (src/dycov/report/html.py:424) (717 samples, 1.06%)</title><rect x="97.0754%" y="228" width="1.0612%" height="15" fill="rgb(214,135,41)" fg:x="65588" fg:w="717"/><text x="97.3254%" y="238.50"></text></g><g><title>update_layout (plotly/graph_objs/_figure.py:787) (717 samples, 1.06%)</title><rect x="97.0754%" y="244" width="1.0612%" height="15" fill="rgb(237,67,25)" fg:x="65588" fg:w="717"/><text x="97.3254%" y="254.50"></text></g><g><title>update_layout (plotly/basedatatypes.py:1392) (717 samples, 1.06%)</title><rect x="97.0754%" y="260" width="1.0612%" height="15" fill="rgb(222,189,50)" fg:x="65588" fg:w="717"/><text x="97.3254%" y="270.50"></text></g><g><title>update (plotly/basedatatypes.py:5123) (672 samples, 0.99%)</title><rect x="97.1420%" y="276" width="0.9946%" height="15" fill="rgb(245,148,34)" fg:x="65633" fg:w="672"/><text x="97.3920%" y="286.50"></text></g><g><title>_perform_update (plotly/basedatatypes.py:3926) (598 samples, 0.89%)</title><rect x="97.2515%" y="292" width="0.8851%" height="15" fill="rgb(222,29,6)" fg:x="65707" fg:w="598"/><text x="97.5015%" y="302.50"></text></g><g><title>__setitem__ (plotly/basedatatypes.py:5898) (563 samples, 0.83%)</title><rect x="97.3033%" y="308" width="0.8333%" height="15" fill="rgb(221,189,43)" fg:x="65742" fg:w="563"/><text x="97.5533%" y="318.50"></text></g><g><title>plotly_figures (src/dycov/report/html.py:439) (68 samples, 0.10%)</title><rect x="98.2032%" y="228" width="0.1006%" height="15" fill="rgb(207,36,27)" fg:x="66350" fg:w="68"/><text x="98.4532%" y="238.50"></text></g><g><title>convert_to_base64 (_plotly_utils/utils.py:109) (120 samples, 0.18%)</title><rect x="98.3793%" y="340" width="0.1776%" height="15" fill="rgb(217,90,24)" fg:x="66469" fg:w="120"/><text x="98.6293%" y="350.50"></text></g><g><title>to_typed_array_spec (_plotly_utils/utils.py:84) (97 samples, 0.14%)</title><rect x="98.4134%" y="356" width="0.1436%" height="15" fill="rgb(224,66,35)" fg:x="66492" fg:w="97"/><text x="98.6634%" y="366.50"></text></g><g><title>b64encode (base64.py:58) (86 samples, 0.13%)</title><rect x="98.4296%" y="372" width="0.1273%" height="15" fill="rgb(221,13,50)" fg:x="66503" fg:w="86"/><text x="98.6796%" y="382.50"></text></g><g><title>to_html (plotly/io/_html.py:130) (170 samples, 0.25%)</title><rect x="98.3068%" y="260" width="0.2516%" height="15" fill="rgb(236,68,49)" fg:x="66420" fg:w="170"/><text x="98.5568%" y="270.50"></text></g><g><title>validate_coerce_fig_to_dict (plotly/io/_utils.py:10) (170 samples, 0.25%)</title><rect x="98.3068%" y="276" width="0.2516%" height="15" fill="rgb(229,146,28)" fg:x="66420" fg:w="170"/><text x="98.5568%" y="286.50"></text></g><g><title>to_dict (plotly/basedatatypes.py:3315) (152 samples, 0.22%)</title><rect x="98.3334%" y="292" width="0.2250%" height="15" fill="rgb(225,31,38)" fg:x="66438" fg:w="152"/><text x="98.5834%" y="302.50"></text></g><g><title>convert_to_base64 (_plotly_utils/utils.py:111) (152 samples, 0.22%)</title><rect x="98.3334%" y="308" width="0.2250%" height="15" fill="rgb(250,208,3)" fg:x="66438" fg:w="152"/><text x="98.5834%" y="318.50"></text></g><g><title>convert_to_base64 (_plotly_utils/utils.py:114) (125 samples, 0.19%)</title><rect x="98.3734%" y="324" width="0.1850%" height="15" fill="rgb(246,54,23)" fg:x="66465" fg:w="125"/><text x="98.6234%" y="334.50"></text></g><g><title>to_json_plotly (plotly/io/_json.py:141) (97 samples, 0.14%)</title><rect x="98.5599%" y="276" width="0.1436%" height="15" fill="rgb(243,76,11)" fg:x="66591" fg:w="97"/><text x="98.8099%" y="286.50"></text></g><g><title>_safe (plotly/io/_json.py:74) (89 samples, 0.13%)</title><rect x="98.5717%" y="292" width="0.1317%" height="15" fill="rgb(245,21,50)" fg:x="66599" fg:w="89"/><text x="98.8217%" y="302.50"></text></g><g><title>encode (_plotly_utils/utils.py:162) (209 samples, 0.31%)</title><rect x="98.7035%" y="308" width="0.3093%" height="15" fill="rgb(228,9,43)" fg:x="66688" fg:w="209"/><text x="98.9535%" y="318.50"></text></g><g><title>encode (json/encoder.py:199) (209 samples, 0.31%)</title><rect x="98.7035%" y="324" width="0.3093%" height="15" fill="rgb(208,100,47)" fg:x="66688" fg:w="209"/><text x="98.9535%" y="334.50"></text></g><g><title>iterencode (json/encoder.py:257) (209 samples, 0.31%)</title><rect x="98.7035%" y="340" width="0.3093%" height="15" fill="rgb(232,26,8)" fg:x="66688" fg:w="209"/><text x="98.9535%" y="350.50"></text></g><g><title>to_html (plotly/io/_html.py:136) (566 samples, 0.84%)</title><rect x="98.5599%" y="260" width="0.8377%" height="15" fill="rgb(216,166,38)" fg:x="66591" fg:w="566"/><text x="98.8099%" y="270.50"></text></g><g><title>to_json_plotly (plotly/io/_json.py:142) (469 samples, 0.69%)</title><rect x="98.7035%" y="276" width="0.6942%" height="15" fill="rgb(251,202,51)" fg:x="66688" fg:w="469"/><text x="98.9535%" y="286.50"></text></g><g><title>dumps (json/__init__.py:238) (469 samples, 0.69%)</title><rect x="98.7035%" y="292" width="0.6942%" height="15" fill="rgb(254,216,34)" fg:x="66688" fg:w="469"/><text x="98.9535%" y="302.50"></text></g><g><title>encode (_plotly_utils/utils.py:184) (204 samples, 0.30%)</title><rect x="99.0957%" y="308" width="0.3019%" height="15" fill="rgb(251,32,27)" fg:x="66953" fg:w="204"/><text x="99.3457%" y="318.50"></text></g><g><title>dumps (json/__init__.py:238) (204 samples, 0.30%)</title><rect x="99.0957%" y="324" width="0.3019%" height="15" fill="rgb(208,127,28)" fg:x="66953" fg:w="204"/><text x="99.3457%" y="334.50"></text></g><g><title>encode (json/encoder.py:199) (203 samples, 0.30%)</title><rect x="99.0972%" y="340" width="0.3005%" height="15" fill="rgb(224,137,22)" fg:x="66954" fg:w="203"/><text x="99.3472%" y="350.50"></text></g><g><title>iterencode (json/encoder.py:257) (203 samples, 0.30%)</title><rect x="99.0972%" y="356" width="0.3005%" height="15" fill="rgb(254,70,32)" fg:x="66954" fg:w="203"/><text x="99.3472%" y="366.50"></text></g><g><title>_create_full_tex (src/dycov/report/report.py:339) (7,882 samples, 11.67%)</title><rect x="87.7879%" y="196" width="11.6660%" height="15" fill="rgb(229,75,37)" fg:x="59313" fg:w="7882"/><text x="88.0379%" y="206.50">_create_full_tex ..</text></g><g><title>_generate_figures (src/dycov/report/report.py:267) (2,698 samples, 3.99%)</title><rect x="95.4606%" y="212" width="3.9933%" height="15" fill="rgb(252,64,23)" fg:x="64497" fg:w="2698"/><text x="95.7106%" y="222.50">_gen..</text></g><g><title>plotly_figures (src/dycov/report/html.py:445) (777 samples, 1.15%)</title><rect x="98.3038%" y="228" width="1.1500%" height="15" fill="rgb(232,162,48)" fg:x="66418" fg:w="777"/><text x="98.5538%" y="238.50"></text></g><g><title>to_html (plotly/basedatatypes.py:3600) (777 samples, 1.15%)</title><rect x="98.3038%" y="244" width="1.1500%" height="15" fill="rgb(246,160,12)" fg:x="66418" fg:w="777"/><text x="98.5538%" y="254.50"></text></g><g><title>_create_full_tex (src/dycov/report/report.py:351) (82 samples, 0.12%)</title><rect x="99.4539%" y="196" width="0.1214%" height="15" fill="rgb(247,166,0)" fg:x="67195" fg:w="82"/><text x="99.7039%" y="206.50"></text></g><g><title>create_html (src/dycov/report/html.py:515) (75 samples, 0.11%)</title><rect x="99.4642%" y="212" width="0.1110%" height="15" fill="rgb(249,219,21)" fg:x="67202" fg:w="75"/><text x="99.7142%" y="222.50"></text></g><g><title>create_pdf (src/dycov/report/report.py:429) (8,569 samples, 12.68%)</title><rect x="86.9812%" y="164" width="12.6828%" height="15" fill="rgb(205,209,3)" fg:x="58768" fg:w="8569"/><text x="87.2312%" y="174.50">create_pdf (src/dgc..</text></g><g><title>_create_reports (src/dycov/report/report.py:83) (8,569 samples, 12.68%)</title><rect x="86.9812%" y="180" width="12.6828%" height="15" fill="rgb(243,44,1)" fg:x="58768" fg:w="8569"/><text x="87.2312%" y="190.50">_create_reports (sr..</text></g><g><title>__create_report (src/dycov/core/validation.py:172) (8,581 samples, 12.70%)</title><rect x="86.9679%" y="148" width="12.7006%" height="15" fill="rgb(206,159,16)" fg:x="58759" fg:w="8581"/><text x="87.2179%" y="158.50">__create_report (sr..</text></g><g><title>__create_report (src/dycov/core/validation.py:197) (105 samples, 0.16%)</title><rect x="99.6685%" y="148" width="0.1554%" height="15" fill="rgb(244,77,30)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="158.50"></text></g><g><title>copy_output_files (src/dycov/files/manage_files.py:383) (105 samples, 0.16%)</title><rect x="99.6685%" y="164" width="0.1554%" height="15" fill="rgb(218,69,12)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="174.50"></text></g><g><title>copytree (shutil.py:559) (105 samples, 0.16%)</title><rect x="99.6685%" y="180" width="0.1554%" height="15" fill="rgb(212,87,7)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="190.50"></text></g><g><title>_copytree (shutil.py:495) (105 samples, 0.16%)</title><rect x="99.6685%" y="196" width="0.1554%" height="15" fill="rgb(245,114,25)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="206.50"></text></g><g><title>copytree (shutil.py:559) (105 samples, 0.16%)</title><rect x="99.6685%" y="212" width="0.1554%" height="15" fill="rgb(210,61,42)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="222.50"></text></g><g><title>_copytree (shutil.py:499) (105 samples, 0.16%)</title><rect x="99.6685%" y="228" width="0.1554%" height="15" fill="rgb(211,52,33)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="238.50"></text></g><g><title>copy2 (shutil.py:434) (105 samples, 0.16%)</title><rect x="99.6685%" y="244" width="0.1554%" height="15" fill="rgb(234,58,33)" fg:x="67340" fg:w="105"/><text x="99.9185%" y="254.50"></text></g><g><title>copyfile (shutil.py:267) (104 samples, 0.15%)</title><rect x="99.6699%" y="260" width="0.1539%" height="15" fill="rgb(220,115,36)" fg:x="67341" fg:w="104"/><text x="99.9199%" y="270.50"></text></g><g><title>_fastcopy_sendfile (shutil.py:143) (104 samples, 0.15%)</title><rect x="99.6699%" y="276" width="0.1539%" height="15" fill="rgb(243,153,54)" fg:x="67341" fg:w="104"/><text x="99.9199%" y="286.50"></text></g><g><title>validate (src/dycov/core/validation.py:258) (8,795 samples, 13.02%)</title><rect x="86.9679%" y="132" width="13.0173%" height="15" fill="rgb(251,47,18)" fg:x="58759" fg:w="8795"/><text x="87.2179%" y="142.50">validate (src/dycov/c..</text></g><g><title>__create_report (src/dycov/core/validation.py:199) (109 samples, 0.16%)</title><rect x="99.8239%" y="148" width="0.1613%" height="15" fill="rgb(242,102,42)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="158.50"></text></g><g><title>copy_output_files (src/dycov/files/manage_files.py:383) (109 samples, 0.16%)</title><rect x="99.8239%" y="164" width="0.1613%" height="15" fill="rgb(234,31,38)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="174.50"></text></g><g><title>copytree (shutil.py:559) (109 samples, 0.16%)</title><rect x="99.8239%" y="180" width="0.1613%" height="15" fill="rgb(221,117,51)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="190.50"></text></g><g><title>_copytree (shutil.py:495) (109 samples, 0.16%)</title><rect x="99.8239%" y="196" width="0.1613%" height="15" fill="rgb(212,20,18)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="206.50"></text></g><g><title>copytree (shutil.py:559) (109 samples, 0.16%)</title><rect x="99.8239%" y="212" width="0.1613%" height="15" fill="rgb(245,133,36)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="222.50"></text></g><g><title>_copytree (shutil.py:495) (109 samples, 0.16%)</title><rect x="99.8239%" y="228" width="0.1613%" height="15" fill="rgb(212,6,19)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="238.50"></text></g><g><title>copytree (shutil.py:559) (109 samples, 0.16%)</title><rect x="99.8239%" y="244" width="0.1613%" height="15" fill="rgb(218,1,36)" fg:x="67445" fg:w="109"/><text x="100.0739%" y="254.50"></text></g><g><title>all (67,564 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(246,84,54)" fg:x="0" fg:w="67564"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (dycov:8) (67,425 samples, 99.79%)</title><rect x="0.2057%" y="68" width="99.7943%" height="15" fill="rgb(242,110,6)" fg:x="139" fg:w="67425"/><text x="0.4557%" y="78.50">&lt;module&gt; (dycov:8)</text></g><g><title>dycov (src/dycov/launchers.py:520) (67,421 samples, 99.79%)</title><rect x="0.2117%" y="84" width="99.7883%" height="15" fill="rgb(214,47,5)" fg:x="143" fg:w="67421"/><text x="0.4617%" y="94.50">dycov (src/dycov/launchers.py:520)</text></g><g><title>_execute_validate (src/dycov/launchers.py:488) (67,421 samples, 99.79%)</title><rect x="0.2117%" y="100" width="99.7883%" height="15" fill="rgb(218,159,25)" fg:x="143" fg:w="67421"/><text x="0.4617%" y="110.50">_execute_validate (src/dycov/launchers.py:488)</text></g><g><title>_model_validation (src/dycov/launchers.py:95) (67,407 samples, 99.77%)</title><rect x="0.2324%" y="116" width="99.7676%" height="15" fill="rgb(215,211,28)" fg:x="157" fg:w="67407"/><text x="0.4824%" y="126.50">_model_validation (src/dycov/launchers.py:95)</text></g></svg></svg>